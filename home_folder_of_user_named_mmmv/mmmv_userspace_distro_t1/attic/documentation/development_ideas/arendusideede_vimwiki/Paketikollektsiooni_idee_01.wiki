
* [[index]]

= Paketikollektsiooni idee 01 =

== Mis asi on pakett ==

Paketid ei sisalda paigaldatava/ehitatava tarkvara koodi 
ega binaari, vaid kajastavad ainult ehitusskripte/installatsiooniskripte.

Kood ja v8imalikud binaarid on m22ratlemata struktuuriga
stblob-failide kollektsioonis, nii et sama tarkvara
ehitamiseks v8ib eksisteerida mitu erinevat paketti.
stblob-failide kollektsiooni ja ehitusskriptide
vahel on adaptri arnedusmustri realisatsioonina 
Ruby-s tehtud konsoolitöövahend, mis vastab 
ehitusskripti jaoks päringutele:

* Kas vastav stblob on stblob-failide-kollektsioonis olemas?
* KUI on olemas, siis palun kopeerida siia.
* KUI on olemas, siis mis ta suurus baitides on. (skript loeb selle stblobfaili nimest välja).

Paketid ise on samuti stblob-failid, millel
puudub kindel struktuur. Paketist s8ltuvad 
skriptid peavad konkreetse stblob-faili sisu
struktuuri ise arvesse v8tma.


== Pakettide omavaheline sõltuvus ==

Pakett ise ei sisalda infot selle kohta, milistest
teistest pakettidest ta sõltub. Pakitid/installatsiooniskriptid
hindavad keskkonda vaid kas failisüsteemi uurides või
keskkonnamuutujate väärtusi vaadates. Näiteks kontrollides,
et kas vastava nimega programm on rajal("PATH").

Pakettide vahline sõltuvustegraaf on eraldi dokument,
mis on kirjeldatud formaadis, mille malliks on fail

    /home/mmmv/mmmv_userspace_distro_t1/mmmv/lib/templates/graph_of_dependencies_template.txt

Too dokumendi-formaat võimaldab ka valikuid, et 
ühe paketi/installatsiooniskripti sõltuvuse S1 võib
ära täita mitu erinevat paketti. Rekursiivse installatsiooni
jaoks on eraldi konsoolitöövahend, mis tolle graafi
sisse loeb, kasutajalt valikuid küsib ja pakettide 
manuaalse installatsiooni-skripti genereerib. 

Lisaks sõltuvuste-graafile leidub eraldi 2-tulbaline tabel, kus on
ühes tulbas paketi/installatsiooniskripti stblobfailinimi
ning teises tulbas installatsiooniskripti nimi ehk 
selle faili nimi, mis installatsiooni/ehitustegevuse 
tolle paketi korral käivitab. See 2-tulbalise tabeli
fail loetakse tolle pakettide rekursiivse installatsiooni skripti
generaatori poolt sisse ning asja mõte on, et tänu
sellisele eraldi tabelile ei pea kõik paketid sama
struktuuriga olema ehk paketi formaati saab tulevikus
muuta ilma, et olemasolevaid pakette muutma peaks.
Küll aga võib pakett,stblobfaili "paiload" kataloogis
oleva tar-faili sisuks olev kataloog, sisaldada 
tekstifaili mmmv_userspace_distro_t1_pakcet_folder_structure.txt
kus on 

    Foo = Bar
    
stiilis parameetreid ette antud.


== stblob-failide-kollektsiooni realisatsiooni idee 01 ==

stblob-failide kollektsioon kasutab toda
kataloogistruktuuripõhise "indeksi" 
stblob-faili-nimest arvutamise ideed,
mida doxygen failide korral kasutab. Näide: 

    hoidlajuur
    └── 4d
        └── d4
            └── e7
                └── 4dd4e7a1796f62c42363e4824b08bd895f5dd417ecfa7e77i_e2fcef4c629828aba22135d6190a41da8bb2da599078704de62309cd0e0bad5eh_04201s_1000v.stblob

ning siis 

    cd hoidlajuur/../
    find . -name '*.stblob' > ./find_stblob.txt 
  
Sealt järgmine etapp on teha konsoolitöövahend, mis
need "find_stblob.txt" failid sisse loeb, suhtelised
rajad absoluutradadeks konverteerib ning täisrajad
ühtsesse nimekirja lisab. Nimekiri võib olla 
SQLite formaadis, kuid eksisteerib ka eksportimis-funktsioon,
et genereeritakse tavaline tekstifail, üks rada ühel real.

Sealt järgmine etapp on luua find_stblob.txt failide
analooge muul viisil, näiteks

    cd /home/mmmv/applications
    
    nice  -n 4 find . -maxdepth  4 -name '*.stblob' | \
        grep 'originals' | grep 'upstream_source' > ./find_stblob.txt
	
    nice  -n 4 find . -maxdepth  4 -name '*.stblob' | \
        grep 'originals' | grep 'mmmv_userspace_distro_t1_package_t1' >> ./find_stblob.txt

ja siis see find_stblob.txt kah samasse stblobfailide üldnimekirja lisada.


== Konsoolitöövahendite programmeerimiskeele valik ==

Konsoolitöövahendite realisatsioon on Ruby's, sest siis on võimalik
suvalisi hieroglüüfe sisaldavate failiradadega toime tulla.

