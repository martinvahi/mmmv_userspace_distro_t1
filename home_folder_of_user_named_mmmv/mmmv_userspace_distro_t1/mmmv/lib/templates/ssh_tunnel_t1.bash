#!/usr/bin/env bash
#==========================================================================
# Author of this file: INCOMPLETE
# This file is in public domain.
#
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: 0BSD
#==========================================================================
# The ssh-tunnel parameters:

    SSH_SERVER_IP_ADDRESS_FROM_SSH_CLIENT_PERSPECTIVE="96.163.22.231"
    SSH_SERVER_PORT_FROM_SSH_CLIENT_PERSPECTIVE="22"
    USERNAME_FOR_LOGGING_INTO_THE_SSH_SERVER="pi"


    # The model is that each tunnel has only 2 ends and
    # queries/"questions" enter the tunnel from one of the ends and query
    # results, "answers", exit from the same end of the tunnel, where 
    # the queries entered the tunnel.
    SB_QUERIES_ENTER_THE_TUNNEL_FROM_SSH_CLIENT_SIDE="t" # {t,f}, "t" for "true"


    TUNNEL_IP_ADDRESS_FROM_SSH_SERVER_PERSPECTIVE="localhost"
    TUNNEL_PORT_FROM_SSH_SERVER_PERSPECTIVE="30120"

    TUNNEL_IP_ADDRESS_FROM_SSH_CLIENT_PERSPECTIVE="localhost"
    TUNNEL_PORT_FROM_SSH_CLIENT_PERSPECTIVE="4146"

    SB_CREATE_THE_TUNNEL_AND_EXIT_SO_THAT_THE_TUNNEL_EXISTS_LONGER_THAN_THIS_BASH_SCRIPT_PROCESS_LIVES="f" # {t,f}, "t" for "true"

    # Optionally a public cryptography key pair can be used as a password
    # replacement, which allows non-interactive ssh based login.
    # Key pairs can be generated by executing:
    #
    #     cd $HOME/.ssh
    #     ssh-keygen -t rsa -C "Some Useful Comment" -f ~/.ssh/foo_key.txt
    #     chmod -f -R 0700 $HOME/.ssh # strict access rights requirement
    #
    # That generates 2 files:
    #
    #     $HOME/.ssh/foo_key.txt      # is a client side key, a "secret" key
    #     $HOME/.ssh/foo_key.txt.pub  # is a server side key, a "public" key.
    #
    #     # At server side as a non-root user
    #     cat /what/ever/path/foo.txt.pub >> $HOME/.ssh/authorized_keys
    #
    S_OPTIONALLY_A_FULL_PATH_TO_A_KEY_FILE_AT_FOLDER_HOME_DOT_SSH="not_in_use_but_please_change_this_text_here_if_in_use"

#--------------------------------------------------------------------------
# SSH Server Configuration Quirks
#--------------------------------------------------------------------------
#
# By default the ssh-server only binds the ssh-tunnels to the "localhost",
# even, when a server side public network interface/IP-address is assigned
# to this script's variable
#
#     TUNNEL_IP_ADDRESS_FROM_SSH_SERVER_PERSPECTIVE
#
# To overcome that issue, the ssh-server side
#
#     /etc/ssh/sshd_config
#
# has to be updated by adding/uncommenting the line
#
#     GatewayPorts yes
#
# and the ssh-server has to be restarted by
#
#      cd /etc/init.d
#      ./ssh restart
#
# The server side
#
#     /etc/ssh/sshd_config
#
# must also explicitly list the server side operating system
# users, who are allowed to log in over SSH. Examples:
#
# AllowUsers Simpson@192.168.44.55 ATotalFoolFromAnywhere FooUser@192.* BarUser@192.168.*
#
# As of 2025 the Linux kernel considers ports 0..1023 to be privileged
# in the context of RFC_6335. On Debian Linux a tool called "authbind"
# allows a userspace process to bind to a privileged port.  A Bash
# example, how to give a Linux operating system user named "foouser" the
# ability to run a program "BarProgram" so that the "BarProgram" can
# attach to a privileged port 80:
#
#     # as root user:
#     echo "Whatever Fun Day!"  >   /etc/authbind/byport/80
#     chown foouser /etc/authbind/byport/80
#
#     # as foouser:
#     authbind --deep /full/path/to/the/BarProgram # starts the BarProgram 
#
#--------------------------------------------------------------------------
# Everything below this line consists of only the implementation.
#--------------------------------------------------------------------------

SB_OPTS_0=" "
S_TMP_0="$SB_CREATE_THE_TUNNEL_AND_EXIT_SO_THAT_THE_TUNNEL_EXISTS_LONGER_THAN_THIS_BASH_SCRIPT_PROCESS_LIVES"

if [ "$S_TMP_0" == "t" ];then
    SB_OPTS_0=" -fN "
else
    if [ "$S_TMP_0" != "f" ];then
        echo ""
        echo "The configuration is flawed. The "
        echo ""
        echo "    SB_CREATE_THE_TUNNEL_AND_EXIT_SO_THAT_THE_TUNNEL_EXISTS_LONGER_THAN_THIS_BASH_SCRIPT_PROCESS_LIVES==$SB_CREATE_THE_TUNNEL_AND_EXIT_SO_THAT_THE_TUNNEL_EXISTS_LONGER_THAN_THIS_BASH_SCRIPT_PROCESS_LIVES"
        echo ""
        echo "Supported values: {t,f}."
        echo "GUID='d26a6d12-798d-4c1c-b30a-a30211d059e7'"
        echo ""
        #--------
        exit 1
    fi
fi

#--------------------------------------------------------------------------
SB_OPTS_1=" -o ServerAliveInterval=32760 -o ServerAliveCountMax=400 "
#--------------------------------------------------------------------------
SB_OPTS_2=" "
S_FP_0="$HOME/.ssh/SSHtunnels"
mkdir -p "$S_FP_0"
if [ "$?" == "0" ]; then
    SB_OPTS_2=" -o ControlPersist=11 -o ControlMaster=auto -o ControlPath=$S_FP_0 "
    sync ; wait ;
    chmod -f -R 0700 "$HOME/.ssh" 
    if [ "$?" != "0" ]; then
        echo ""
        echo -e "Failed to change the\e[31m access rights \e[39m"
        echo "of the $HOME/.ssh . Aborting script."
        echo "GUID='83fae625-b368-4c52-910a-a30211d059e7'"
        echo ""
        #--------
        exit 1
    fi
fi
#--------------------------------------------------------------------------
SB_OPTS_3=" "
S_TMP_0="$S_OPTIONALLY_A_FULL_PATH_TO_A_KEY_FILE_AT_FOLDER_HOME_DOT_SSH"

SB_ERR="t"
if [ "$S_TMP_0" != "" ]; then 
    if [ "$S_TMP_0" != "not_in_use_but_please_change_this_text_here_if_in_use" ]; then 
        if [ -e "$S_TMP_0" ]; then 
            if [ ! -d "$S_TMP_0" ]; then 
                SB_ERR="f"
            else
                echo ""
                echo -e "\e[31mA folder or a symlink to a folder was found in stead of a key file\e[39m."
                echo ""
                echo "    S_OPTIONALLY_A_FULL_PATH_TO_A_KEY_FILE_AT_FOLDER_HOME_DOT_SSH=$S_TMP_0 "
                echo ""
                echo "Aborting script."
                echo "GUID='8f762722-3ed0-4350-920a-a30211d059e7'"
                echo ""
                #--------
                exit 1
            fi
        else
            echo ""
            echo -e "\e[31mKey file described, but missing\e[39m."
            echo ""
            echo "    S_OPTIONALLY_A_FULL_PATH_TO_A_KEY_FILE_AT_FOLDER_HOME_DOT_SSH=$S_TMP_0 "
            echo ""
            echo "Aborting script."
            echo "GUID='9e7c3451-3914-4e25-910a-a30211d059e7'"
            echo ""
            #--------
            exit 1
        fi
    fi
fi
if [ "$SB_ERR" == "f" ]; then 
    SB_OPTS_3=" -o IdentitiesOnly=yes -o PubkeyAuthentication=yes -o IdentityFile=$S_TMP_0 " 
fi

#--------------------------------------------------------------------------

if [ "$SB_QUERIES_ENTER_THE_TUNNEL_FROM_SSH_CLIENT_SIDE" == "t" ];then
    S_QUIRK_1="-L" # queries/questions enter the tunnel at ssh client side
else
    if [ "$SB_QUERIES_ENTER_THE_TUNNEL_FROM_SSH_CLIENT_SIDE" == "f" ];then
        S_QUIRK_1="-R" # queries/questions enter the tunnel at ssh server side
    else
        echo ""
        echo "The configuration is flawed. The "
        echo ""
        echo "    SB_QUERIES_ENTER_THE_TUNNEL_FROM_SSH_CLIENT_SIDE==$SB_QUERIES_ENTER_THE_TUNNEL_FROM_SSH_CLIENT_SIDE"
        echo ""
        echo "Supported values: {t,f}."
        echo "The model is that each tunnel has only 2 ends and "
        echo "queries enter the tunnel from one of the ends and "
        echo "query results exit from the same end of the tunnel,"
        echo "where the queries entered the tunnel."
        echo ""
        echo "GUID='e812603b-cad1-4081-b40a-a30211d059e7'"
        echo ""
        #--------
        exit 1
    fi
fi

S_OPTS_SET_0=" $SB_OPTS_0 $SB_OPTS_1 $SB_OPTS_2 $SB_OPTS_3 "

if [ "$S_QUIRK_1" == "-L" ];then
ssh $S_OPTS_SET_0 -p $SSH_SERVER_PORT_FROM_SSH_CLIENT_PERSPECTIVE  $S_QUIRK_1 \
$TUNNEL_IP_ADDRESS_FROM_SSH_CLIENT_PERSPECTIVE:$TUNNEL_PORT_FROM_SSH_CLIENT_PERSPECTIVE:\
$TUNNEL_IP_ADDRESS_FROM_SSH_SERVER_PERSPECTIVE:$TUNNEL_PORT_FROM_SSH_SERVER_PERSPECTIVE \
$USERNAME_FOR_LOGGING_INTO_THE_SSH_SERVER@$SSH_SERVER_IP_ADDRESS_FROM_SSH_CLIENT_PERSPECTIVE
else
    if [ "$S_QUIRK_1" == "-R" ];then
ssh $S_OPTS_SET_0 -p $SSH_SERVER_PORT_FROM_SSH_CLIENT_PERSPECTIVE  $S_QUIRK_1 \
$TUNNEL_IP_ADDRESS_FROM_SSH_SERVER_PERSPECTIVE:$TUNNEL_PORT_FROM_SSH_SERVER_PERSPECTIVE:\
$TUNNEL_IP_ADDRESS_FROM_SSH_CLIENT_PERSPECTIVE:$TUNNEL_PORT_FROM_SSH_CLIENT_PERSPECTIVE \
$USERNAME_FOR_LOGGING_INTO_THE_SSH_SERVER@$SSH_SERVER_IP_ADDRESS_FROM_SSH_CLIENT_PERSPECTIVE
    else
        echo ""
        echo "This script is flawed."
        echo "    S_QUIRK_1==$S_QUIRK_1"
        echo "GUID='d4d04503-7102-496a-830a-a30211d059e7'"
        echo ""
        #--------
        exit 1
    fi
fi

#==========================================================================
# S_VERSION_OF_THIS_FILE="e0808e44-b9b2-4b48-910a-a30211d059e7"
# Author of the initial template of this file: Martin.Vahi@softf1.com
#==========================================================================
