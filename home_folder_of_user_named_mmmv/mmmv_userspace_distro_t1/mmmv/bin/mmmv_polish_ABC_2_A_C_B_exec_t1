#!/usr/bin/env ruby
#==========================================================================
# Initial author of this file: Martin.Vahi@softf1.com
# This file is in public domain.
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: 0BSD
#==========================================================================

s_general_idea=<<DESCRIPTION
The general idea: A B +  -->  A + B

    mmmv_polish_ABC_2_A_C_B_exec_t1 A B \+
    # gives
    A + B
    # and executes it on console.

DESCRIPTION

# This Ruby script is meant to be used in conjunction with the standard
# command line tool "xargs". The Ruby based implementation of the
# functionality of this script is horribly slow due to the Ruby
# interpreter initialization and the ~40MiB of RAM that it takes to
# start the Ruby interpreter, but Ruby handles strings properly and Ruby
# behaves the same way on both, Linux and BSD. It takes less human work
# to implement the functionality of this script in Ruby than it takes to
# create a proper console tool with proper UTF-8 support in C/C++.
#--------------------------------------------------------------------------

i_0=ARGV.size # ARGV.class == Array by the stdlib definition, hence no test here
#puts ARGV.class.to_s
#exit 1

if i_0!=3
   #---------------------------------------------------------
   s_fn=__FILE__
   s_0=s_fn.reverse
   if s_0.index("/")!=nil
      s_1=s_0[0..(s_0.index("/")-1)]
   else
      s_1=s_0[0..(-1)]
   end # if
   s_2=s_1.reverse
   #---------------------------------------------------------
   s_err="\n"
   s_err<<"The "+s_2+"\e[31m requires exactly 3 arguments\e[39m.\n"
   s_err<<s_general_idea
   puts(s_err)
   raise(Exception.new("GUID=='29889923-28f4-4774-916f-40a330e178e7'\n"))
   #---------------------------------------------------------
end # if

#--------------------------------------------------------------------------
# Some comments about the string concatenation:
# https://github.com/martinvahi/mmmv_notes/blob/main/mmmv_notes/phenomenon_scrutinization/string_concatenation/COMMENTS.txt
# https://sourceforge.net/p/mmmv-notes/code/ci/master/tree/mmmv_notes/phenomenon_scrutinization/string_concatenation/COMMENTS.txt
#----------------------------------------
s_cmd=""
s_cmd<<(" "+ARGV[0].to_s)
s_cmd<<(" "+ARGV[2].to_s)
s_cmd<<(" "+ARGV[1].to_s)
s_cmd<<" "
#----------------------------------------
# Bash single quotes escaping:
#     https://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings
#     archival copy: https://archive.ph/eJU1w
#
# The test Bash code line
#
#    echo '[`whoami `'"'"'$HOME]'
#
# returns to console:
#     #----citation--start---
#     [`whoami `'$HOME]
#     #----citation--end-----
#
#----------------------------------------
s_cmd_1="bash -c ' "+
s_cmd.gsub(/[']/,"'\"'\"'")+
" ' "
puts s_cmd
#printf(s_cmd)
#puts(s_cmd)
#----------------------------------------
# Citation from Ruby 3.1.2 stdlib core documentation:
#
#     "system returns true if the command gives
#     zero exit status, false for non zero exit
#     status. Returns nil if command execution
#     fails. An error status is available in $?."
#
#----------------------------------------
i_exit_code=1 # error occurred
x=system(s_cmd_1)
#system(s_cmd) # executes sh, not bash
if x!=nil
   ob_process_status=$?
   x1=ob_process_status.exitstatus
   i_exit_code=x1 if x1!=nil
end # if
exit i_exit_code
#--------------------------------------------------------------------------
# A Bash testline:
#
#     ./mmmv_polish_ABC_2_A_C_B_exec_t1 "whoami" "date" ";"
#
#==========================================================================
# S_VERSION_OF_THIS_FILE="1216c21b-da15-4c1b-b56f-40a330e178e7"
#==========================================================================
