#!/usr/bin/env bash
#==========================================================================
# Initial author of this file: Martin.Vahi@softf1.com
# This file is in public domain.
#
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: 0BSD
#
# As exiting from the ~/.bashrc exits the Bash session,
# the ~/.bashrc and its subparts must not call "exit".
# This script and all of the functions defined in it are "exit" free.
#==========================================================================
# The 
SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
# is a global variable for returning a string form of 
# a boolean value from verification functions. 
# "t" stands for "true" and "f" stands for "false".
# The same with the 
SB_NO_ERRORS_YET="t" # domain=={"t","f"} 
# except that the SB_NO_ERRORS_YET is expected to be
# reset to "t" by the client code, but the value of the 
# SB_VERIFICATION_FAILED is overwritten by the functions
# that return their results by using it.
#--------------------------------------------------------------------------

func_mmmv_wait_and_sync_t1(){
    wait # for background processes started by this Bash script to exit/finish
    sync # network drives, USB-sticks, etc.
    wait # for sync
} # func_mmmv_wait_and_sync_t1

#--------------------------------------------------------------------------
func_mmmv_init_s_timestamp_if_not_inited_t1(){
    if [ "$S_TIMESTAMP" == "" ]; then
        if [ "`which date 2> /dev/null`" != "" ]; then
            S_TIMESTAMP="`date +%Y`_`date +%m`_`date +%d`_T_`date +%H`h_`date +%M`min_`date +%S`s"
        else
            S_TIMESTAMP="0000_00_00_T_00h_00min_00s"
            echo ""
            echo -e "The console program \"\e[31mdate\e[39m\" is missing from the PATH."
            echo "Using a constant value, "
            echo ""
            echo "    S_TIMESTAMP=\"$S_TIMESTAMP\""
            echo ""
            echo "GUID=='83ed1d5c-2be2-48ab-a179-7110a0f088e7'"
            echo ""
        fi
    fi
} # func_mmmv_init_s_timestamp_if_not_inited_t1

#--------------------------------------------------------------------------

func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1(){
    local S_GUID_CANDIDATE_OPTIONAL="$1"
    #----------------------------------------------------------------------
    SB_VERIFICATION_FAILED="f" # a global variable
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET" != "t" ]; then 
        echo ""
        echo "The global variable "
        echo ""
        echo "    SB_NO_ERRORS_YET==\"$SB_NO_ERRORS_YET\""
        echo ""
        echo -e "\e[31mis expected to be initialized to \"t\"\e[39m before calling this function."
        if [ "$SB_NO_ERRORS_YET" != "f" ]; then 
            echo "and its domain is {\"t\", \"f\"}."
        fi
        echo "GUID=='1801e3f2-8c93-42bf-ad79-7110a0f088e7'"
        if [ "$S_GUID_CANDIDATE_OPTIONAL" != "" ]; then 
            echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE_OPTIONAL'"
        fi
        echo ""
        SB_VERIFICATION_FAILED="t"
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_verify_sb_t_f_but_do_not_exit_t1(){
    local SB_CANDIDATE="$1" 
    local S_GUID_CANDIDATE="$2" 
    #----------------------------------------------------------------------
    SB_VERIFICATION_FAILED="f" # a global variable
    #----------------------------------------------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        SB_VERIFICATION_FAILED="t"
        echo ""
        echo -e "\e[31mThe value of the S_GUID_CANDIDATE is an empty string\e[39m,"
        echo "but it is expected to be a GUID."
        echo "GUID=='4ef633b1-bd27-4ab0-b279-7110a0f088e7'"
        echo ""
    fi 
    #----------------------------------------------------------------------
    if [ "$SB_CANDIDATE" != "t" ]; then
        if [ "$SB_CANDIDATE" != "f" ]; then
            SB_VERIFICATION_FAILED="t"
            echo ""
            echo "The "
            echo ""
            echo "    SB_CANDIDATE==\"$SB_CANDIDATE\""
            echo ""
            echo "but the valid values are: \"t\", \"f\"."
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo "GUID=='6136ae12-49f5-458c-a469-7110a0f088e7'"
            echo ""
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_sb_t_f_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1(){
    SB_S_FP_ORIG_VERIFICATION_FAILED="f"
    if [ "$S_FP_ORIG" == "" ]; then 
        SB_S_FP_ORIG_VERIFICATION_FAILED="t"
        echo ""
        echo -e "\e[31mThe code of this script has the flaw\e[39m that"
        echo "the variable S_FP_ORIG has not been set."
        echo "GUID=='81c785a2-81cd-4fd6-8c69-7110a0f088e7'"
        echo ""
    else
        if [ ! -e "$S_FP_ORIG" ]; then 
            SB_S_FP_ORIG_VERIFICATION_FAILED="t"
            echo ""
            echo -e "\e[31mThe code of this script has the flaw\e[39m that "
            echo "the variable S_FP_ORIG has been declared, but "
            echo "its value is some string that is not a file or folder path."
            echo "It is expected to be a folder path."
            echo ""
            echo "    S_FP_ORIG==\"$S_FP_ORIG\""
            echo ""
            echo "GUID=='441b323a-2e78-4a1d-a269-7110a0f088e7'"
            echo ""
        else
            if [ ! -d "$S_FP_ORIG" ]; then 
                SB_S_FP_ORIG_VERIFICATION_FAILED="t"
                echo ""
                echo -e "\e[31mThe code of this script has the flaw\e[39m that "
                echo "the variable S_FP_ORIG references a file, but "
                echo "it is expected to reference a folder."
                echo ""
                echo "    S_FP_ORIG==$S_FP_ORIG"
                echo ""
                echo "GUID=='0dfe7931-6621-431f-a469-7110a0f088e7'"
                echo ""
            fi
        fi
    fi
    #----------------------------------------------------------------------
    func_mmmv_verify_sb_t_f_but_do_not_exit_t1 \
        "$SB_S_FP_ORIG_VERIFICATION_FAILED" \
        "3bbb1ae4-1e51-477b-a279-7110a0f088e7"
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        # The global variable 
        SB_VERIFICATION_FAILED="$SB_S_FP_ORIG_VERIFICATION_FAILED"
        # is assigned a value here for general compatibility.
    fi
    #----------------------------------------------------------------------
    # exit 1 # must NOT be called in ~/.bashrc, because 
             # exiting from the ~/.bashrc exits the session.
    #----------------------------------------------------------------------
    # Usage example:
    #    func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1
    #    if [ "$SB_S_FP_ORIG_VERIFICATION_FAILED" == "f" ]; then 
    #        cd "$S_FP_ORIG"
    #    else 
    #        echo ""
    #        echo "The code of this script is flawed."
    #        echo "GUID=='c61efe13-a365-4594-b769-7110a0f088e7'"
    #        echo ""
    #    fi
} # func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1

#--------------------------------------------------------------------------
SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED="f"
func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t2(){
    #----------------------------------------------------------------------
    if [ "$SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED" != "t" ]; then
        func_mmmv_verify_sb_t_f_but_do_not_exit_t1 \
            "$SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED" \
            "695fbe5e-ef18-45e9-8579-7110a0f088e7"
        if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
            func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1
            SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED="t"
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t2

#--------------------------------------------------------------------------
func_mmmv_assert_nonempty_string_but_do_not_exit_t1(){
    local S_IN="$1"
    local S_VARIABLE_NAME_IN_CALLING_CODE="$2"
    local S_GUID_CANDIDATE="$3"
    #----------------------------------------------------------------------
    local SB_NO_ERRORS_YET_LOCAL="t"
    if [ "$S_GUID_CANDIDATE" == "" ]; then 
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
        echo ""
        echo "    S_GUID_CANDIDATE==\"\""
        echo ""
        echo "but it is expected to be a GUID."
        echo "GUID=='2febb21b-8150-4cfd-a269-7110a0f088e7'"
        echo ""
        SB_NO_ERRORS_YET_LOCAL="f"
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_GUID_CANDIDATE" != "" ]; then
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "$S_GUID_CANDIDATE"
        else
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "156abbe4-d6de-490f-8b69-7110a0f088e7"
        fi
        if [ "$SB_VERIFICATION_FAILED" == "t" ]; then 
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_VARIABLE_NAME_IN_CALLING_CODE" == "" ]; then 
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
            echo ""
            echo "    S_VARIABLE_NAME_IN_CALLING_CODE==\"\""
            echo ""
            echo "GUID=='bd9f692e-0214-4828-b269-7110a0f088e7'"
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_IN" == "" ]; then 
            echo ""
            echo -e "\e[31mThere is a flaw somewhere in the code\e[39m that"
            echo "uses a variable named \"$S_VARIABLE_NAME_IN_CALLING_CODE\"." 
            echo ""
            echo "    $S_VARIABLE_NAME_IN_CALLING_CODE==\"\""
            echo ""
            echo "but it is expected to be something other than an empty string."
            echo "GUID=='c04eb63e-e170-4ff4-a469-7110a0f088e7'"
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "f" ]; then 
        SB_NO_ERRORS_YET="f"
        SB_VERIFICATION_FAILED="t"
    else
        if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
            SB_VERIFICATION_FAILED="f"
        else
            echo ""
            echo -e "\e[31mThe code of this function is flawed.\e[39m The"
            echo "GUID=='9985b55b-5d81-41f7-b169-7110a0f088e7'"
            echo ""
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_assert_nonempty_string_but_do_not_exit_t1

#--------------------------------------------------------------------------
# SB_NO_ERRORS_YET="t" # domain=={"t","f"}, initial declaration resides upwards from this line
func_mmmv_verify_sb_t_f_but_do_not_exit_t2(){
    local SB_VARIABLE_VALUE="$1"
    local S_VARIABLE_NAME_IN_CALLING_CODE="$2"
    local S_GUID_CANDIDATE="$3"
    #----------------------------------------------------------------------
    local SB_NO_ERRORS_YET_LOCAL="t"
    if [ "$S_GUID_CANDIDATE" == "" ]; then 
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
        echo ""
        echo "    S_GUID_CANDIDATE==\"\""
        echo ""
        echo "but it is expected to be a GUID."
        echo "GUID=='39b212ed-6001-4117-9259-7110a0f088e7'"
        echo ""
        SB_NO_ERRORS_YET_LOCAL="f"
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_GUID_CANDIDATE" != "" ]; then
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "$S_GUID_CANDIDATE"
        else
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "3b2d6305-b840-4007-ad69-7110a0f088e7"
        fi
        if [ "$SB_VERIFICATION_FAILED" == "t" ]; then 
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_VARIABLE_NAME_IN_CALLING_CODE" == "" ]; then 
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
            echo ""
            echo "    S_VARIABLE_NAME_IN_CALLING_CODE==\"\""
            echo ""
            echo "GUID=='3925b881-fa08-4cb0-9a59-7110a0f088e7'"
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$SB_VARIABLE_VALUE" != "t" ]; then 
            if [ "$SB_VARIABLE_VALUE" != "f" ]; then 
                echo ""
                echo -e "\e[31mThere is a flaw somewhere in the code\e[39m that"
                echo "uses a variable named \"$S_VARIABLE_NAME_IN_CALLING_CODE\". The " 
                echo ""
                echo "    $S_VARIABLE_NAME_IN_CALLING_CODE==\"$SB_VARIABLE_VALUE\""
                echo ""
                echo "but it is expected to be either \"t\" or \"f\"."
                echo "GUID=='850ec62b-bebd-4feb-a559-7110a0f088e7'"
                if [ "$S_GUID_CANDIDATE" != "" ]; then
                    echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
                fi
                echo ""
                SB_NO_ERRORS_YET_LOCAL="f"
            fi
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "f" ]; then 
        SB_NO_ERRORS_YET="f"
        SB_VERIFICATION_FAILED="t"
    else
        if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
            SB_VERIFICATION_FAILED="f"
        else
            echo ""
            echo -e "\e[31mThe code of this function is flawed.\e[39m The"
            echo "GUID=='89219612-73e6-42af-8459-7110a0f088e7'"
            echo ""
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_sb_t_f_but_do_not_exit_t2

#--------------------------------------------------------------------------
# It's the same as the 
# func_mmmv_verify_sb_t_f_but_do_not_exit_t2
# except that the GUID candidate is optional.
func_mmmv_verify_sb_t_f_but_do_not_exit_t3(){
    local SB_VARIABLE_VALUE="$1"
    local S_VARIABLE_NAME_IN_CALLING_CODE="$2"
    local S_GUID_CANDIDATE_OPTIONAL="$3" # It's OK for it to be an empty string
    #----------------------------------------------------------------------
    local S_GUID_CANDIDATE="$S_GUID_CANDIDATE_OPTIONAL"
    if [ "$S_GUID_CANDIDATE_OPTIONAL" == "" ]; then 
        S_GUID_CANDIDATE="bb0b9042-87ef-4626-8469-7110a0f088e7"
    fi
    func_mmmv_verify_sb_t_f_but_do_not_exit_t2 \
        "$SB_VARIABLE_VALUE" \
        "$S_VARIABLE_NAME_IN_CALLING_CODE" \
        "$S_GUID_CANDIDATE"
} # func_mmmv_verify_sb_t_f_but_do_not_exit_t3

#--------------------------------------------------------------------------

func_mmmv_report_an_error_but_do_not_exit_t1(){
    local S_GUID_CANDIDATE="$1" # first  function argument
    local S_ERR_MSG="$2"        # second function argument
    #----------------------------------------------------------------------
    echo ""
    echo -e "\e[31mThe code of this script is flawed.\e[39m"
    if [ "$S_ERR_MSG" != "" ]; then 
        echo "$S_ERR_MSG"
    fi
    if [ "$S_GUID_CANDIDATE" != "" ]; then 
        echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
    fi
    echo "GUID=='6d71ba5b-37ed-48fe-a359-7110a0f088e7'"
    echo ""
    #----------------------------------------------------------------------
    # exit 1 # must NOT be called in ~/.bashrc, because 
             # exiting from the ~/.bashrc exits the session.
} # func_mmmv_report_an_error_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_report_missing_from_path_and_do_NOT_exit_t1() {
    local S_NAME_OF_THE_EXECUTABLE=$1 # first function argument
    #----------------------------------------------------------------------
    SB_VERIFICATION_FAILED="f"
    local SB_NO_ERRORS_YET_LOCAL="t"
    if [ "$S_NAME_OF_THE_EXECUTABLE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
        echo "The S_NAME_OF_THE_EXECUTABLE must not be an empty string."
        echo "GUID=='8806444a-3c44-40d3-a259-7110a0f088e7'"
        echo ""
        SB_NO_ERRORS_YET_LOCAL="f"
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        local S_TMP_0="\`which $S_NAME_OF_THE_EXECUTABLE 2>/dev/null\`"
        local S_TMP_1=""
        local S_TMP_2="S_TMP_1=$S_TMP_0"
        eval ${S_TMP_2}
        if [ "$S_TMP_1" == "" ] ; then
            echo ""
            echo "This bash script wished to use the "
            echo -e "\e[31m\"$S_NAME_OF_THE_EXECUTABLE\"\e[39m from the PATH, but "
            echo -e "it was\e[31m missing from the PATH. \e[39m"
            echo "GUID=='9e8ab559-7643-4b66-b259-7110a0f088e7'"
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "f" ]; then 
        SB_VERIFICATION_FAILED="t"
    fi
    #----------------------------------------------------------------------
    # exit 1 # must NOT be called in ~/.bashrc, because 
             # exiting from the ~/.bashrc exits the session.
} # func_mmmv_report_missing_from_path_and_do_NOT_exit_t1

#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "ln"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "date"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "printf"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "grep"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "git"

#--------------------------------------------------------------------------

func_mmmv_verify_that_the_file_exists_but_do_not_exit_t1() {  # S_FP, S_GUID_CANDIDATE
    local S_FP="$1"
    local S_GUID_CANDIDATE="$2"
    local SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE="$3" # domain: {"t","f",""}
                                                       # ""==="t", default "t"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
        echo "This function requires 2 parameters: S_FP, S_GUID_CANDIDATE"
        echo "and has an optional 3. parameter: SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE"
        echo "GUID=='12e9b310-b2e4-4ff3-b359-7110a0f088e7'"
        echo ""
        #--------
        SB_VERIFICATION_FAILED="t"
    fi
    #------------------------------
    local SB_DISPLAY_VERIF_FAILURE_MSG="t" # the default
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "" ]; then
            if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" == "f" ]; then
                SB_DISPLAY_VERIF_FAILURE_MSG="f"
            else
                if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "t" ]; then
                    echo ""
                    echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
                    echo ""
                    echo "  SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE==\"$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE\""
                    echo ""
                    echo "Valid values are: \"t\", \"f\", \"\" ."
                    echo "\"\" defaults to \"t\"."
                    echo "GUID=='8d075e31-6feb-4724-9359-7110a0f088e7'"
                    echo ""
                    #--------
                    SB_VERIFICATION_FAILED="t"
                fi
            fi
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ ! -e "$S_FP" ]; then
            if [ -h "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The path "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "points to a broken symlink, but a file or "
                    echo "a symlink to a file is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='e1d0ec25-51ba-4799-8359-7110a0f088e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            else
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The file "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo -e "\e[31mdoes not exist\e[39m."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='06952e20-3a4b-4151-8359-7110a0f088e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        else
            if [ -d "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    if [ -h "$S_FP" ]; then
                        echo "The symlink to the folder "
                    else
                        echo "The folder "
                    fi
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "exists, but a file or a symlink to a file is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='a30a29aa-c01d-4b68-bb59-7110a0f088e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        fi
    fi #  "$SB_VERIFICATION_FAILED" == "f"
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='42925eee-9337-41a6-8559-7110a0f088e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_verify_that_the_file_exists_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1() {  # S_FP, S_GUID_CANDIDATE
    local S_FP="$1"
    local S_GUID_CANDIDATE="$2"
    local SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE="$3" # domain: {"t","f",""}
                                                       # ""==="t", default "t"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
        echo "This function requires 2 parameters: S_FP, S_GUID_CANDIDATE"
        echo "and has an optional 3. parameter: SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE"
        echo "GUID=='367df2c4-0168-4e54-be59-7110a0f088e7'"
        echo ""
        #--------
        SB_VERIFICATION_FAILED="t"
    fi
    #------------------------------
    local SB_DISPLAY_VERIF_FAILURE_MSG="t" # the default
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "" ]; then
            if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" == "f" ]; then
                SB_DISPLAY_VERIF_FAILURE_MSG="f"
            else
                if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "t" ]; then
                    echo ""
                    echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
                    echo ""
                    echo "  SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE==\"$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE\""
                    echo ""
                    echo "Valid values are: \"t\", \"f\", \"\" ."
                    echo "\"\" defaults to \"t\"."
                    echo "GUID=='1b2a344e-c9d9-468a-9559-7110a0f088e7'"
                    echo ""
                    #--------
                    SB_VERIFICATION_FAILED="t"
                fi
            fi
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ ! -e "$S_FP" ]; then
            if [ -h "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The path "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "points to a broken symlink, but a folder "
                    echo "or a symlink to a folder is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='eb829ad5-d9d1-4b0f-8259-7110a0f088e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            else
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The folder "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo -e "\e[31mdoes not exist\e[39m."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='4501d43e-05c7-480b-a159-7110a0f088e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        else
            if [ ! -d "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    if [ -h "$S_FP" ]; then
                        echo "The symlink to an existing file "
                    else
                        echo "The file "
                    fi
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "exists, but a folder is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='b1096322-59a1-40ff-b549-7110a0f088e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        fi
    fi #  "$SB_VERIFICATION_FAILED" == "f"
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='efb0515b-a8b1-4298-8249-7110a0f088e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_add_bin_2_Z_PATH_and_optionally_share_man_2_MANPATH_t1(){
    local S_FP_INSTALLATION_FOLDER="$1" # is 
                      # the folder with the $S_FP_INSTALLATION_FOLDER/bin 
                      # and optionally  the $S_FP_INSTALLATION_FOLDER/share/man
    local S_GUID_CANDIDATE="$2"
    local SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY="$3" # domain: {"t","f",""} 
                                                    # default: "" -> "f"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$S_GUID_CANDIDATE" == "" ]; then
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
            echo ""
            echo "    S_GUID_CANDIDATE==\"\""
            echo ""
            echo "GUID=='2bd69544-ace5-408b-9449-7110a0f088e7'"
            echo ""
            #--------
            SB_VERIFICATION_FAILED="t"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$S_FP_INSTALLATION_FOLDER" == "" ]; then
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
            echo ""
            echo "    S_FP_INSTALLATION_FOLDER==\"\""
            echo ""
            echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            echo "GUID=='dc90b259-ad75-4af7-9349-7110a0f088e7'"
            echo ""
            #--------
            SB_VERIFICATION_FAILED="t"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" == "" ]; then
            SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY="f" # the default value
        else
            func_mmmv_verify_sb_t_f_but_do_not_exit_t3 \
                "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "$S_GUID_CANDIDATE"
        fi
    fi
    #------------------------------
    local SB_MAN_FOLDER_OR_NONBROKEN_SYMLINK_TO_IT_EXISTS="f"
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
            "$S_FP_INSTALLATION_FOLDER" "53c19f7b-44ab-4e95-9469-7110a0f088e7"
        if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
            #--------------
            func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
                "$S_FP_INSTALLATION_FOLDER/bin" "a17e142b-8124-4195-8269-7110a0f088e7"
            if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
                Z_PATH="$S_FP_INSTALLATION_FOLDER/bin:$Z_PATH"
            fi
            #--------------
            if [ -e "$S_FP_INSTALLATION_FOLDER/share/man" ]; then
                if [ -d "$S_FP_INSTALLATION_FOLDER/share/man" ]; then
                    SB_MAN_FOLDER_OR_NONBROKEN_SYMLINK_TO_IT_EXISTS="t"
                fi
            fi
            if [ "$SB_MAN_FOLDER_OR_NONBROKEN_SYMLINK_TO_IT_EXISTS" == "f" ]; then
                if [ "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" == "t" ]; then
                    # The next 2 lines are for displaying an error message.
                    func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
                        "$S_FP_INSTALLATION_FOLDER/share/man" "a2828362-b9ee-4e35-a269-7110a0f088e7"
                fi
            else
                MANPATH="$S_FP_INSTALLATION_FOLDER/share/man:$MANPATH"
            fi
            #--------------
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='f231313c-0633-449f-b449-7110a0f088e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_add_bin_2_Z_PATH_and_optionally_share_man_2_MANPATH_t1

#--------------------------------------------------------------------------

func_mmmv_add_lib_2_LD_LIBRARY_PATH_and_include_2_CPATH_t1(){
    local S_FP_INSTALLATION_FOLDER="$1" # is 
                      # the folder with the $S_FP_INSTALLATION_FOLDER/lib
                      # and                 $S_FP_INSTALLATION_FOLDER/include
                      # and optionally  the $S_FP_INSTALLATION_FOLDER/share/man
                      # and optionally  the $S_FP_INSTALLATION_FOLDER/bin
    local S_GUID_CANDIDATE="$2"
    local SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY="$3" # domain: {"t","f",""} 
                                                    # default: "" -> "f"
    local SB_BIN_FOLDER_EXISTENCE_IS_MANDATORY="$3" # domain: {"t","f",""} 
                                                    # default: "" -> "f"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$S_GUID_CANDIDATE" == "" ]; then
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
            echo ""
            echo "    S_GUID_CANDIDATE==\"\""
            echo ""
            echo "GUID=='5f455b04-6d8d-4e63-be49-7110a0f088e7'"
            echo ""
            #--------
            SB_VERIFICATION_FAILED="t"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$S_FP_INSTALLATION_FOLDER" == "" ]; then
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
            echo ""
            echo "    S_FP_INSTALLATION_FOLDER==\"\""
            echo ""
            echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            echo "GUID=='596535f2-896d-4403-8449-7110a0f088e7'"
            echo ""
            #--------
            SB_VERIFICATION_FAILED="t"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" == "" ]; then
            SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY="f" # the default value
        else
            func_mmmv_verify_sb_t_f_but_do_not_exit_t3 \
                "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "$S_GUID_CANDIDATE"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_BIN_FOLDER_EXISTENCE_IS_MANDATORY" == "" ]; then
            SB_BIN_FOLDER_EXISTENCE_IS_MANDATORY="f" # the default value
        else
            func_mmmv_verify_sb_t_f_but_do_not_exit_t3 \
                "$SB_BIN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "SB_BIN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "$S_GUID_CANDIDATE"
        fi
    fi
    #------------------------------
    local SB_TEST_MAN_FOLDER_EXISTENCE="f"
    local SB_TEST_BIN_FOLDER_EXISTENCE="f"
    local S_FP_0="/tmp/not_yet_set"
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        S_FP_0="$S_FP_INSTALLATION_FOLDER/lib"
        func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
            "$S_FP_0" "4ca2f433-0fe4-4438-b169-7110a0f088e7"
        if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
                export LD_LIBRARY_PATH="$S_FP_0:$LD_LIBRARY_PATH"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        S_FP_0="$S_FP_INSTALLATION_FOLDER/include"
        func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
            "$S_FP_0" "5e5fa64f-df0c-4547-9169-7110a0f088e7"
        if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
                export CPATH="$S_FP_0:$CPATH"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        S_FP_0="$S_FP_INSTALLATION_FOLDER/share/man"
        if [ "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" == "t" ]; then
            SB_TEST_MAN_FOLDER_EXISTENCE="t"
        fi
        if [ -e "$S_FP_0" ]; then
            SB_TEST_MAN_FOLDER_EXISTENCE="t"
        fi
        if [ "$SB_TEST_MAN_FOLDER_EXISTENCE" == "t" ]; then
            func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
                "$S_FP_0" "d35f05df-5f19-44dd-b569-7110a0f088e7"
            if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
                    export MANPATH="$S_FP_0:$MANPATH"
            fi
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        S_FP_0="$S_FP_INSTALLATION_FOLDER/bin"
        if [ "$SB_BIN_FOLDER_EXISTENCE_IS_MANDATORY" == "t" ]; then
            SB_TEST_BIN_FOLDER_EXISTENCE="t"
        fi
        if [ -e "$S_FP_0" ]; then
            SB_TEST_BIN_FOLDER_EXISTENCE="t"
        fi
        if [ "$SB_TEST_BIN_FOLDER_EXISTENCE" == "t" ]; then
            func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
                "$S_FP_0" "7af29e2d-f5a9-4bab-9659-7110a0f088e7"
            if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
                    export Z_PATH="$S_FP_0:$Z_PATH"
            fi
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='dbcd1823-d9e2-40c3-b149-7110a0f088e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_add_lib_2_LD_LIBRARY_PATH_and_include_2_CPATH_t1

#==========================================================================
# S_VERSION_OF_THIS_FILE="b1640d4c-d034-458b-b359-7110a0f088e7"
#==========================================================================
