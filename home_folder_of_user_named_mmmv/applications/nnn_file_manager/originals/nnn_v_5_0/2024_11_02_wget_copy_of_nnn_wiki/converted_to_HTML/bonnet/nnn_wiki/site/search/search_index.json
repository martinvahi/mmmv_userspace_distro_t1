{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Advanced-use-cases/","text":"File icons nnn supports multiple ways to show icons. They are turned off by default and are not provided in the default distribution to avoid shipping third party resources. Currently supported icon sets are: Unicode Emojis Nerdfont Icons Icons-in-terminal Icons can be customized in icons.h . You will need to recompile nnn rather than use the default release. Or you can grab one of the icon-enabled static binaries auto-generated at each release. Arch Linux users can check out the AUR packages nnn-icons and nnn-nerd . Note that your $TERM must support 256 colors for the icons to show. The 8-color option -C also disables icons. To enable Unicode Emoji icons Use a font and terminal that supports unicode emojies. Clone the nnn repo Compile nnn with make O_EMOJI=1 To enable Nerdfont icons Download and install a patched Nerdfont ( v3.0.0 or later). Apply that font as your terminal emulator's font. This will vary from emulator to emulator, but usually involves editing a config file or changing a setting within a GUI menu system. Clone the nnn repo Compile nnn with make O_NERD=1 To enable icons-in-terminal icons Install icons-in-terminal Clone the nnn repo Compile nnn with make O_ICONS=1 Move the newly compiled nnn to where your programs normally go Once compiled, you'll notice an nnn executable is now in your root. Copy this file to wherever such programs are normally stored. A good way to check is to do a which nnn on where the packaged release was installed. Simply replacing that file should be enough. Custom keybinds The keybinds are defined in the bindings structure in nnn.h . Users can modify these to set their preferred shortcuts. After modifying, nnn needs to be compiled ( instructions ). While it's easy to compile because of few library dependencies, customizing shortcuts can be tricky because of the number of features. To make the process simpler, nnn has an option to detect key collisions. After changing the keys, compile nnn and run: nnn -K Note: There's one alternative keybind with the CONTROL ( ^ ) modifier for many operations. Those are for users who prefer to run nnn in the type-to-nav mode. Colemak keybinds To use colemak based keybinds, build nnn with O_COLEMAK=1 . There are also other variant of colemak patches which are not maintained by the nnn devs: tiosgz-colemak colemak-dh CLI-only opener If you have a custom opener (like nuke ) that invokes only CLI utilities, you can indicate the same to nnn : export NNN_OPENER=/absolute/path/to/nuke # Otherwise, if nuke is in $PATH # export NNN_OPENER=nuke nnn -c Desktop integration To make nnn available in a XDG compatible desktop environment like GNOME, KDE, XFCE, etc. a nnn.desktop file is provided. To install it, run: make install-desktop Or copy nnn.desktop to ~/.local/share/applications/ . This will show a nnn entry in your desktop's application menu, search, in graphical applications' Open with menu, etc. Note that when started from a display manager (GDM, ...) the desktop environment might start nnn in a terminal without calling any login shell. So if NNN_* variables are exported in e.g. .bashrc , .zshrc , .bash_profile , and not in .profile or .xprofile it might never be sourced, and thus never be available to nnn . Keep your variable exports in .bashrc If you want to keep your variable exports in .bashrc and your display manager never sources it, you can change the Exec= line in nnn.desktop like so: Exec=bash -lc \"nnn %f\" Use a wrapper script to export variables Or you can also call nnn in a wrapper script with necessary exports, example: #!/bin/sh # If you use pywal, you need to restore the scheme here # (cat ~/.cache/wal/sequences &) export NNN_BMS=\"D:$HOME/Downloads;v:$HOME/Videos\" export NNN_COLORS=\"5236\" alias nsel=\"cat ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection | tr '\\0' '\\n'\" # To use a CLI opener, specify the `-c` option to `nnn` # export NNN_OPENER=\"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins/nuke\" # Unmask ^Q (if required, see `stty -a`) to Quit nnn stty start undef stty stop undef # Start nnn with your preferred options nnn \"$@\" Call it, e.g., nwrap , make it executable with chmod +x nwrap and drop it in your PATH . Deeper GNOME integration You can edit nnn.desktop to integrate more deeply with some GNOME features: [Desktop Entry] Name=NNN for gnome GenericName=NNN Comment=Supercute cli Keywords=shell;prompt;command;commandline;cmd;nnn; Exec=gnome-terminal --class \"NNN\" -- bash -ilc \"nnn %f\" Icon=org.gnome.Terminal Type=Application Categories=GNOME;GTK;System;TerminalEmulator; StartupNotify=true X-GNOME-SingleWindow=false OnlyShowIn=GNOME;Unity; StartupWMClass=NNN --class \"NNN\" is used to group all nnn instances together and StartupWMClass=NNN to tell launcher which windows should be associated with this icon. Browser Integration To use nnn as the file picker dialog for your browser follow the instructions for your browser of choice. Chromium Create a script kdialog in your PATH along the lines of: #!/bin/sh while :; do case $1 in --getsavefilename) file=\"$2\" break ;; --version) printf \"\"; exit ;; --*) shift ;; *) break ;; esac done file=\"${file##/*/}\" st -c picker sh -c \"nnn -J -p - '$file' | awk '{ print system(\\\"[ -d '\\''\\\"\\$0\\\"'\\'' ]\\\") ? \\$0 : \\$0\\\"/$file\\\" }' > /proc/$$/fd/1\" This example sets the class for st to picker and nnn uses a named session picker . This allows you to for example have the picker window float by default in your window manager and nnn remembers where your previous \"Save as...\" target was. The -J option makes sure that the saved session saves the cursor position on the selected file/directory. Replace with your preferred terminal and nnn options if applicable. Then create a browser wrapper that launches your browser with XDG_CURRENT_DESKTOP=KDE : #!/bin/sh XDG_CURRENT_DESKTOP=KDE <browser binary> \"$@\" This will cause chromium to look for kdialog to open files, make sure the kdialog script comes in your PATH before the kdialog package binary if you have this installed. Chromium will now open nnn in picker mode for \"Save as/Upload file\" operations, allowing you to: * Select a directory( Space ) and quit( q ) to save the file with its given name in the target directory. * Create a new file( n ) and select it( Enter ) to save the file with a different name. To restore xdg-open functionality inside chromium, you will need a xdg-open wrapper that restores XDG_CURRENT_DESKTOP to the correct value for your environment: #!/bin/sh XDG_CURRENT_DESKTOP='' /usr/bin/xdg-open \"$@\" Firefox Install xdg-desktop-portal-termfilechooser and create its config file in $XDG_CONFIG_HOME/xdg-desktop-portal-termfilechooser/config : [filechooser] cmd=/home/<user>/.local/bin/ffnnn Create the specified wrapper script ffnnn (name and location does not matter) in your PATH along the lines of: #!/bin/sh save=\"$3\" suggest=\"$4\" out=\"$5\" file=\"${suggest##/*/}\" if [ \"$save\" = 1 ]; then touch \"$suggest\" fi st -c picker sh -c \"nnn -p - '$suggest' | awk '{ print system(\\\"[ -d '\\''\\\"\\$0\\\"'\\'' ]\\\") ? \\$0 : \\$0\\\"/$file\\\" }' > '$out'\" if [ \"$save\" = 1 ]; then if [ ! -s \"$out\" ] || [ ! -s \"$suggest\" ]; then rm \"$suggest\" fi fi Then make sure widget.use-xdg-desktop-portal.file-picker == 1 in about:config and firefox should use nnn as file picker dialog. Launch nnn with a keyboard shortcut On a Desktop Environment (KDE, GNOME, XFCE) XDG application method If your DE supports setting keybindings to applications, just install nnn.desktop , as explained above . Then set a keybind from you DE's settings. Wrapper script method You might want to create a wrapper script to launch nnn in a terminal, example with xfce4-terminal : #!/bin/sh xfce4-terminal -e \"nnn \\\"$*\\\"\" Name it, e.g. , nnnfm , make it executable, and drop it in your PATH . You can now set a keybind to launch nnnfm from your DE settings. Set as default file manager in XFCE Now go to the preferred applications menu from Settings (or run exo-preferred-applications -c ) and select nnnfm as your default file manager. On a bare X window manager ( i3wm , bspwm , awesomewm ...) On the keyboard shortcuts section of your WM config file, you need to add a shortcut to launch nnn in a terminal. Here's is an example for sxhkd , you need to change xfce4-terminal to the terminal you want to use: ## File Manager super + n xfce4-terminal -e \"nwrap $*\" cp mv progress This section is Linux-specific. BSD and macOS users can press ^T to check the progress. advcpmv is used to show cp and mv progress on Linux. To enable the feature, copy the avdcpmv-patched binaries in your PATH. Note that it's important to rename the binaries as cpg and mvg . sudo cp src/cp /usr/local/bin/cpg sudo cp src/mv /usr/local/bin/mvg Use the program option -r to show the progress of the operations. Control active dir You can control nnn 's active directory from a plugin. Find the instructions here . Termux tips General It may be a good idea to let the default opener ( xdg-open ) handle non-text files. Set $VISUAL / $EDITOR to your preferred CLI editor and use the program option -e . The program option -R disables rollover at edges (useful on smaller form factors). Also see the mouse click options for simplified navigation and and usability with touch. Enable file icons Follow the instructions for desktop Copy the file ~/.local/share/icons-in-terminal/icons-in-terminal.ttf to Termux environment ~/.termux/font.ttf Run termux-reload-settings (or use the Termux:Styling app which is a GUI for that functionality) Copy to clipboard Install the Termux:API app from Google Play On Android 7 you have to \"protect\" Termux:API by going into the settings / protected apps menu otherwise calls to the API like termux-battery-status will hang forever Install the termux-api package pkg in termux-api - Edit (for Termux) and save the copier script . - Make the script executable: chmod +x /path/to/copier - export NNN_COPIER : export NNN_COPIER=\"/path/to/copier\" Access internal and external storage Official instructions . Pager as opener Disclaimer: This is severe abuse of your pager, but it makes your life richer. It would be convenient to have your pager choose how to view non-text files. You could make your own customized pager handler or you could start by downloading: $ curl -OL https://github.com/0xACE/lesspipe/raw/personal/lesspipe.sh or git clone https://github.com/0xACE/lesspipe and then make sure you switch to the personal branch where some updates has been made. and then have the file on some path, say: ~/git/lesspipe/lesspipe.sh And then add: export PAGER=less [ -r \"$HOME/git/lesspipe/lesspipe.sh\" ] && export LESSOPEN=\"| $HOME/git/lesspipe/lesspipe.sh %s\" export LESS='-Ri ' To your ~/.bashrc or your shell rc. This will now allow you to view files in nnn by hitting the Open in PAGER key p . This will then open your file piped through lesspipe.sh which has piped the file to other interpreters. Note that you might want to install the following packages: antiword - support for word file cabextract - support for cab files cdrkit (cdrtools) - support for iso files fastjar - support for jar files html2text (python-html2text, python2-html2text) - support for html files mediainfo - support for some metadata for media files viu - support for some image file imagemagick - support for some image file p7zip - support for 7za files perl rpmextract - support for rpm files unrar - support for rar files unrtf - support for rtf file unzip - support for zip files source-highlight - support syntax highlighting In the future that lesspipe.sh link might change to using atool rather than these separate archive handlers. Working with lftp Broadly speaking, any terminal utility can be integrated with nnn easily. For remote file transfers, lftp is the preferred tool. Let's discuss how the workflow can be simplified with nnn 's capabilities and lftp combined together. Automation using an lftp script Use the open with key and type lftp -f to connect and transfer files to/from a remote system using a lftp script file. Note that you need to press c at the press 'c' for cli mode prompt. Sample file: # lftp script_file to transfer files to/from a server # server has sshd service running and support scp # open connection open -u user,password -p port sftp://server_ip_address # list files on server ls # create a directory mkdir uploads # upload some files to the directory uploads put -O uploads file1 file2 # download some files to the current directory pget -O downloads file3 file4 Connect to server and and copy selection manually We will use a generic lftp setup example using lftp aliases which you can follow to connect to a SSH server and transfer your nnn selection to it. Create an alias for this server in ~/.lftprc : alias mob open -u username,password sftp://server_ip_address:port Create aliases in ~/.lftprc to transfer files: # get nnn selection and write the put command in a file alias lst \"!cat ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection | xargs -0 -I fname echo \"put\" \\'fname\\' > files.lftp\" # upload the files to the directory uploads alias mv \"source files.lftp; !rm files.lftp\" Use the command prompt key and type lftp to connect to this server. Use the aliases to get the selection list and transfer the files. Sample operation: lftp :~> mob lftp :~> lst lftp :~> mv lftp :~> bye More help at lftp prompt list of supported commands: lftp :~> ? help on a particular command: lftp :~> help put","title":"Advanced use cases"},{"location":"Advanced-use-cases/#file-icons","text":"nnn supports multiple ways to show icons. They are turned off by default and are not provided in the default distribution to avoid shipping third party resources. Currently supported icon sets are: Unicode Emojis Nerdfont Icons Icons-in-terminal Icons can be customized in icons.h . You will need to recompile nnn rather than use the default release. Or you can grab one of the icon-enabled static binaries auto-generated at each release. Arch Linux users can check out the AUR packages nnn-icons and nnn-nerd . Note that your $TERM must support 256 colors for the icons to show. The 8-color option -C also disables icons.","title":"File icons"},{"location":"Advanced-use-cases/#to-enable-unicode-emoji-icons","text":"Use a font and terminal that supports unicode emojies. Clone the nnn repo Compile nnn with make O_EMOJI=1","title":"To enable Unicode Emoji icons"},{"location":"Advanced-use-cases/#to-enable-nerdfont-icons","text":"Download and install a patched Nerdfont ( v3.0.0 or later). Apply that font as your terminal emulator's font. This will vary from emulator to emulator, but usually involves editing a config file or changing a setting within a GUI menu system. Clone the nnn repo Compile nnn with make O_NERD=1","title":"To enable Nerdfont icons"},{"location":"Advanced-use-cases/#to-enable-icons-in-terminal-icons","text":"Install icons-in-terminal Clone the nnn repo Compile nnn with make O_ICONS=1","title":"To enable icons-in-terminal icons"},{"location":"Advanced-use-cases/#move-the-newly-compiled-nnn-to-where-your-programs-normally-go","text":"Once compiled, you'll notice an nnn executable is now in your root. Copy this file to wherever such programs are normally stored. A good way to check is to do a which nnn on where the packaged release was installed. Simply replacing that file should be enough.","title":"Move the newly compiled nnn to where your programs normally go"},{"location":"Advanced-use-cases/#custom-keybinds","text":"The keybinds are defined in the bindings structure in nnn.h . Users can modify these to set their preferred shortcuts. After modifying, nnn needs to be compiled ( instructions ). While it's easy to compile because of few library dependencies, customizing shortcuts can be tricky because of the number of features. To make the process simpler, nnn has an option to detect key collisions. After changing the keys, compile nnn and run: nnn -K Note: There's one alternative keybind with the CONTROL ( ^ ) modifier for many operations. Those are for users who prefer to run nnn in the type-to-nav mode.","title":"Custom keybinds"},{"location":"Advanced-use-cases/#colemak-keybinds","text":"To use colemak based keybinds, build nnn with O_COLEMAK=1 . There are also other variant of colemak patches which are not maintained by the nnn devs: tiosgz-colemak colemak-dh","title":"Colemak keybinds"},{"location":"Advanced-use-cases/#cli-only-opener","text":"If you have a custom opener (like nuke ) that invokes only CLI utilities, you can indicate the same to nnn : export NNN_OPENER=/absolute/path/to/nuke # Otherwise, if nuke is in $PATH # export NNN_OPENER=nuke nnn -c","title":"CLI-only opener"},{"location":"Advanced-use-cases/#desktop-integration","text":"To make nnn available in a XDG compatible desktop environment like GNOME, KDE, XFCE, etc. a nnn.desktop file is provided. To install it, run: make install-desktop Or copy nnn.desktop to ~/.local/share/applications/ . This will show a nnn entry in your desktop's application menu, search, in graphical applications' Open with menu, etc. Note that when started from a display manager (GDM, ...) the desktop environment might start nnn in a terminal without calling any login shell. So if NNN_* variables are exported in e.g. .bashrc , .zshrc , .bash_profile , and not in .profile or .xprofile it might never be sourced, and thus never be available to nnn .","title":"Desktop integration"},{"location":"Advanced-use-cases/#keep-your-variable-exports-in-bashrc","text":"If you want to keep your variable exports in .bashrc and your display manager never sources it, you can change the Exec= line in nnn.desktop like so: Exec=bash -lc \"nnn %f\"","title":"Keep your variable exports in .bashrc"},{"location":"Advanced-use-cases/#use-a-wrapper-script-to-export-variables","text":"Or you can also call nnn in a wrapper script with necessary exports, example: #!/bin/sh # If you use pywal, you need to restore the scheme here # (cat ~/.cache/wal/sequences &) export NNN_BMS=\"D:$HOME/Downloads;v:$HOME/Videos\" export NNN_COLORS=\"5236\" alias nsel=\"cat ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection | tr '\\0' '\\n'\" # To use a CLI opener, specify the `-c` option to `nnn` # export NNN_OPENER=\"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins/nuke\" # Unmask ^Q (if required, see `stty -a`) to Quit nnn stty start undef stty stop undef # Start nnn with your preferred options nnn \"$@\" Call it, e.g., nwrap , make it executable with chmod +x nwrap and drop it in your PATH .","title":"Use a wrapper script to export variables"},{"location":"Advanced-use-cases/#deeper-gnome-integration","text":"You can edit nnn.desktop to integrate more deeply with some GNOME features: [Desktop Entry] Name=NNN for gnome GenericName=NNN Comment=Supercute cli Keywords=shell;prompt;command;commandline;cmd;nnn; Exec=gnome-terminal --class \"NNN\" -- bash -ilc \"nnn %f\" Icon=org.gnome.Terminal Type=Application Categories=GNOME;GTK;System;TerminalEmulator; StartupNotify=true X-GNOME-SingleWindow=false OnlyShowIn=GNOME;Unity; StartupWMClass=NNN --class \"NNN\" is used to group all nnn instances together and StartupWMClass=NNN to tell launcher which windows should be associated with this icon.","title":"Deeper GNOME integration"},{"location":"Advanced-use-cases/#browser-integration","text":"To use nnn as the file picker dialog for your browser follow the instructions for your browser of choice.","title":"Browser Integration"},{"location":"Advanced-use-cases/#chromium","text":"Create a script kdialog in your PATH along the lines of: #!/bin/sh while :; do case $1 in --getsavefilename) file=\"$2\" break ;; --version) printf \"\"; exit ;; --*) shift ;; *) break ;; esac done file=\"${file##/*/}\" st -c picker sh -c \"nnn -J -p - '$file' | awk '{ print system(\\\"[ -d '\\''\\\"\\$0\\\"'\\'' ]\\\") ? \\$0 : \\$0\\\"/$file\\\" }' > /proc/$$/fd/1\" This example sets the class for st to picker and nnn uses a named session picker . This allows you to for example have the picker window float by default in your window manager and nnn remembers where your previous \"Save as...\" target was. The -J option makes sure that the saved session saves the cursor position on the selected file/directory. Replace with your preferred terminal and nnn options if applicable. Then create a browser wrapper that launches your browser with XDG_CURRENT_DESKTOP=KDE : #!/bin/sh XDG_CURRENT_DESKTOP=KDE <browser binary> \"$@\" This will cause chromium to look for kdialog to open files, make sure the kdialog script comes in your PATH before the kdialog package binary if you have this installed. Chromium will now open nnn in picker mode for \"Save as/Upload file\" operations, allowing you to: * Select a directory( Space ) and quit( q ) to save the file with its given name in the target directory. * Create a new file( n ) and select it( Enter ) to save the file with a different name. To restore xdg-open functionality inside chromium, you will need a xdg-open wrapper that restores XDG_CURRENT_DESKTOP to the correct value for your environment: #!/bin/sh XDG_CURRENT_DESKTOP='' /usr/bin/xdg-open \"$@\"","title":"Chromium"},{"location":"Advanced-use-cases/#firefox","text":"Install xdg-desktop-portal-termfilechooser and create its config file in $XDG_CONFIG_HOME/xdg-desktop-portal-termfilechooser/config : [filechooser] cmd=/home/<user>/.local/bin/ffnnn Create the specified wrapper script ffnnn (name and location does not matter) in your PATH along the lines of: #!/bin/sh save=\"$3\" suggest=\"$4\" out=\"$5\" file=\"${suggest##/*/}\" if [ \"$save\" = 1 ]; then touch \"$suggest\" fi st -c picker sh -c \"nnn -p - '$suggest' | awk '{ print system(\\\"[ -d '\\''\\\"\\$0\\\"'\\'' ]\\\") ? \\$0 : \\$0\\\"/$file\\\" }' > '$out'\" if [ \"$save\" = 1 ]; then if [ ! -s \"$out\" ] || [ ! -s \"$suggest\" ]; then rm \"$suggest\" fi fi Then make sure widget.use-xdg-desktop-portal.file-picker == 1 in about:config and firefox should use nnn as file picker dialog.","title":"Firefox"},{"location":"Advanced-use-cases/#launch-nnn-with-a-keyboard-shortcut","text":"","title":"Launch nnn with a keyboard shortcut"},{"location":"Advanced-use-cases/#on-a-desktop-environment-kde-gnome-xfce","text":"","title":"On a Desktop Environment (KDE, GNOME, XFCE)"},{"location":"Advanced-use-cases/#xdg-application-method","text":"If your DE supports setting keybindings to applications, just install nnn.desktop , as explained above . Then set a keybind from you DE's settings.","title":"XDG application method"},{"location":"Advanced-use-cases/#wrapper-script-method","text":"You might want to create a wrapper script to launch nnn in a terminal, example with xfce4-terminal : #!/bin/sh xfce4-terminal -e \"nnn \\\"$*\\\"\" Name it, e.g. , nnnfm , make it executable, and drop it in your PATH . You can now set a keybind to launch nnnfm from your DE settings.","title":"Wrapper script method"},{"location":"Advanced-use-cases/#set-as-default-file-manager-in-xfce","text":"Now go to the preferred applications menu from Settings (or run exo-preferred-applications -c ) and select nnnfm as your default file manager.","title":"Set as default file manager in XFCE"},{"location":"Advanced-use-cases/#on-a-bare-x-window-manager-i3wm-bspwm-awesomewm","text":"On the keyboard shortcuts section of your WM config file, you need to add a shortcut to launch nnn in a terminal. Here's is an example for sxhkd , you need to change xfce4-terminal to the terminal you want to use: ## File Manager super + n xfce4-terminal -e \"nwrap $*\"","title":"On a bare X window manager (i3wm, bspwm, awesomewm ...)"},{"location":"Advanced-use-cases/#cp-mv-progress","text":"This section is Linux-specific. BSD and macOS users can press ^T to check the progress. advcpmv is used to show cp and mv progress on Linux. To enable the feature, copy the avdcpmv-patched binaries in your PATH. Note that it's important to rename the binaries as cpg and mvg . sudo cp src/cp /usr/local/bin/cpg sudo cp src/mv /usr/local/bin/mvg Use the program option -r to show the progress of the operations.","title":"cp mv progress"},{"location":"Advanced-use-cases/#control-active-dir","text":"You can control nnn 's active directory from a plugin. Find the instructions here .","title":"Control active dir"},{"location":"Advanced-use-cases/#termux-tips","text":"","title":"Termux tips"},{"location":"Advanced-use-cases/#general","text":"It may be a good idea to let the default opener ( xdg-open ) handle non-text files. Set $VISUAL / $EDITOR to your preferred CLI editor and use the program option -e . The program option -R disables rollover at edges (useful on smaller form factors). Also see the mouse click options for simplified navigation and and usability with touch.","title":"General"},{"location":"Advanced-use-cases/#enable-file-icons","text":"Follow the instructions for desktop Copy the file ~/.local/share/icons-in-terminal/icons-in-terminal.ttf to Termux environment ~/.termux/font.ttf Run termux-reload-settings (or use the Termux:Styling app which is a GUI for that functionality)","title":"Enable file icons"},{"location":"Advanced-use-cases/#copy-to-clipboard","text":"Install the Termux:API app from Google Play On Android 7 you have to \"protect\" Termux:API by going into the settings / protected apps menu otherwise calls to the API like termux-battery-status will hang forever Install the termux-api package pkg in termux-api - Edit (for Termux) and save the copier script . - Make the script executable: chmod +x /path/to/copier - export NNN_COPIER : export NNN_COPIER=\"/path/to/copier\"","title":"Copy to clipboard"},{"location":"Advanced-use-cases/#access-internal-and-external-storage","text":"Official instructions .","title":"Access internal and external storage"},{"location":"Advanced-use-cases/#pager-as-opener","text":"Disclaimer: This is severe abuse of your pager, but it makes your life richer. It would be convenient to have your pager choose how to view non-text files. You could make your own customized pager handler or you could start by downloading: $ curl -OL https://github.com/0xACE/lesspipe/raw/personal/lesspipe.sh or git clone https://github.com/0xACE/lesspipe and then make sure you switch to the personal branch where some updates has been made. and then have the file on some path, say: ~/git/lesspipe/lesspipe.sh And then add: export PAGER=less [ -r \"$HOME/git/lesspipe/lesspipe.sh\" ] && export LESSOPEN=\"| $HOME/git/lesspipe/lesspipe.sh %s\" export LESS='-Ri ' To your ~/.bashrc or your shell rc. This will now allow you to view files in nnn by hitting the Open in PAGER key p . This will then open your file piped through lesspipe.sh which has piped the file to other interpreters. Note that you might want to install the following packages: antiword - support for word file cabextract - support for cab files cdrkit (cdrtools) - support for iso files fastjar - support for jar files html2text (python-html2text, python2-html2text) - support for html files mediainfo - support for some metadata for media files viu - support for some image file imagemagick - support for some image file p7zip - support for 7za files perl rpmextract - support for rpm files unrar - support for rar files unrtf - support for rtf file unzip - support for zip files source-highlight - support syntax highlighting In the future that lesspipe.sh link might change to using atool rather than these separate archive handlers.","title":"Pager as opener"},{"location":"Advanced-use-cases/#working-with-lftp","text":"Broadly speaking, any terminal utility can be integrated with nnn easily. For remote file transfers, lftp is the preferred tool. Let's discuss how the workflow can be simplified with nnn 's capabilities and lftp combined together.","title":"Working with lftp"},{"location":"Advanced-use-cases/#automation-using-an-lftp-script","text":"Use the open with key and type lftp -f to connect and transfer files to/from a remote system using a lftp script file. Note that you need to press c at the press 'c' for cli mode prompt. Sample file: # lftp script_file to transfer files to/from a server # server has sshd service running and support scp # open connection open -u user,password -p port sftp://server_ip_address # list files on server ls # create a directory mkdir uploads # upload some files to the directory uploads put -O uploads file1 file2 # download some files to the current directory pget -O downloads file3 file4","title":"Automation using an lftp script"},{"location":"Advanced-use-cases/#connect-to-server-and-and-copy-selection-manually","text":"We will use a generic lftp setup example using lftp aliases which you can follow to connect to a SSH server and transfer your nnn selection to it. Create an alias for this server in ~/.lftprc : alias mob open -u username,password sftp://server_ip_address:port Create aliases in ~/.lftprc to transfer files: # get nnn selection and write the put command in a file alias lst \"!cat ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection | xargs -0 -I fname echo \"put\" \\'fname\\' > files.lftp\" # upload the files to the directory uploads alias mv \"source files.lftp; !rm files.lftp\" Use the command prompt key and type lftp to connect to this server. Use the aliases to get the selection list and transfer the files. Sample operation: lftp :~> mob lftp :~> lst lftp :~> mv lftp :~> bye","title":"Connect to server and and copy selection manually"},{"location":"Advanced-use-cases/#more-help-at-lftp-prompt","text":"list of supported commands: lftp :~> ? help on a particular command: lftp :~> help put","title":"More help at lftp prompt"},{"location":"Basic-use-cases/","text":"The nnn magic! nnn unfolds on use. Some exquisite stuff you can do: [x] Instantly load, sort, filter thousands of files [x] Filter and type to navigate with automatic matching dir entry [x] List input stream and pick entries to stdout or file as list [x] Write a plugin in any language and talk to nnn [x] find / fd / grep / ripgrep / fzf from nnn and list in nnn [x] Never lose context - start where you quit [x] Mount any cloud storage service in a few keypresses [x] Select files from anywhere (not just a single dir) [x] Unlimited bookmarks, plugins, cmds with custom hotkeys [x] Edit and preview markdown, man page, HTML [x] Open a file and auto-advance to the next [x] Filter filtered entries, export list of visible files [x] Configure the middle mouse click to do anything [x] Multi-location (or subtree) fuzzy search and visit a file [x] Load four dirs with custom settings at once [x] Notifications on cp , mv , rm completion [x] Auto-sync selection to system clipboard [x] Access selection from another instance of nnn [x] Open text files detached in another pane/tab/window [x] Mount and modify archives [x] Create files/dirs/duplicates with parents (like mkdir -p ) [x] Toggle hidden with . , visit $HOME with ~ , last dir with - [x] Mark a frequently visited dir at runtime [x] Sort by modification, access and inode change time [x] Compile out/in features with make variables [x] Watch matrix text fly or read fortune messages [x] Configure in 5 minutes! Add bookmarks There are 2 ways (can be used together) to manage bookmarks. Environment variable NNN_BMS Set environment variable NNN_BMS as a string of key_char:location pairs separated by semicolons ( ; ): export NNN_BMS=\"d:$HOME/Documents;u:/home/user/Cam Uploads;D:$HOME/Downloads/\" The bookmarks are listed in the help and config screen (key ? ). The select bookmark key b lists all the bookmark keys set in NNN_BMS in the bookmarks prompt. Symlinked bookmarks A symlinked bookmark to the current directory can be created with the B key (or manually under ~/.config/nnn/bookmarks ). Pressing Enter at the bookmarks prompt takes to this directory. If NNN_BMS is not set, the select bookmark key directly opens it. Press - to return to the original directory right after entering a symlinked bookmark. Mark directory To jump back and forth a specific directory during a session, you can mark the directory (key , ). Visit it anytime using the Bookmark key followed by , . If a directory is marked, the Bookmark key lists , as well. Configure cd on quit Pick the appropriate file for your shell from misc/quitcd and add the contents to your shell's rc file. You'll need to spawn a new shell for the change to take effect. You should start nnn as n (or your preferred function name/alias). By default, when ^G is pressed, nnn writes the last working directory to ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd To cd on quit always , export the environment variable NNN_TMPFILE set to your preferred file path. The extra key ^G to cd on quit is to avoid writing to a file every time nnn quits and allows on-demand cd on quit . Sync subshell $PWD To configure nnn to cd to the $PWD of the exited bash subshell, add the following in .bashrc : nnn_cd() { if ! [ -z \"$NNN_PIPE\" ]; then printf \"%s\\0\" \"0c${PWD}\" > \"${NNN_PIPE}\" !& fi } trap nnn_cd EXIT Add a plugin with the following contents: #!/usr/bin/env bash # Description: Start an interactive bash shell. export nnn=\"$1\" bash -i You can also use the run cmd as plugin method: s:!bash -i* Hot-plugged drives Mount status external storage devices can be toggled in a REPL using the plugin nmount . For auto-mounting external storage drives use udev rules or udisks wrappers. Image, video, pdf In addition to Live Previews , there is an independent plugin imgview to browse images/thumbnails of image, video or audio files in the terminal. Among other viewer utilities, it supports sxiv (opens its own window) which is particularly useful to browse images in a directory, set the wallpaper or copy image path to clipboard ( instructions ). Browse, rename images While the user can preview the hovered image in preview-tabbed and rename it, the following procedure is an alternative approach. It requires the imgview plugin (with sxiv ) and dmenu ( zenity can replace dmenu ). Save sxiv key-handler ~/.config/sxiv/exec/key-handler with the following content: #!/usr/bin/env sh # ^X-^R: prompt for new image name (needs `dmenu`) and `mv` # ^X-^C: copy the image path to X clipboard (needs `xclip`) # Example zenity prompt: # name=\"$(zenity --entry --display=:0.0 --text \"rename $file to\")\" 2> /dev/null while read -r file do case \"$1\" in \"C-r\") name=\"$(dmenu -p \"rename $file to: \")\" 2> /dev/null if [ -n \"$name\" ]; then mv \"$file\" \"$name\" fi ;; \"C-c\") printf \"%s\" \"$file\" | xclip -selection clipboard ;; *) printf \"Sorry, I don't understand\" exit 1 ;; esac done Now hover on an image or directory and open it with the imgsxiv plugin. Browse images and press ^X followed by ^R to rename an image. For file operations visit sxiv issue #228 . Read pdf as text The plugin pdfview can convert and render PDF files as text in the terminal. It has 2 methods to convert PDF to text. Please go through the script for the details. Detached text Set up a script (say ewrap ) to open the editor in a new tmux split-pane or a new xfce4-terminal tab/window (you may want to change the terminal and the editor in the sample snippet below): ```sh #!/usr/bin/env sh if [ -n \"$TMUX\" ] ; then # tmux session running tmux split-window -h \"vim \\\"$ \\\"\" else # Remove option --tab for new window xfce4-terminal --tab -e \"vim \\\"$ \\\"\" fi `` 2. Make ewrap executable and drop it somewhere in your $PATH`. Set $VISUAL (or $EDITOR if you don't have $VISUAL ) to ewrap : sh export VISUAL=ewrap Start nnn with the program option -e . Notes: IMPORTANT: Use the program option -E with detached text editing enabled. nnn internal operations which need to wait for the editor (like batch rename, copy/move as) wouldn't work as usual because the control returns to nnn after the terminal emulator is spawned. To avoid this, set $VISUAL as above and $EDITOR to a CLI editor (like vim ). The program option forces $EDITOR to be used for internal operations (overriding $VISUAL which takes precedence otherwise). If you are already using nuke as opener modify it to use ewrap for text files. You can also enhance ewrap (re-use code from nuke ) to handle text files by file type and use the right program (e.g. w3m for html, man for man pages). That way you don't have to change the opener. If you are using a tiling window manager, the new terminal window with the editor would open beside your current window. In case of traditional window managers, the new window will be placed as per the window manager's placement configuration e.g. smart or centered on XFCE4. Another options is to combine and use nnn with a multiplexer like dvtm : Run commands There are several ways to run commands from nnn : Launch a shell within the current directory. This is your regular shell. Use the prompt key to show the native command prompt and enter your command. The commands are invoked using the $SHELL so you can use commands, aliases (in ~/.zshenv for zsh), environment variables, pipes, redirections. You can also assign keys to arbitrary non-background cli commands (non-shell-interpreted) you use frequently and invoke like plugins. ( instructions ). Shell depth indicator If you use ! to spawn a shell in the current directory and your shell is bash or zsh, it could be nice to add: [ -n \"$NNNLVL\" ] && PS1=\"N$NNNLVL $PS1\" To your shell's rc. This will have your prompt indicate that you are within a shell that will return you to nnn when you are done. This together with cd on quit becomes a powerful combination. In addition, the quitcd scripts check $NNNLVL to guard against nesting. Launch applications GUI applications can be launched using a drop-down menu using plugin launch . nnn picks it up from the plugin location. If launch is not found, nnn shows a regular prompt for the application executable name. To configure launch as an independent app launcher add a keybind to open launch in a terminal e.g., xfce4-terminal -e \"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins/launch GUI applications can also be launched from the prompt. Use & to launch in background so nnn isn't blocked. Note: You can also launch an instance of your favorite terminal in the current directory ( open terminal here... ) this way. Open as root If you are a sudoer, open a new instance of nnn from the built-in prompt with sudo nnn . You can also have a short and sweet (but powerful) alias (which also works at the nnn prompt): alias N='sudo -E nnn -dH' File picker To use nnn as a file picker and redirect the output to other programs, use option -p . The option takes an output file as argument (use - to print the list to stdout). Ways to pick files: to pick a single file and quit, hover on it and press Enter to pick selection and quit, select file(s) and press Enter or q Notes: pressing Enter on a directory enters it; when trying to pick a directory, e.g. to pipe to cd , use single file selection to discard selection and quit, press ^G Example picker mode use cases: // list some files ls -l $(nnn -p -) -rw-rw-r-- 1 vaio vaio 14722 Jul 10 07:24 /home/vaio/GitHub/nnn/CHANGELOG -rw-rw-r-- 1 vaio vaio 1472 Jul 7 21:49 /home/vaio/GitHub/nnn/LICENSE -rw-rw-r-- 1 vaio vaio 1697 Jul 10 07:24 /home/vaio/GitHub/nnn/Makefile // Attach some files and send a mail neomutt -a $(nnn -p -) ... // append some files to MOC playlist mocp -a $(nnn -p -) Remote mounts nnn integrates with sshfs and rclone to support remote mounts. The mount points (for remotes as well as archives) are created within: ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/mounts Upon successful unmount, the mount points are removed. The key to mount a remote folder is c (for c onnect). Note: The mounts directory can be a symbolic link too. The target directory should have permissions to mount. sshfs Example primary setup: connect to SSH sever from desktop . To connect to and mount remote shares using sshfs , nnn requires the ssh configuration file ~/.ssh/config to have the host entries. sshfs reads this file. Example host entry for a Termux environment on Android device: Host * ServerAliveInterval 300 ServerAliveCountMax 2 Host phone HostName 192.168.43.1 User u0_a117 Port 8022 Compression no # Ciphers chacha20-poly1305@openssh.com # ProxyJump jumphost Once you try to connect using sshfs , nnn will prompt for the name of the host ( phone in the example above). Type the exact name (as it appears in this file) optionally followed by the path in the remote host you want to mount. Examples: phone <----- Mount your remote user's $HOME folder in `phone` phone:/tmp <----- Mount the remote `tmp` folder in `phone` Host phone will be mounted at ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/mounts/phone . If you need to pass options to the sshfs command, you can do so: export NNN_SSHFS='sshfs -o reconnect,idmap=user,cache_timeout=3600' Options must be preceded by sshfs and comma-separated without any space between them. rclone The remote needs to be configured and authenticated beforehand (one-time activity). The name used to configure is all nnn needs to connect and mount (as well as unmount) the remote service locally. If you need to pass options, use the dedicated environment variable for rclone : export NNN_RCLONE='rclone mount --read-only --no-checksum' A maximum of 5 flags can be passed. Tip: To list all the remotes in the rclone config file: rclone listremotes Unmount remotes The unmount option (which also unmounts mounted archives BTW) works in 2 ways: hover on the mount point, press u (for u nmount). This works for both remotes and archives. if the current entry is not a mount point, nnn prompts for the remote host name Notes: nnn opens the mount point in a smart context after successful mounts. More information on sshfs . Synced quick notes Open your note file OR directory (if your editor supports opening a dir like vim ) in your favourite editor like a plugin (see plugin docs for more info): export NNN_PLUG=n:-!vim /home/vaio/Dropbox/Public/Docs/Notes/note* To keep the file synced across systems you may want to specify a file synced by a cloud storage service or stored in a network share. Drag and drop Use the plugin dragdrop . Duplicate file To duplicate the current entry: press ^R keep the name unchanged in the prompt and press Enter in the next prompt (\"copy name\"), provide the preferred name (and optionally the path to the duplicate file) for the duplicate and press Enter Note: To cancel the rename or duplicate operations, press Enter in both prompts without changing the file name. Create batch links To create symbolic or hard links in batch: select the file(s) you want to link go to the target directory press n press s for symbolic link or h for hard link enter the link prefix (or @ for no prefix) The reasons only prefix is allowed (and not full name): avoid prompting for link names one by one for a selection having the same prefix groups the newly created links together Disable bold fonts Most modern terminal emulators have the option to disable bold fonts.","title":"The nnn magic!"},{"location":"Basic-use-cases/#the-nnn-magic","text":"nnn unfolds on use. Some exquisite stuff you can do: [x] Instantly load, sort, filter thousands of files [x] Filter and type to navigate with automatic matching dir entry [x] List input stream and pick entries to stdout or file as list [x] Write a plugin in any language and talk to nnn [x] find / fd / grep / ripgrep / fzf from nnn and list in nnn [x] Never lose context - start where you quit [x] Mount any cloud storage service in a few keypresses [x] Select files from anywhere (not just a single dir) [x] Unlimited bookmarks, plugins, cmds with custom hotkeys [x] Edit and preview markdown, man page, HTML [x] Open a file and auto-advance to the next [x] Filter filtered entries, export list of visible files [x] Configure the middle mouse click to do anything [x] Multi-location (or subtree) fuzzy search and visit a file [x] Load four dirs with custom settings at once [x] Notifications on cp , mv , rm completion [x] Auto-sync selection to system clipboard [x] Access selection from another instance of nnn [x] Open text files detached in another pane/tab/window [x] Mount and modify archives [x] Create files/dirs/duplicates with parents (like mkdir -p ) [x] Toggle hidden with . , visit $HOME with ~ , last dir with - [x] Mark a frequently visited dir at runtime [x] Sort by modification, access and inode change time [x] Compile out/in features with make variables [x] Watch matrix text fly or read fortune messages [x] Configure in 5 minutes!","title":"The nnn magic!"},{"location":"Basic-use-cases/#add-bookmarks","text":"There are 2 ways (can be used together) to manage bookmarks.","title":"Add bookmarks"},{"location":"Basic-use-cases/#environment-variable-nnn_bms","text":"Set environment variable NNN_BMS as a string of key_char:location pairs separated by semicolons ( ; ): export NNN_BMS=\"d:$HOME/Documents;u:/home/user/Cam Uploads;D:$HOME/Downloads/\" The bookmarks are listed in the help and config screen (key ? ). The select bookmark key b lists all the bookmark keys set in NNN_BMS in the bookmarks prompt.","title":"Environment variable NNN_BMS"},{"location":"Basic-use-cases/#symlinked-bookmarks","text":"A symlinked bookmark to the current directory can be created with the B key (or manually under ~/.config/nnn/bookmarks ). Pressing Enter at the bookmarks prompt takes to this directory. If NNN_BMS is not set, the select bookmark key directly opens it. Press - to return to the original directory right after entering a symlinked bookmark.","title":"Symlinked bookmarks"},{"location":"Basic-use-cases/#mark-directory","text":"To jump back and forth a specific directory during a session, you can mark the directory (key , ). Visit it anytime using the Bookmark key followed by , . If a directory is marked, the Bookmark key lists , as well.","title":"Mark directory"},{"location":"Basic-use-cases/#configure-cd-on-quit","text":"Pick the appropriate file for your shell from misc/quitcd and add the contents to your shell's rc file. You'll need to spawn a new shell for the change to take effect. You should start nnn as n (or your preferred function name/alias). By default, when ^G is pressed, nnn writes the last working directory to ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd To cd on quit always , export the environment variable NNN_TMPFILE set to your preferred file path. The extra key ^G to cd on quit is to avoid writing to a file every time nnn quits and allows on-demand cd on quit .","title":"Configure cd on quit"},{"location":"Basic-use-cases/#sync-subshell-pwd","text":"To configure nnn to cd to the $PWD of the exited bash subshell, add the following in .bashrc : nnn_cd() { if ! [ -z \"$NNN_PIPE\" ]; then printf \"%s\\0\" \"0c${PWD}\" > \"${NNN_PIPE}\" !& fi } trap nnn_cd EXIT Add a plugin with the following contents: #!/usr/bin/env bash # Description: Start an interactive bash shell. export nnn=\"$1\" bash -i You can also use the run cmd as plugin method: s:!bash -i*","title":"Sync subshell $PWD"},{"location":"Basic-use-cases/#hot-plugged-drives","text":"Mount status external storage devices can be toggled in a REPL using the plugin nmount . For auto-mounting external storage drives use udev rules or udisks wrappers.","title":"Hot-plugged drives"},{"location":"Basic-use-cases/#image-video-pdf","text":"In addition to Live Previews , there is an independent plugin imgview to browse images/thumbnails of image, video or audio files in the terminal. Among other viewer utilities, it supports sxiv (opens its own window) which is particularly useful to browse images in a directory, set the wallpaper or copy image path to clipboard ( instructions ).","title":"Image, video, pdf"},{"location":"Basic-use-cases/#browse-rename-images","text":"While the user can preview the hovered image in preview-tabbed and rename it, the following procedure is an alternative approach. It requires the imgview plugin (with sxiv ) and dmenu ( zenity can replace dmenu ). Save sxiv key-handler ~/.config/sxiv/exec/key-handler with the following content: #!/usr/bin/env sh # ^X-^R: prompt for new image name (needs `dmenu`) and `mv` # ^X-^C: copy the image path to X clipboard (needs `xclip`) # Example zenity prompt: # name=\"$(zenity --entry --display=:0.0 --text \"rename $file to\")\" 2> /dev/null while read -r file do case \"$1\" in \"C-r\") name=\"$(dmenu -p \"rename $file to: \")\" 2> /dev/null if [ -n \"$name\" ]; then mv \"$file\" \"$name\" fi ;; \"C-c\") printf \"%s\" \"$file\" | xclip -selection clipboard ;; *) printf \"Sorry, I don't understand\" exit 1 ;; esac done Now hover on an image or directory and open it with the imgsxiv plugin. Browse images and press ^X followed by ^R to rename an image. For file operations visit sxiv issue #228 .","title":"Browse, rename images"},{"location":"Basic-use-cases/#read-pdf-as-text","text":"The plugin pdfview can convert and render PDF files as text in the terminal. It has 2 methods to convert PDF to text. Please go through the script for the details.","title":"Read pdf as text"},{"location":"Basic-use-cases/#detached-text","text":"Set up a script (say ewrap ) to open the editor in a new tmux split-pane or a new xfce4-terminal tab/window (you may want to change the terminal and the editor in the sample snippet below): ```sh #!/usr/bin/env sh if [ -n \"$TMUX\" ] ; then # tmux session running tmux split-window -h \"vim \\\"$ \\\"\" else # Remove option --tab for new window xfce4-terminal --tab -e \"vim \\\"$ \\\"\" fi `` 2. Make ewrap executable and drop it somewhere in your $PATH`. Set $VISUAL (or $EDITOR if you don't have $VISUAL ) to ewrap : sh export VISUAL=ewrap Start nnn with the program option -e . Notes: IMPORTANT: Use the program option -E with detached text editing enabled. nnn internal operations which need to wait for the editor (like batch rename, copy/move as) wouldn't work as usual because the control returns to nnn after the terminal emulator is spawned. To avoid this, set $VISUAL as above and $EDITOR to a CLI editor (like vim ). The program option forces $EDITOR to be used for internal operations (overriding $VISUAL which takes precedence otherwise). If you are already using nuke as opener modify it to use ewrap for text files. You can also enhance ewrap (re-use code from nuke ) to handle text files by file type and use the right program (e.g. w3m for html, man for man pages). That way you don't have to change the opener. If you are using a tiling window manager, the new terminal window with the editor would open beside your current window. In case of traditional window managers, the new window will be placed as per the window manager's placement configuration e.g. smart or centered on XFCE4. Another options is to combine and use nnn with a multiplexer like dvtm :","title":"Detached text"},{"location":"Basic-use-cases/#run-commands","text":"There are several ways to run commands from nnn : Launch a shell within the current directory. This is your regular shell. Use the prompt key to show the native command prompt and enter your command. The commands are invoked using the $SHELL so you can use commands, aliases (in ~/.zshenv for zsh), environment variables, pipes, redirections. You can also assign keys to arbitrary non-background cli commands (non-shell-interpreted) you use frequently and invoke like plugins. ( instructions ).","title":"Run commands"},{"location":"Basic-use-cases/#shell-depth-indicator","text":"If you use ! to spawn a shell in the current directory and your shell is bash or zsh, it could be nice to add: [ -n \"$NNNLVL\" ] && PS1=\"N$NNNLVL $PS1\" To your shell's rc. This will have your prompt indicate that you are within a shell that will return you to nnn when you are done. This together with cd on quit becomes a powerful combination. In addition, the quitcd scripts check $NNNLVL to guard against nesting.","title":"Shell depth indicator"},{"location":"Basic-use-cases/#launch-applications","text":"GUI applications can be launched using a drop-down menu using plugin launch . nnn picks it up from the plugin location. If launch is not found, nnn shows a regular prompt for the application executable name. To configure launch as an independent app launcher add a keybind to open launch in a terminal e.g., xfce4-terminal -e \"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins/launch GUI applications can also be launched from the prompt. Use & to launch in background so nnn isn't blocked. Note: You can also launch an instance of your favorite terminal in the current directory ( open terminal here... ) this way.","title":"Launch applications"},{"location":"Basic-use-cases/#open-as-root","text":"If you are a sudoer, open a new instance of nnn from the built-in prompt with sudo nnn . You can also have a short and sweet (but powerful) alias (which also works at the nnn prompt): alias N='sudo -E nnn -dH'","title":"Open as root"},{"location":"Basic-use-cases/#file-picker","text":"To use nnn as a file picker and redirect the output to other programs, use option -p . The option takes an output file as argument (use - to print the list to stdout). Ways to pick files: to pick a single file and quit, hover on it and press Enter to pick selection and quit, select file(s) and press Enter or q Notes: pressing Enter on a directory enters it; when trying to pick a directory, e.g. to pipe to cd , use single file selection to discard selection and quit, press ^G Example picker mode use cases: // list some files ls -l $(nnn -p -) -rw-rw-r-- 1 vaio vaio 14722 Jul 10 07:24 /home/vaio/GitHub/nnn/CHANGELOG -rw-rw-r-- 1 vaio vaio 1472 Jul 7 21:49 /home/vaio/GitHub/nnn/LICENSE -rw-rw-r-- 1 vaio vaio 1697 Jul 10 07:24 /home/vaio/GitHub/nnn/Makefile // Attach some files and send a mail neomutt -a $(nnn -p -) ... // append some files to MOC playlist mocp -a $(nnn -p -)","title":"File picker"},{"location":"Basic-use-cases/#remote-mounts","text":"nnn integrates with sshfs and rclone to support remote mounts. The mount points (for remotes as well as archives) are created within: ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/mounts Upon successful unmount, the mount points are removed. The key to mount a remote folder is c (for c onnect). Note: The mounts directory can be a symbolic link too. The target directory should have permissions to mount.","title":"Remote mounts"},{"location":"Basic-use-cases/#sshfs","text":"Example primary setup: connect to SSH sever from desktop . To connect to and mount remote shares using sshfs , nnn requires the ssh configuration file ~/.ssh/config to have the host entries. sshfs reads this file. Example host entry for a Termux environment on Android device: Host * ServerAliveInterval 300 ServerAliveCountMax 2 Host phone HostName 192.168.43.1 User u0_a117 Port 8022 Compression no # Ciphers chacha20-poly1305@openssh.com # ProxyJump jumphost Once you try to connect using sshfs , nnn will prompt for the name of the host ( phone in the example above). Type the exact name (as it appears in this file) optionally followed by the path in the remote host you want to mount. Examples: phone <----- Mount your remote user's $HOME folder in `phone` phone:/tmp <----- Mount the remote `tmp` folder in `phone` Host phone will be mounted at ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/mounts/phone . If you need to pass options to the sshfs command, you can do so: export NNN_SSHFS='sshfs -o reconnect,idmap=user,cache_timeout=3600' Options must be preceded by sshfs and comma-separated without any space between them.","title":"sshfs"},{"location":"Basic-use-cases/#rclone","text":"The remote needs to be configured and authenticated beforehand (one-time activity). The name used to configure is all nnn needs to connect and mount (as well as unmount) the remote service locally. If you need to pass options, use the dedicated environment variable for rclone : export NNN_RCLONE='rclone mount --read-only --no-checksum' A maximum of 5 flags can be passed. Tip: To list all the remotes in the rclone config file: rclone listremotes","title":"rclone"},{"location":"Basic-use-cases/#unmount-remotes","text":"The unmount option (which also unmounts mounted archives BTW) works in 2 ways: hover on the mount point, press u (for u nmount). This works for both remotes and archives. if the current entry is not a mount point, nnn prompts for the remote host name Notes: nnn opens the mount point in a smart context after successful mounts. More information on sshfs .","title":"Unmount remotes"},{"location":"Basic-use-cases/#synced-quick-notes","text":"Open your note file OR directory (if your editor supports opening a dir like vim ) in your favourite editor like a plugin (see plugin docs for more info): export NNN_PLUG=n:-!vim /home/vaio/Dropbox/Public/Docs/Notes/note* To keep the file synced across systems you may want to specify a file synced by a cloud storage service or stored in a network share.","title":"Synced quick notes"},{"location":"Basic-use-cases/#drag-and-drop","text":"Use the plugin dragdrop .","title":"Drag and drop"},{"location":"Basic-use-cases/#duplicate-file","text":"To duplicate the current entry: press ^R keep the name unchanged in the prompt and press Enter in the next prompt (\"copy name\"), provide the preferred name (and optionally the path to the duplicate file) for the duplicate and press Enter Note: To cancel the rename or duplicate operations, press Enter in both prompts without changing the file name.","title":"Duplicate file"},{"location":"Basic-use-cases/#create-batch-links","text":"To create symbolic or hard links in batch: select the file(s) you want to link go to the target directory press n press s for symbolic link or h for hard link enter the link prefix (or @ for no prefix) The reasons only prefix is allowed (and not full name): avoid prompting for link names one by one for a selection having the same prefix groups the newly created links together","title":"Create batch links"},{"location":"Basic-use-cases/#disable-bold-fonts","text":"Most modern terminal emulators have the option to disable bold fonts.","title":"Disable bold fonts"},{"location":"Concepts/","text":"Project dir in preview Contexts Open multiple locations with 4 contexts. The status is shown in the top left corner: the current context is in reverse video other active contexts are underlined rest are inactive Create and cycle contexts using Tab or Shift+Tab . A new context copies the state of the previous context. Use context-specific colors (see configuration NNN_COLORS ) to identify each context easily. Dual pane The nnn way is to work with multiple contexts using Tab or Shift+Tab . Other solutions: - terminal multiplexers (tmux, GNU Screen, dvtm , SplitVT ) - terminal emulators with split support (Terminator, Tilix) For example, to open 2 instances in dvtm , run: dvtm n n You can also have an alias: alias 2=\"dvtm n n\" or a Bash function (with ^\\ as dvtm modifier) to handle arguments: 2 () { dvtm -m '^\\' \"nnn -nr $@\" \"nnn -nr $@\" } Sessions Sessions are a way to save and restore states of work. A session stores the settings and contexts. Sessions can be loaded at runtime or with a program option . Notes: When a session is loaded at runtime, the last working state is saved automatically to a dedicated -- \"auto session\" -- session file. Session option restore would restore the \"auto session\". The persistent session option is global. If it is used, the last active session will be updated with the final state at program quit. The \"auto session\" is used in persistent session mode if no session is active. Listing input stream and opening a bookmark by key have higher priority to session options ( -s / -S ). All the session files are located by session name in the directory ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/sessions \"@\" is the \"auto session\" file. Filters Filters are strings (or regex patterns) to find matching entries in the current directory instantly ( search-as-you-type ). Matches are case-insensitive by default. The last filter in each context is persisted at runtime or in saved sessions. When there's a unique match and it's a directory, nnn auto-enters the directory. Program option -A disables this. Special keys at filter prompt Key Function ^char Usual keybind functionality Esc Exit filter prompt but skip dir refresh Alt+Esc Unfilter, quit context Special keys at empty filter prompt : Key Function ? Show help and config screen / Toggle between string and regex : Toggle case-sensitivity ^L Clear filter ( if prompt is non-empty ) OR apply last filter Bksp Stay at filter prompt and refresh dir Del Stay at filter prompt and refresh dir Common regex use cases to list all matches starting with the filter expression, start with a ^ (caret) type \\.mkv to list all MKV files use .* to match any character ( sort of fuzzy search) exclude filenames having nnn ( with PCRE ): ^(?!nnn) Limitation Use regex for case-sensitive filtering with wide chars as the function strcasestr (used for string filters) does not work with multibyte locales ( ref1 , ref2 ). Type-to-nav In this mode directories are opened in filter mode, allowing continuous navigation. To start in type-to-nav mode, use the program option -n or press ^N . Additional special keys at empty filter prompt in type-to-nav mode: Listing 1 Listing 2 | Key | Function | |:---:| --- | | ' | Go to first file/match | | + | Toggle file selection | | , | Mark CWD | | - | Go to last visited dir | | . | Show hidden files | | ; | Run a plugin by its key | | Key | Function | |:---:| --- | | = | Launch a GUI application | | > | Export file list | | @ | Visit start dir | | ] | Show command prompt | | ` | Visit / | | ~ | Go HOME | Selection nnn allows file selection across directories and contexts! There are 3 groups of keybinds to add files to selection: hovered file selection toggle deselects if + is visible before the entry, else adds to selection add a range of files to selection repeat the range key on the same entry twice to clear selection completely add all files in the current directory to selection A selection can be edited, copied, moved, removed, archived or linked. Example workflow to copy or move some files: add files from source dirs (you can select files from multiple dirs in nnn ) to selection navigate to a target directory use ^P (cp) or ^V (mv) to copy or move the selected files Absolute paths of the selected files are copied to .selection file in the config directory. The selection file is shared between multiple program instances. Selection from multiple instances are not merged. The last instance writing to the file overwrites earlier contents. If you have 2 instances of nnn open in 2 panes of a terminal multiplexer, you can select in one pane and use the selection in the other pane. The selection gets cleared in the nnn instance where the selection was made on mv/rm (but not on cp). nnn clears the selection after a successful operation with the selection. Plugins are allowed to define the behaviour individually. Editing selection To edit the selection use the edit selection key. Editing doesn't end the selection mode. You can add more files to the selection and edit the list again. If no file is selected in the current session, this option attempts to list the selection file. File paths in selection to system clipboard Use the program option -x to copy selection to the system clipboard. You must have plugins installed. Grab file paths in selection manually Many plugins use this method. The file paths are NUL -terminated, so additional processing is required to make them usable. To run ls -l on the file paths in selection: xargs -0 ls -l < \"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection\" An special variable may be handy: export sel=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection so you can easily handle files together ( even at the nnn command prompt! ): xargs -0 ls -l < $sel Find and list There are two ways to search and list: feed a list of file paths as input search using a plugin (e.g. finder ) and list the results File paths must be NUL-separated ('\\0'). Paths can be relative to the current directory or absolute. Invalid paths in the input are ignored. Input processing limit is 16,384 paths or 64 MiB (max_paths x max_path_len) of data. To list the input stream, start nnn by writing to its standard input. E.g., to list files in current directory larger than 1M: find -maxdepth 1 -size +1M -print0 | nnn # fd -d 2 -S +1M -0 | nnn or redirect a list from a file: nnn < files.txt Handy bash/zsh shell function to list files by mime-type in current directory: # to show video files, run: list video list () { find . -maxdepth 1 | file -if- | grep \"$1\" | awk -F: '{printf \"%s\\0\", $1}' | nnn # fd -d 1 | file -if- | grep \"$1\" | awk -F: '{printf \"%s\\0\", $1}' | nnn } A temporary directory will be created containing symlinks to the given paths. Any action performed on these symlinks will be performed only on their targets, after which they might become invalid. Right or l on a symlink inside the listing dir takes to the target file. Press - to return to the listing dir. Press Enter to open the symlink. Listing input stream can be scripted. It can be extended to pick (option -p ) selected entries from the listed results. Prompts The prompts (except the filter prompt) support readline-like command-line shortcuts. Enter or ^D at the empty prompt (except the filter prompt) exits the prompt. Key ^L clears and Esc exits all prompts. Native command prompt The handy REPL command prompt (shows on ] ) understands environment variables (like $PWD ). Refer to your shell's documentation (e.g. BASH_ENV for bash, ~/.zshenv for zsh) to use aliases and functions. To fuzzy-select commands from your shell history at the command prompt and issue them after editing (like fc ), copy the plugin fzhist (as h maybe?) in your $PATH . The native command prompt remembers the last 16 commands executed in the current session. To access and use the shell's history add a shell function similar to: h () { fzf <~/shell-specific_history_file | tr -d '\\n' | xsel -bi } Paste the selected command at the prompt using Ctrl-Shift-V , optionally edit and run. All binary questions are confirmed by y or Y . Special variables The following special variables can be accessed from the command prompt or a spawned shell: Variable Substitution $nnn Hovered file name in current context $dN Path open in context N [N=1/2/3/4] $fN File path hovered in context N [N=1/2/3/4] E.g. to copy the hovered file in context 1 to the directory open in context 3, run cp \"$f1\" \"$d3\" . Selection can be accessed from the native command prompt: Variable Substitution %j repeat cmd with all %j substituted by each selected file path %J run the command only once with %J as the last characters substituted by all selected file paths E.g. Look up a string in each file in selection: printf \"Searching for string in %s\\n\" \"%j\"; grep \"string\" \"%j\" Archive all files in selection: tar uvf archive.tar %J Notes: You can only use either %j or %J inside a single command. If both are encountered the prompt will close. No command will be executed. When using %J nnn will automatically escape special characters. Any %J not at the end of the command will be left unsubstituted. Copy command from spawned shell to native command prompt The prompt (non-readline nnn -internal one) can remember the last executed command. Sometimes it may be desirable copy a command from shell history to the prompt. Keybinds can be configured to copy a command from bash/zsh prompt to the system clipboard. You can use these at the subshell prompt and paste the command at the prompt with Ctrl-Shift-V . # bash: add in ~/.bashrc # copy current line to clipboard with ^] if [[ -n $DISPLAY ]]; then copy_line_to_x_clipboard () { printf %s \"$READLINE_LINE\" | xsel -ib } bind -x '\"\\C-]\": copy_line_to_x_clipboard' fi # zsh: add in ~/.zshrc # copy current line to clipboard with ^U if [[ -n $DISPLAY ]]; then x-kill-whole-line () { zle kill-whole-line print -rn -- \"$CUTBUFFER\" | xsel -ib } zle -N x-kill-whole-line bindkey '\\C-u' x-kill-whole-line fi Design nnn (the core C utility) is, generally speaking, feature-restricted . It includes features which you really need so it can remain light enough to finish your workflow accurately before your train of thought is lost. nnn supports plugins to extend its capabilities. Here's a list of the design principles driving the core nnn program: nnn complements X, doesn't substitute it Brings the best of CLI to a GUI user Doesn't expect the user to abandon GUI (the GUI is well-established for a reason) Zero-config comfort-zone for GUI users out of the box Quick and distraction-free workflows Clean and clutter-free single-window view focused on content Easily switch context/tabs with (Sh)TAB Only directories in color, no icons To search/group by extension, use filter or sort by extension option Support external or plugin-based previewers by writing the the hovered file path to a custom FIFO. One utility instead of multiple utilities for related tasks e.g. file management, batch rename, disk usage analysis, launching apps etc. No configuration file and few environment variables Stay portable - very limited library dependencies support compiling out features Use a standard desktop opener to handle file associations Analyze disk usage within the same filesystem, do not follow symbolic links Case-insensitive alphabetic content listing instead of all uppercase first Directories first in all modes (even in disk usage analyzer mode) No navigation restriction with relative paths (let permissions handle it) Directory updates are disabled in the following modes: disk usage: re-scans are issued on every change in dir filter mode: content refresh is very disruptive in the workflow Limited (4) number of contexts; for more, please refer to make option O_CTX8 file paths copy-paste should work seamlessly between contexts and instances of nnn Scan each directory on visit (even in disk usage analyzer mode) rather than storing all the information from the first scan. This keeps the information up to date. To compensate, use fast re-scan with highly optimized algorithms.","title":"Concepts"},{"location":"Concepts/#contexts","text":"Open multiple locations with 4 contexts. The status is shown in the top left corner: the current context is in reverse video other active contexts are underlined rest are inactive Create and cycle contexts using Tab or Shift+Tab . A new context copies the state of the previous context. Use context-specific colors (see configuration NNN_COLORS ) to identify each context easily.","title":"Contexts"},{"location":"Concepts/#dual-pane","text":"The nnn way is to work with multiple contexts using Tab or Shift+Tab . Other solutions: - terminal multiplexers (tmux, GNU Screen, dvtm , SplitVT ) - terminal emulators with split support (Terminator, Tilix) For example, to open 2 instances in dvtm , run: dvtm n n You can also have an alias: alias 2=\"dvtm n n\" or a Bash function (with ^\\ as dvtm modifier) to handle arguments: 2 () { dvtm -m '^\\' \"nnn -nr $@\" \"nnn -nr $@\" }","title":"Dual pane"},{"location":"Concepts/#sessions","text":"Sessions are a way to save and restore states of work. A session stores the settings and contexts. Sessions can be loaded at runtime or with a program option . Notes: When a session is loaded at runtime, the last working state is saved automatically to a dedicated -- \"auto session\" -- session file. Session option restore would restore the \"auto session\". The persistent session option is global. If it is used, the last active session will be updated with the final state at program quit. The \"auto session\" is used in persistent session mode if no session is active. Listing input stream and opening a bookmark by key have higher priority to session options ( -s / -S ). All the session files are located by session name in the directory ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/sessions \"@\" is the \"auto session\" file.","title":"Sessions"},{"location":"Concepts/#filters","text":"Filters are strings (or regex patterns) to find matching entries in the current directory instantly ( search-as-you-type ). Matches are case-insensitive by default. The last filter in each context is persisted at runtime or in saved sessions. When there's a unique match and it's a directory, nnn auto-enters the directory. Program option -A disables this.","title":"Filters"},{"location":"Concepts/#special-keys-at-filter-prompt","text":"Key Function ^char Usual keybind functionality Esc Exit filter prompt but skip dir refresh Alt+Esc Unfilter, quit context Special keys at empty filter prompt : Key Function ? Show help and config screen / Toggle between string and regex : Toggle case-sensitivity ^L Clear filter ( if prompt is non-empty ) OR apply last filter Bksp Stay at filter prompt and refresh dir Del Stay at filter prompt and refresh dir","title":"Special keys at filter prompt"},{"location":"Concepts/#common-regex-use-cases","text":"to list all matches starting with the filter expression, start with a ^ (caret) type \\.mkv to list all MKV files use .* to match any character ( sort of fuzzy search) exclude filenames having nnn ( with PCRE ): ^(?!nnn)","title":"Common regex use cases"},{"location":"Concepts/#limitation","text":"Use regex for case-sensitive filtering with wide chars as the function strcasestr (used for string filters) does not work with multibyte locales ( ref1 , ref2 ).","title":"Limitation"},{"location":"Concepts/#type-to-nav","text":"In this mode directories are opened in filter mode, allowing continuous navigation. To start in type-to-nav mode, use the program option -n or press ^N . Additional special keys at empty filter prompt in type-to-nav mode: Listing 1 Listing 2 | Key | Function | |:---:| --- | | ' | Go to first file/match | | + | Toggle file selection | | , | Mark CWD | | - | Go to last visited dir | | . | Show hidden files | | ; | Run a plugin by its key | | Key | Function | |:---:| --- | | = | Launch a GUI application | | > | Export file list | | @ | Visit start dir | | ] | Show command prompt | | ` | Visit / | | ~ | Go HOME |","title":"Type-to-nav"},{"location":"Concepts/#selection","text":"nnn allows file selection across directories and contexts! There are 3 groups of keybinds to add files to selection: hovered file selection toggle deselects if + is visible before the entry, else adds to selection add a range of files to selection repeat the range key on the same entry twice to clear selection completely add all files in the current directory to selection A selection can be edited, copied, moved, removed, archived or linked. Example workflow to copy or move some files: add files from source dirs (you can select files from multiple dirs in nnn ) to selection navigate to a target directory use ^P (cp) or ^V (mv) to copy or move the selected files Absolute paths of the selected files are copied to .selection file in the config directory. The selection file is shared between multiple program instances. Selection from multiple instances are not merged. The last instance writing to the file overwrites earlier contents. If you have 2 instances of nnn open in 2 panes of a terminal multiplexer, you can select in one pane and use the selection in the other pane. The selection gets cleared in the nnn instance where the selection was made on mv/rm (but not on cp). nnn clears the selection after a successful operation with the selection. Plugins are allowed to define the behaviour individually.","title":"Selection"},{"location":"Concepts/#editing-selection","text":"To edit the selection use the edit selection key. Editing doesn't end the selection mode. You can add more files to the selection and edit the list again. If no file is selected in the current session, this option attempts to list the selection file.","title":"Editing selection"},{"location":"Concepts/#file-paths-in-selection-to-system-clipboard","text":"Use the program option -x to copy selection to the system clipboard. You must have plugins installed.","title":"File paths in selection to system clipboard"},{"location":"Concepts/#grab-file-paths-in-selection-manually","text":"Many plugins use this method. The file paths are NUL -terminated, so additional processing is required to make them usable. To run ls -l on the file paths in selection: xargs -0 ls -l < \"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection\" An special variable may be handy: export sel=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection so you can easily handle files together ( even at the nnn command prompt! ): xargs -0 ls -l < $sel","title":"Grab file paths in selection manually"},{"location":"Concepts/#find-and-list","text":"There are two ways to search and list: feed a list of file paths as input search using a plugin (e.g. finder ) and list the results File paths must be NUL-separated ('\\0'). Paths can be relative to the current directory or absolute. Invalid paths in the input are ignored. Input processing limit is 16,384 paths or 64 MiB (max_paths x max_path_len) of data. To list the input stream, start nnn by writing to its standard input. E.g., to list files in current directory larger than 1M: find -maxdepth 1 -size +1M -print0 | nnn # fd -d 2 -S +1M -0 | nnn or redirect a list from a file: nnn < files.txt Handy bash/zsh shell function to list files by mime-type in current directory: # to show video files, run: list video list () { find . -maxdepth 1 | file -if- | grep \"$1\" | awk -F: '{printf \"%s\\0\", $1}' | nnn # fd -d 1 | file -if- | grep \"$1\" | awk -F: '{printf \"%s\\0\", $1}' | nnn } A temporary directory will be created containing symlinks to the given paths. Any action performed on these symlinks will be performed only on their targets, after which they might become invalid. Right or l on a symlink inside the listing dir takes to the target file. Press - to return to the listing dir. Press Enter to open the symlink. Listing input stream can be scripted. It can be extended to pick (option -p ) selected entries from the listed results.","title":"Find and list"},{"location":"Concepts/#prompts","text":"The prompts (except the filter prompt) support readline-like command-line shortcuts. Enter or ^D at the empty prompt (except the filter prompt) exits the prompt. Key ^L clears and Esc exits all prompts.","title":"Prompts"},{"location":"Concepts/#native-command-prompt","text":"The handy REPL command prompt (shows on ] ) understands environment variables (like $PWD ). Refer to your shell's documentation (e.g. BASH_ENV for bash, ~/.zshenv for zsh) to use aliases and functions. To fuzzy-select commands from your shell history at the command prompt and issue them after editing (like fc ), copy the plugin fzhist (as h maybe?) in your $PATH . The native command prompt remembers the last 16 commands executed in the current session. To access and use the shell's history add a shell function similar to: h () { fzf <~/shell-specific_history_file | tr -d '\\n' | xsel -bi } Paste the selected command at the prompt using Ctrl-Shift-V , optionally edit and run. All binary questions are confirmed by y or Y .","title":"Native command prompt"},{"location":"Concepts/#special-variables","text":"The following special variables can be accessed from the command prompt or a spawned shell: Variable Substitution $nnn Hovered file name in current context $dN Path open in context N [N=1/2/3/4] $fN File path hovered in context N [N=1/2/3/4] E.g. to copy the hovered file in context 1 to the directory open in context 3, run cp \"$f1\" \"$d3\" . Selection can be accessed from the native command prompt: Variable Substitution %j repeat cmd with all %j substituted by each selected file path %J run the command only once with %J as the last characters substituted by all selected file paths E.g. Look up a string in each file in selection: printf \"Searching for string in %s\\n\" \"%j\"; grep \"string\" \"%j\" Archive all files in selection: tar uvf archive.tar %J Notes: You can only use either %j or %J inside a single command. If both are encountered the prompt will close. No command will be executed. When using %J nnn will automatically escape special characters. Any %J not at the end of the command will be left unsubstituted.","title":"Special variables"},{"location":"Concepts/#copy-command-from-spawned-shell-to-native-command-prompt","text":"The prompt (non-readline nnn -internal one) can remember the last executed command. Sometimes it may be desirable copy a command from shell history to the prompt. Keybinds can be configured to copy a command from bash/zsh prompt to the system clipboard. You can use these at the subshell prompt and paste the command at the prompt with Ctrl-Shift-V . # bash: add in ~/.bashrc # copy current line to clipboard with ^] if [[ -n $DISPLAY ]]; then copy_line_to_x_clipboard () { printf %s \"$READLINE_LINE\" | xsel -ib } bind -x '\"\\C-]\": copy_line_to_x_clipboard' fi # zsh: add in ~/.zshrc # copy current line to clipboard with ^U if [[ -n $DISPLAY ]]; then x-kill-whole-line () { zle kill-whole-line print -rn -- \"$CUTBUFFER\" | xsel -ib } zle -N x-kill-whole-line bindkey '\\C-u' x-kill-whole-line fi","title":"Copy command from spawned shell to native command prompt"},{"location":"Concepts/#design","text":"nnn (the core C utility) is, generally speaking, feature-restricted . It includes features which you really need so it can remain light enough to finish your workflow accurately before your train of thought is lost. nnn supports plugins to extend its capabilities. Here's a list of the design principles driving the core nnn program: nnn complements X, doesn't substitute it Brings the best of CLI to a GUI user Doesn't expect the user to abandon GUI (the GUI is well-established for a reason) Zero-config comfort-zone for GUI users out of the box Quick and distraction-free workflows Clean and clutter-free single-window view focused on content Easily switch context/tabs with (Sh)TAB Only directories in color, no icons To search/group by extension, use filter or sort by extension option Support external or plugin-based previewers by writing the the hovered file path to a custom FIFO. One utility instead of multiple utilities for related tasks e.g. file management, batch rename, disk usage analysis, launching apps etc. No configuration file and few environment variables Stay portable - very limited library dependencies support compiling out features Use a standard desktop opener to handle file associations Analyze disk usage within the same filesystem, do not follow symbolic links Case-insensitive alphabetic content listing instead of all uppercase first Directories first in all modes (even in disk usage analyzer mode) No navigation restriction with relative paths (let permissions handle it) Directory updates are disabled in the following modes: disk usage: re-scans are issued on every change in dir filter mode: content refresh is very disruptive in the workflow Limited (4) number of contexts; for more, please refer to make option O_CTX8 file paths copy-paste should work seamlessly between contexts and instances of nnn Scan each directory on visit (even in disk usage analyzer mode) rather than storing all the information from the first scan. This keeps the information up to date. To compensate, use fast re-scan with highly optimized algorithms.","title":"Design"},{"location":"Developer-guides/","text":"Release checklist Run tests with generated outdir files Update program options and help in Wiki, if required Update auto-completion scripts, if required Update VERSION in source Update the app_version section within misc/haiku/nnn.rdef . Also, change the variety from B_APPV_DEVELOPMENT to B_APPV_FINAL . Update date in man page Review list of auto-generated packages Update CHANGELOG Create signed tag and push to GitHub Run make O_NOUG=1 upload-local (requires libgpm-dev , upx , jq ) to upload source package signature and static binary Create a GitHub release and populate the release notes from CHANGELOG Revert the variety back to B_APPV_DEVELOPMENT in /misc/haiku/nnn.rdef Notify downstream package maintainers Verify sources The sources tarball is signed with PGP key, which you can verify as following: $ gpg --verify nnn-<VERSION>.tar.gz.sig nnn-<VERSION>.tar.gz gpg: Signature made ... gpg: using RSA key BBAD0B2F3093A7C3377A8F6BA75979F35C080412 gpg: Good signature from \"Arun Prakash Jana <...>\" Primary key fingerprint: BBAD 0B2F 3093 A7C3 377A 8F6B A759 79F3 5C08 0412 make options nnn provides several make variables to customize the features to include or exclude. This also helps in reducing the binary size further. Compile with PCRE POSIX regex is the default. To enable PCRE, install the PCRE development library and set O_PCRE . On Ubuntu 18.04: sudo apt install libpcre3-dev make O_PCRE=1 On macOS: brew install pcre # if you're using Homebrew sudo port install pcre # if you're using MacPorts make O_PCRE=1 Compile out readline make O_NORL=1 Compile out mouse support make O_NOMOUSE=1 Compile out built-in feature-limited batch renamer make O_NOBATCH=1 Use it if you have plugin .nmv (bash script). Compile out FIFO make O_NOFIFO=1 Compile out session support make O_NOSSN=1 Compile out user, group details in status bar make O_NOUG=1 Storing and decoding user and group info adds significantly to resident memory usage. Compile-in icons-in-terminal make O_ICONS=1 More details here . This variable is not compatible with O_NERD=1 , O_EMOJI=1 and O_NOLC=1 . Compile-in icons-nerdfont make O_NERD=1 More details here . This variable is not compatible with O_ICONS=1 , O_EMOJI=1 and O_NOLC=1 . Compile-in emojis make O_EMOJI=1 More details here . This variable is not compatible with O_ICONS=1 , O_NERD=1 and O_NOLC=1 . Compile out locale make O_NOLC=1 Unsupported characters in file names will be replaced by ? . Operations on files work seamlessly. Compile out X11 integration make O_NOX11=1 Disable notifications on cp , mv , rm completion, selection sync to system clipboard and xterm title advertisement on directory change. Compile-in Alexey Tourbin's QSORT make O_QSORT=1 Compile-in 8 contexts make O_CTX8=1 Warning: Saved sessions may no longer be usable when the number of contexts is switched. Matching filters only make O_MATCHFLTR=1 Discard filter key when there's no match. Load directories unsorted make O_NOSORT=1 This option is useful in type-to-nav mode. Loads dirs faster on initial entry. Any filter sorts the listing. Usable with xterm 256 colors only. Static compilation Install the GPM development library and set the Makefile variable O_STATIC . On Ubuntu 16.04/18.04: sudo apt install libgpm-dev make O_STATIC=1 strip On macOS: It's not possible to compile with -static on macOS at the moment. So please ignore this option if you're on macOS. This option will not work on Mac OS X unless all libraries (including libgcc.a) have also been compiled with -static. Since neither a static version of libSystem.dylib nor crt0.o are provided, this option is not useful to most people. Verify the binary. file nnn nnn: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=1be54d27687f83cf42393dd59dba2723798956de, stripped Optimization tips Careful use of make variables, static compilation and upx compression can do wonders! $ make CFLAGS+=-march=native O_NORL=1 O_NOMOUSE=1 O_NOLC=1 O_NOBATCH=1 O_NOSSN=1 O_NOFIFO=1 O_QSORT=1 O_NOUG=1 static $ upx nnn-static $ ls -l nnn-static -rwxrwxr-x 1 user user 593808 Nov 2 00:45 nnn-static # top output (/usr/bin has 1544 files) PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 31953 user 20 0 2428 2244 4 S 0.0 0.0 0:00.02 ./nnn-static -cdDEnQrux /usr/bin Compile for MacOS On macos the default system ncurses library is too old and can cause issues (see https://github.com/jarun/nnn/issues/1703). Install a more up to date version from homebrew and link against it via adding the library path to $LDLIBS $ LDLIBS=\"-L/opt/homebrew/opt/ncurses/lib/\" make Compile for Pi The nnn version available as a stable Raspbian package is very out of date (v2.2), which means that the only way to get a recent version of nnn is to compile from source. As an example, to compile nnn v3.5 for a Raspberry Pi running Raspbian Buster, get nnn-v3.5.tar.gz from the release assets , put the tarball file on the Pi, and then do the following: Install the required dependencies sudo apt install pkg-config libncursesw5-dev libreadline-dev Extract the tarball ready for compilation tar -zxvf nnn-v3.5.tar.gz cd nnn-3.5 Compile and install to default directory (/usr/local/bin) sudo make strip install The above was tested on a Raspberry Pi Zero W running Buster and worked with no problems. Cygwin instructions Copy to Windows clipboard from Cygwin Install plugins and use the program option -x . External editor on Cygwin See jarun/nnn#1200 . Compile with musl libc In this example we will compile nnn on Ubuntu 20.04 with netbsd-curses musl-fts musl libc pcre (optional) Discussion thread . See this patch to save some more on terminfo . Compilation script for Ubuntu closely following this procedure. Install musl sudo apt install musl musl-dev musl-tools Get netbsd-curses and compile the shared and static libraries git clone https://github.com/sabotage-linux/netbsd-curses cd netbsd-curses git checkout v0.3.2 make CC=musl-gcc CFLAGS=\"-O3 -Wall -fPIC\" -j$(($(nproc)+1)) all sudo mkdir /opt/nnn-libs sudo cp libcurses/libcurses.so libterminfo/libterminfo.so /opt/nnn-libs/ make clean make CC=musl-gcc CFLAGS=-O3 LDFLAGS=-static all-static sudo cp libcurses/libcurses.a libterminfo/libterminfo.a /opt/nnn-libs/ Get musl-fts and compile the shared and static binaries git clone https://github.com/void-linux/musl-fts --depth=1 cd musl-fts ./bootstrap.sh ./configure make CC=musl-gcc CFLAGS=-O3 LDFLAGS=-static -j$(($(nproc)+1)) sudo cp .libs/libfts.a /opt/nnn-libs/ make clean make CC=musl-gcc CFLAGS=-O3 -j$(($(nproc)+1)) sudo cp .libs/libfts.so.0.0.0 /opt/nnn-libs/libfts.so Get pcre and compile the shared and static binaries wget https://downloads.sourceforge.net/pcre/pcre-8.45.tar.bz2 ./configure --enable-unicode-properties --enable-pcre16 --enable-pcre32 make CFLAGS=-O3 CC=musl-gcc LDFLAGS=-static sudo cp .libs/libpcre.a /opt/nnn-libs make CFLAGS=-O3 CC=musl-gcc sudo cp .libs/libpcre.so.1.2.13 /opt/nnn-libs Compile nnn # shared musl-gcc -O3 -DNORL -DNOMOUSE -std=c11 -Wall -Wextra -Wshadow -I/path_to/netbsd-curses/libcurses -I/path_to/musl-fts -o nnn src/nnn.c -Wl,-Bsymbolic-functions -lpthread -L/opt/nnn-libs -lcurses -lterminfo -lfts # shared custom musl-gcc -O3 -DNORL -DNOLC -DNOMOUSE -DNOBATCH -DNOFIFO -DTOURBIN_QSORT -DNOSSN -DNOUG -DNOX11 -std=c11 -Wall -Wextra -Wshadow -I/path_to/netbsd-curses/libcurses -I/path_to/musl-fts -o nnn src/nnn.c -Wl,-Bsymbolic-functions -lpthread -L/opt/nnn-libs -lcurses -lterminfo -lfts # Note 1: For static compilation append `-static` to the above commands # Note 2: To enable pcre, add `-I./pcre-8.45` and `-lpcre` # strip the binary strip nnn Run # For shared lib export LD_LIBRARY_PATH=/opt/nnn-libs:$LD_LIBRARY_PATH # ./nnn Cross-compile for Android This section applies to Linux as host, Android on arm64 target and an xterm-256color terminal. We are going to link statically against libreadline and libncursesw so we won't need to install them separately on the phone. For anything else, please adjust accordingly. Preparation Download ncurses Download readline Extract ncurses and readline Setup Android's NDK and make sure you export all the necessary variables for GNU Autoconf. export ANDROID_ENV to be the location where we install our cross-compiled dependencies Cross-compile ncurses cd into ncurses' directory configure ./configure --enable-widec --enable-termcap --with-fallbacks=xterm-256color --disable-stripping --host=aarch64-linux-android --prefix=$ANDROID_ENV make and install make && make install Cross-compile readline cd into readline's directory configure ./configure --enable-multibyte --with-curses --disable-shared --host=aarch64-linux-android --prefix=$ANDROID_ENV - make and install make && make install Cross-compile nnn cd into nnn's directory export CFLAGS=\"$CFLAGS -I$ANDROID_ENV/include/ncursesw -I$ANDROID_ENV/include\" export LDFLAGS=\"$LDFLAGS -L$ANDROID_ENV/lib\" run make Validate file nnn should yield something like: nnn: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, not stripped Get nnn-ing Move the binary to your phone and run with your favourite terminal emulator! Debugging nnn To debug nnn compile the program in debug mode: make O_DEBUG=1 The run the generated binary: ./nnn In debug mode nnn generates additional debug information which is logged in the file nnndbg located (by priority) at: /tmp/nnndbg or, the directory in which nnn is run To log extra information, use the DPRINTF_* functions.","title":"Developer guides"},{"location":"Developer-guides/#release-checklist","text":"Run tests with generated outdir files Update program options and help in Wiki, if required Update auto-completion scripts, if required Update VERSION in source Update the app_version section within misc/haiku/nnn.rdef . Also, change the variety from B_APPV_DEVELOPMENT to B_APPV_FINAL . Update date in man page Review list of auto-generated packages Update CHANGELOG Create signed tag and push to GitHub Run make O_NOUG=1 upload-local (requires libgpm-dev , upx , jq ) to upload source package signature and static binary Create a GitHub release and populate the release notes from CHANGELOG Revert the variety back to B_APPV_DEVELOPMENT in /misc/haiku/nnn.rdef Notify downstream package maintainers","title":"Release checklist"},{"location":"Developer-guides/#verify-sources","text":"The sources tarball is signed with PGP key, which you can verify as following: $ gpg --verify nnn-<VERSION>.tar.gz.sig nnn-<VERSION>.tar.gz gpg: Signature made ... gpg: using RSA key BBAD0B2F3093A7C3377A8F6BA75979F35C080412 gpg: Good signature from \"Arun Prakash Jana <...>\" Primary key fingerprint: BBAD 0B2F 3093 A7C3 377A 8F6B A759 79F3 5C08 0412","title":"Verify sources"},{"location":"Developer-guides/#make-options","text":"nnn provides several make variables to customize the features to include or exclude. This also helps in reducing the binary size further.","title":"make options"},{"location":"Developer-guides/#compile-with-pcre","text":"POSIX regex is the default. To enable PCRE, install the PCRE development library and set O_PCRE . On Ubuntu 18.04: sudo apt install libpcre3-dev make O_PCRE=1 On macOS: brew install pcre # if you're using Homebrew sudo port install pcre # if you're using MacPorts make O_PCRE=1","title":"Compile with PCRE"},{"location":"Developer-guides/#compile-out-readline","text":"make O_NORL=1","title":"Compile out readline"},{"location":"Developer-guides/#compile-out-mouse-support","text":"make O_NOMOUSE=1","title":"Compile out mouse support"},{"location":"Developer-guides/#compile-out-built-in-feature-limited-batch-renamer","text":"make O_NOBATCH=1 Use it if you have plugin .nmv (bash script).","title":"Compile out built-in feature-limited batch renamer"},{"location":"Developer-guides/#compile-out-fifo","text":"make O_NOFIFO=1","title":"Compile out FIFO"},{"location":"Developer-guides/#compile-out-session-support","text":"make O_NOSSN=1","title":"Compile out session support"},{"location":"Developer-guides/#compile-out-user-group-details-in-status-bar","text":"make O_NOUG=1 Storing and decoding user and group info adds significantly to resident memory usage.","title":"Compile out user, group details in status bar"},{"location":"Developer-guides/#compile-in-icons-in-terminal","text":"make O_ICONS=1 More details here . This variable is not compatible with O_NERD=1 , O_EMOJI=1 and O_NOLC=1 .","title":"Compile-in icons-in-terminal"},{"location":"Developer-guides/#compile-in-icons-nerdfont","text":"make O_NERD=1 More details here . This variable is not compatible with O_ICONS=1 , O_EMOJI=1 and O_NOLC=1 .","title":"Compile-in icons-nerdfont"},{"location":"Developer-guides/#compile-in-emojis","text":"make O_EMOJI=1 More details here . This variable is not compatible with O_ICONS=1 , O_NERD=1 and O_NOLC=1 .","title":"Compile-in emojis"},{"location":"Developer-guides/#compile-out-locale","text":"make O_NOLC=1 Unsupported characters in file names will be replaced by ? . Operations on files work seamlessly.","title":"Compile out locale"},{"location":"Developer-guides/#compile-out-x11-integration","text":"make O_NOX11=1 Disable notifications on cp , mv , rm completion, selection sync to system clipboard and xterm title advertisement on directory change.","title":"Compile out X11 integration"},{"location":"Developer-guides/#compile-in-alexey-tourbins-qsort","text":"make O_QSORT=1","title":"Compile-in Alexey Tourbin's QSORT"},{"location":"Developer-guides/#compile-in-8-contexts","text":"make O_CTX8=1 Warning: Saved sessions may no longer be usable when the number of contexts is switched.","title":"Compile-in 8 contexts"},{"location":"Developer-guides/#matching-filters-only","text":"make O_MATCHFLTR=1 Discard filter key when there's no match.","title":"Matching filters only"},{"location":"Developer-guides/#load-directories-unsorted","text":"make O_NOSORT=1 This option is useful in type-to-nav mode. Loads dirs faster on initial entry. Any filter sorts the listing. Usable with xterm 256 colors only.","title":"Load directories unsorted"},{"location":"Developer-guides/#static-compilation","text":"Install the GPM development library and set the Makefile variable O_STATIC . On Ubuntu 16.04/18.04: sudo apt install libgpm-dev make O_STATIC=1 strip On macOS: It's not possible to compile with -static on macOS at the moment. So please ignore this option if you're on macOS. This option will not work on Mac OS X unless all libraries (including libgcc.a) have also been compiled with -static. Since neither a static version of libSystem.dylib nor crt0.o are provided, this option is not useful to most people. Verify the binary. file nnn nnn: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=1be54d27687f83cf42393dd59dba2723798956de, stripped","title":"Static compilation"},{"location":"Developer-guides/#optimization-tips","text":"Careful use of make variables, static compilation and upx compression can do wonders! $ make CFLAGS+=-march=native O_NORL=1 O_NOMOUSE=1 O_NOLC=1 O_NOBATCH=1 O_NOSSN=1 O_NOFIFO=1 O_QSORT=1 O_NOUG=1 static $ upx nnn-static $ ls -l nnn-static -rwxrwxr-x 1 user user 593808 Nov 2 00:45 nnn-static # top output (/usr/bin has 1544 files) PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 31953 user 20 0 2428 2244 4 S 0.0 0.0 0:00.02 ./nnn-static -cdDEnQrux /usr/bin","title":"Optimization tips"},{"location":"Developer-guides/#compile-for-macos","text":"On macos the default system ncurses library is too old and can cause issues (see https://github.com/jarun/nnn/issues/1703). Install a more up to date version from homebrew and link against it via adding the library path to $LDLIBS $ LDLIBS=\"-L/opt/homebrew/opt/ncurses/lib/\" make","title":"Compile for MacOS"},{"location":"Developer-guides/#compile-for-pi","text":"The nnn version available as a stable Raspbian package is very out of date (v2.2), which means that the only way to get a recent version of nnn is to compile from source. As an example, to compile nnn v3.5 for a Raspberry Pi running Raspbian Buster, get nnn-v3.5.tar.gz from the release assets , put the tarball file on the Pi, and then do the following:","title":"Compile for Pi"},{"location":"Developer-guides/#install-the-required-dependencies","text":"sudo apt install pkg-config libncursesw5-dev libreadline-dev","title":"Install the required dependencies"},{"location":"Developer-guides/#extract-the-tarball-ready-for-compilation","text":"tar -zxvf nnn-v3.5.tar.gz cd nnn-3.5","title":"Extract the tarball ready for compilation"},{"location":"Developer-guides/#compile-and-install-to-default-directory-usrlocalbin","text":"sudo make strip install The above was tested on a Raspberry Pi Zero W running Buster and worked with no problems.","title":"Compile and install to default directory (/usr/local/bin)"},{"location":"Developer-guides/#cygwin-instructions","text":"","title":"Cygwin instructions"},{"location":"Developer-guides/#copy-to-windows-clipboard-from-cygwin","text":"Install plugins and use the program option -x .","title":"Copy to Windows clipboard from Cygwin"},{"location":"Developer-guides/#external-editor-on-cygwin","text":"See jarun/nnn#1200 .","title":"External editor on Cygwin"},{"location":"Developer-guides/#compile-with-musl-libc","text":"In this example we will compile nnn on Ubuntu 20.04 with netbsd-curses musl-fts musl libc pcre (optional) Discussion thread . See this patch to save some more on terminfo . Compilation script for Ubuntu closely following this procedure.","title":"Compile with musl libc"},{"location":"Developer-guides/#install-musl","text":"sudo apt install musl musl-dev musl-tools","title":"Install musl"},{"location":"Developer-guides/#get-netbsd-curses-and-compile-the-shared-and-static-libraries","text":"git clone https://github.com/sabotage-linux/netbsd-curses cd netbsd-curses git checkout v0.3.2 make CC=musl-gcc CFLAGS=\"-O3 -Wall -fPIC\" -j$(($(nproc)+1)) all sudo mkdir /opt/nnn-libs sudo cp libcurses/libcurses.so libterminfo/libterminfo.so /opt/nnn-libs/ make clean make CC=musl-gcc CFLAGS=-O3 LDFLAGS=-static all-static sudo cp libcurses/libcurses.a libterminfo/libterminfo.a /opt/nnn-libs/","title":"Get netbsd-curses and compile the shared and static libraries"},{"location":"Developer-guides/#get-musl-fts-and-compile-the-shared-and-static-binaries","text":"git clone https://github.com/void-linux/musl-fts --depth=1 cd musl-fts ./bootstrap.sh ./configure make CC=musl-gcc CFLAGS=-O3 LDFLAGS=-static -j$(($(nproc)+1)) sudo cp .libs/libfts.a /opt/nnn-libs/ make clean make CC=musl-gcc CFLAGS=-O3 -j$(($(nproc)+1)) sudo cp .libs/libfts.so.0.0.0 /opt/nnn-libs/libfts.so","title":"Get musl-fts and compile the shared and static binaries"},{"location":"Developer-guides/#get-pcre-and-compile-the-shared-and-static-binaries","text":"wget https://downloads.sourceforge.net/pcre/pcre-8.45.tar.bz2 ./configure --enable-unicode-properties --enable-pcre16 --enable-pcre32 make CFLAGS=-O3 CC=musl-gcc LDFLAGS=-static sudo cp .libs/libpcre.a /opt/nnn-libs make CFLAGS=-O3 CC=musl-gcc sudo cp .libs/libpcre.so.1.2.13 /opt/nnn-libs","title":"Get pcre and compile the shared and static binaries"},{"location":"Developer-guides/#compile-nnn","text":"# shared musl-gcc -O3 -DNORL -DNOMOUSE -std=c11 -Wall -Wextra -Wshadow -I/path_to/netbsd-curses/libcurses -I/path_to/musl-fts -o nnn src/nnn.c -Wl,-Bsymbolic-functions -lpthread -L/opt/nnn-libs -lcurses -lterminfo -lfts # shared custom musl-gcc -O3 -DNORL -DNOLC -DNOMOUSE -DNOBATCH -DNOFIFO -DTOURBIN_QSORT -DNOSSN -DNOUG -DNOX11 -std=c11 -Wall -Wextra -Wshadow -I/path_to/netbsd-curses/libcurses -I/path_to/musl-fts -o nnn src/nnn.c -Wl,-Bsymbolic-functions -lpthread -L/opt/nnn-libs -lcurses -lterminfo -lfts # Note 1: For static compilation append `-static` to the above commands # Note 2: To enable pcre, add `-I./pcre-8.45` and `-lpcre` # strip the binary strip nnn","title":"Compile nnn"},{"location":"Developer-guides/#run","text":"# For shared lib export LD_LIBRARY_PATH=/opt/nnn-libs:$LD_LIBRARY_PATH # ./nnn","title":"Run"},{"location":"Developer-guides/#cross-compile-for-android","text":"This section applies to Linux as host, Android on arm64 target and an xterm-256color terminal. We are going to link statically against libreadline and libncursesw so we won't need to install them separately on the phone. For anything else, please adjust accordingly.","title":"Cross-compile for Android"},{"location":"Developer-guides/#preparation","text":"Download ncurses Download readline Extract ncurses and readline Setup Android's NDK and make sure you export all the necessary variables for GNU Autoconf. export ANDROID_ENV to be the location where we install our cross-compiled dependencies","title":"Preparation"},{"location":"Developer-guides/#cross-compile-ncurses","text":"cd into ncurses' directory configure ./configure --enable-widec --enable-termcap --with-fallbacks=xterm-256color --disable-stripping --host=aarch64-linux-android --prefix=$ANDROID_ENV make and install make && make install","title":"Cross-compile ncurses"},{"location":"Developer-guides/#cross-compile-readline","text":"cd into readline's directory configure ./configure --enable-multibyte --with-curses --disable-shared --host=aarch64-linux-android --prefix=$ANDROID_ENV - make and install make && make install","title":"Cross-compile readline"},{"location":"Developer-guides/#cross-compile-nnn","text":"cd into nnn's directory export CFLAGS=\"$CFLAGS -I$ANDROID_ENV/include/ncursesw -I$ANDROID_ENV/include\" export LDFLAGS=\"$LDFLAGS -L$ANDROID_ENV/lib\" run make","title":"Cross-compile nnn"},{"location":"Developer-guides/#validate","text":"file nnn should yield something like: nnn: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, not stripped","title":"Validate"},{"location":"Developer-guides/#get-nnn-ing","text":"Move the binary to your phone and run with your favourite terminal emulator!","title":"Get nnn-ing"},{"location":"Developer-guides/#debugging-nnn","text":"To debug nnn compile the program in debug mode: make O_DEBUG=1 The run the generated binary: ./nnn In debug mode nnn generates additional debug information which is logged in the file nnndbg located (by priority) at: /tmp/nnndbg or, the directory in which nnn is run To log extra information, use the DPRINTF_* functions.","title":"Debugging nnn"},{"location":"From-noice-to-nnn/","text":"Why fork? nnn was initially forked from noice but is significantly different today. I chose to fork because: - one can argue my approach deviates from the goal of the original project - keep the utility suckless . noice was rudimentary. In my opinion evolution is the taste of time. - I would like to have a bit of control on what features are added in the name of desktop integration. A feature-bloat is the last thing in my mind. See the design notes for more details. v1.0 was released on 13 Apr, 2017. nnn vs. noice Original (noice) features Super-easy navigation Pre-defined associations for different file types Jump to home directory Filter contents in current directory Show/hide hidden files Sort entries by modification time (newest to oldest) Spawn a SHELL in current directory (fallback sh) Run top Edit a file with EDITOR (fallback vi) Page through a file in PAGER (fallback less) nnn is under active development and new capabilities are being added continuously. To have a more recent overview of the current features in nnn please visit the features list in the project homepage and the ToDo list.","title":"Why fork?"},{"location":"From-noice-to-nnn/#why-fork","text":"nnn was initially forked from noice but is significantly different today. I chose to fork because: - one can argue my approach deviates from the goal of the original project - keep the utility suckless . noice was rudimentary. In my opinion evolution is the taste of time. - I would like to have a bit of control on what features are added in the name of desktop integration. A feature-bloat is the last thing in my mind. See the design notes for more details. v1.0 was released on 13 Apr, 2017.","title":"Why fork?"},{"location":"From-noice-to-nnn/#nnn-vs-noice","text":"","title":"nnn vs. noice"},{"location":"From-noice-to-nnn/#original-noice-features","text":"Super-easy navigation Pre-defined associations for different file types Jump to home directory Filter contents in current directory Show/hide hidden files Sort entries by modification time (newest to oldest) Spawn a SHELL in current directory (fallback sh) Run top Edit a file with EDITOR (fallback vi) Page through a file in PAGER (fallback less) nnn is under active development and new capabilities are being added continuously. To have a more recent overview of the current features in nnn please visit the features list in the project homepage and the ToDo list.","title":"Original (noice) features"},{"location":"Home/","text":"Welcome to the nnn Wiki! nnn (or n\u00b3 ) is a recursive acronym for Nnn's Not Noice! v1.0 was released on 13 Apr 2017. Looking for a list of features or quickstart guide? Visit the project home . Table of Contents Usage Dependencies Installation Configuration Program options Keyboard, mouse Symbols File size Help Concepts Contexts Dual pane Sessions Filters Type-to-nav Selection Find and list Prompts Design How to The nnn magic! Add bookmarks Sync subshell $PWD Configure cd on quit Hot-plugged drives Image, video, pdf Detached text Run commands Launch applications Open as root File picker Remote mounts Synced quick notes Drag and drop Duplicate file Create batch links Hidden files on top Disable bold fonts Themes Advanced Live previews File icons Custom keybinds CLI-only opener Desktop integration cp mv progress Control active dir Termux tips Pager as opener Working with lftp Power toys Troubleshooting Wrong file opener Broken file names Tmux configuration Broken control key Help not showing Default batch rename limits Misaligned size column Can't list within list BSD terminal issue Amethyst WM Stats, info Performance From noice to nnn Developer Release checklist Verify sources make options Static compilation Optimization tips Compile for Pi Cygwin instructions Compile with musl libc Cross-compile for Android Debugging nnn","title":"Home"},{"location":"Home/#table-of-contents","text":"Usage Dependencies Installation Configuration Program options Keyboard, mouse Symbols File size Help Concepts Contexts Dual pane Sessions Filters Type-to-nav Selection Find and list Prompts Design How to The nnn magic! Add bookmarks Sync subshell $PWD Configure cd on quit Hot-plugged drives Image, video, pdf Detached text Run commands Launch applications Open as root File picker Remote mounts Synced quick notes Drag and drop Duplicate file Create batch links Hidden files on top Disable bold fonts Themes Advanced Live previews File icons Custom keybinds CLI-only opener Desktop integration cp mv progress Control active dir Termux tips Pager as opener Working with lftp Power toys Troubleshooting Wrong file opener Broken file names Tmux configuration Broken control key Help not showing Default batch rename limits Misaligned size column Can't list within list BSD terminal issue Amethyst WM Stats, info Performance From noice to nnn Developer Release checklist Verify sources make options Static compilation Optimization tips Compile for Pi Cygwin instructions Compile with musl libc Cross-compile for Android Debugging nnn","title":"Table of Contents"},{"location":"Live-previews/","text":"Video preview with nnn Live previews A live preview is a window that renders or shows information on the hovered entry. As the cursor moves, the live preview window will automatically update. There are two ways to enable live previews in nnn : 1. using a previewer plugin, 2. using a custom wrapper/previewer script. Both use the path in NNN_FIFO to get hover updates. Previewer plugins Set up NNN_FIFO Depends on how many simultaneous nnn instances you need: Single instance: export a global FIFO path in, e.g., .profile : sh export NNN_FIFO=/tmp/nnn.fifo 2. Multiple instances: use the option -a to create a new FIFO path for each instance. Plugin usage Follow the instructions in the plugin documentation for installation and general plugin configuration. There are 2 previewer plugins for nnn , using various mechanisms to display the preview window: preview-tabbed : the preview window is a tabbed X window, files are viewed using Xembed capable programs ( mpv for audio/video, sxiv for images, zathura for PDF, xterm/urxvt/st + nuke plugin text preview for other files) preview-tui : the preview window is either a tmux pane, a new terminal window or a kitty pane (needs kitty's allow_remote_control option turned on), and files are previewed using tools like tree, less, file, mediainfo, kitty's icat, ueberzug etc. On WSL it will use QuickLook to preview files. It can also use ranger's scope.sh or pistol. Feel free to submit a pull-request for any previewer you feel is missing. To run a previewer (or any plugin in general) when you start nnn , use the option -P Notes: nnn does not watch the hovered file and update the path if it's modified while under preview. Press Esc or click on the entry to update the preview without changing the hovered entry. To close the preview-tui preview windows run the plugin again or press ^C on the preview window. Custom script configuration example There are two aspects to creating a live preview: 1. A preview command 2. A setup command Preview command example #!/usr/bin/env sh # ############################################################################# # File: preview_cmd.sh # Description: Minimal example to preview files and directories # No external dependencies # Can be easily extended # Automatically exits when the NNN_FIFO closes # Prints a `tree` if directory or `head` if it's a file # # Shell: POSIX compliant # Author: Todd Yamakawa # # ToDo: # 1. Add support for more types of files # e.g. binary files, we shouldn't try to `head` those # ############################################################################# # Check FIFO NNN_FIFO=${NNN_FIFO:-$1} if [ ! -r \"$NNN_FIFO\" ]; then echo \"Unable to open \\$NNN_FIFO='$NNN_FIFO'\" | less exit 2 fi # Read selection from $NNN_FIFO while read -r selection; do clear lines=$(($(tput lines)-1)) cols=$(tput cols) # Print directory tree if [ -d \"$selection\" ]; then cd \"$selection\" || continue tree | head -n $lines | cut -c 1-\"$cols\" continue fi # Print file head if [ -f \"$selection\" ]; then head -n $lines \"$selection\" | cut -c 1-\"$cols\" continue fi # Something went wrong echo \"Unknown type: '$selection'\" done < \"$NNN_FIFO\" Setup command example To create your own setup command, you need the following steps: 1. Create a NNN_FIFO 1. Run your preview command in the background 1. Run nnn 1. Delete your NNN_FIFO Here is am example bash / zsh function. To use this example, you will need to set the preview command. For the preview window: - It uses tmux split if you're currently running in a tmux environment - tmux 3.0 is required for setting environment variables in a new pane - Otherwise it uses an xterm window nnn-preview () { # Block nesting of nnn in subshells if [ -n \"$NNNLVL\" ] && [ \"${NNNLVL:-0}\" -ge 1 ]; then echo \"nnn is already running\" return fi # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set) # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to see. # To cd on quit only on ^G, remove the \"export\" and set NNN_TMPFILE *exactly* as this: # NNN_TMPFILE=\"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd\" export NNN_TMPFILE=\"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd\" # This will create a fifo where all nnn selections will be written to NNN_FIFO=\"$(mktemp --suffix=-nnn -u)\" export NNN_FIFO (umask 077; mkfifo \"$NNN_FIFO\") # Preview command preview_cmd=\"/path/to/preview_cmd.sh\" # Use `tmux` split as preview if [ -e \"${TMUX%%,*}\" ]; then tmux split-window -e \"NNN_FIFO=$NNN_FIFO\" -dh \"$preview_cmd\" # Use `xterm` as a preview window elif (which xterm &> /dev/null); then xterm -e \"$preview_cmd\" & # Unable to find a program to use as a preview window else echo \"unable to open preview, please install tmux or xterm\" fi nnn \"$@\" rm -f \"$NNN_FIFO\" }","title":"Live previews"},{"location":"Live-previews/#live-previews","text":"A live preview is a window that renders or shows information on the hovered entry. As the cursor moves, the live preview window will automatically update. There are two ways to enable live previews in nnn : 1. using a previewer plugin, 2. using a custom wrapper/previewer script. Both use the path in NNN_FIFO to get hover updates.","title":"Live previews"},{"location":"Live-previews/#previewer-plugins","text":"","title":"Previewer plugins"},{"location":"Live-previews/#set-up-nnn_fifo","text":"Depends on how many simultaneous nnn instances you need: Single instance: export a global FIFO path in, e.g., .profile : sh export NNN_FIFO=/tmp/nnn.fifo 2. Multiple instances: use the option -a to create a new FIFO path for each instance.","title":"Set up NNN_FIFO"},{"location":"Live-previews/#plugin-usage","text":"Follow the instructions in the plugin documentation for installation and general plugin configuration. There are 2 previewer plugins for nnn , using various mechanisms to display the preview window: preview-tabbed : the preview window is a tabbed X window, files are viewed using Xembed capable programs ( mpv for audio/video, sxiv for images, zathura for PDF, xterm/urxvt/st + nuke plugin text preview for other files) preview-tui : the preview window is either a tmux pane, a new terminal window or a kitty pane (needs kitty's allow_remote_control option turned on), and files are previewed using tools like tree, less, file, mediainfo, kitty's icat, ueberzug etc. On WSL it will use QuickLook to preview files. It can also use ranger's scope.sh or pistol. Feel free to submit a pull-request for any previewer you feel is missing. To run a previewer (or any plugin in general) when you start nnn , use the option -P Notes: nnn does not watch the hovered file and update the path if it's modified while under preview. Press Esc or click on the entry to update the preview without changing the hovered entry. To close the preview-tui preview windows run the plugin again or press ^C on the preview window.","title":"Plugin usage"},{"location":"Live-previews/#custom-script-configuration-example","text":"There are two aspects to creating a live preview: 1. A preview command 2. A setup command","title":"Custom script configuration example"},{"location":"Live-previews/#preview-command-example","text":"#!/usr/bin/env sh # ############################################################################# # File: preview_cmd.sh # Description: Minimal example to preview files and directories # No external dependencies # Can be easily extended # Automatically exits when the NNN_FIFO closes # Prints a `tree` if directory or `head` if it's a file # # Shell: POSIX compliant # Author: Todd Yamakawa # # ToDo: # 1. Add support for more types of files # e.g. binary files, we shouldn't try to `head` those # ############################################################################# # Check FIFO NNN_FIFO=${NNN_FIFO:-$1} if [ ! -r \"$NNN_FIFO\" ]; then echo \"Unable to open \\$NNN_FIFO='$NNN_FIFO'\" | less exit 2 fi # Read selection from $NNN_FIFO while read -r selection; do clear lines=$(($(tput lines)-1)) cols=$(tput cols) # Print directory tree if [ -d \"$selection\" ]; then cd \"$selection\" || continue tree | head -n $lines | cut -c 1-\"$cols\" continue fi # Print file head if [ -f \"$selection\" ]; then head -n $lines \"$selection\" | cut -c 1-\"$cols\" continue fi # Something went wrong echo \"Unknown type: '$selection'\" done < \"$NNN_FIFO\"","title":"Preview command example"},{"location":"Live-previews/#setup-command-example","text":"To create your own setup command, you need the following steps: 1. Create a NNN_FIFO 1. Run your preview command in the background 1. Run nnn 1. Delete your NNN_FIFO Here is am example bash / zsh function. To use this example, you will need to set the preview command. For the preview window: - It uses tmux split if you're currently running in a tmux environment - tmux 3.0 is required for setting environment variables in a new pane - Otherwise it uses an xterm window nnn-preview () { # Block nesting of nnn in subshells if [ -n \"$NNNLVL\" ] && [ \"${NNNLVL:-0}\" -ge 1 ]; then echo \"nnn is already running\" return fi # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set) # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to see. # To cd on quit only on ^G, remove the \"export\" and set NNN_TMPFILE *exactly* as this: # NNN_TMPFILE=\"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd\" export NNN_TMPFILE=\"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd\" # This will create a fifo where all nnn selections will be written to NNN_FIFO=\"$(mktemp --suffix=-nnn -u)\" export NNN_FIFO (umask 077; mkfifo \"$NNN_FIFO\") # Preview command preview_cmd=\"/path/to/preview_cmd.sh\" # Use `tmux` split as preview if [ -e \"${TMUX%%,*}\" ]; then tmux split-window -e \"NNN_FIFO=$NNN_FIFO\" -dh \"$preview_cmd\" # Use `xterm` as a preview window elif (which xterm &> /dev/null); then xterm -e \"$preview_cmd\" & # Unable to find a program to use as a preview window else echo \"unable to open preview, please install tmux or xterm\" fi nnn \"$@\" rm -f \"$NNN_FIFO\" }","title":"Setup command example"},{"location":"Performance/","text":"Rick uses a 400TB for multiverse data, and nnn to manage it ;) Optimization techniques Significant factors quicksort with pre-filters to sort by filename, time, size etc. 0 fragmentation - no byte loss while storing file name of directory entries no copying of filename strings while sorting/filtering entries not matching a filter are moved to the lowest slots to ignore later selection handling through optimized bulk memory manipulation increased number of open file descriptors fast redraw only affected lines to avoid complete refresh all the large buffers are aligned frequently used structures optimized to facilitate SSE quad-instruction support read-ahead request (to kernels supporting the feature) fast routines to calculate and render file size shifts instead of div and mul (modern compilers do this already) optimized memory usage everywhere, buffer re-use no floating point arithmetic static routines controlled binary size O3 level compiler optimization 0-warning statically-analyzed code (forced -Wall -Wextra -Werror in CI) statically generated hash-table for guaranteed O(1) extension icon lookups Rejected options replace quicksort with a more aggressive algorithm (favor space over time complexity) the difference is not usually perceptible by human beings the random load option is also removed to emphasize this non-standard calls like statx() / getdents() / getdents64() platform-specific, nnn is POSIX-compliant man page Description begins with \"These are not the interfaces you are interested in.\" optimize handling 10K+ entries in a dir not a mass use case performance with 10K files is good enough today SSD/NVMe are the future use lazy/background/threaded load du, sort and type-to-nav program options require a stat() on all entries for correctness Selection Supporting multi-directory selection is technically challenging; nnn uses many optimizations to make it unnoticeable in most cases, but select-all (including filtered) or inversion while already having lots of files selected may take some time. When tested on Motorola Photon Q (ARM CPU with 13.54 bogomips) and a directory with 10K files, even the most complicated cases we came up with finished within 10 seconds. If the earlier selection was small or continuous, both select all (full as well as on filter) and invert were instant. Comparison GNU libc + ncursesw vanilla Stripped binary (or script) size & memory usage of nnn and some other popular FMs (which existed before nnn ) while viewing a directory with 13.5K files (0 directories), sorted by size/du: BINSZ VIRT RES SHR S %MEM COMMAND 650K 139720 91220 8460 S 1.1 ranger 1M 50496 15328 4076 S 0.2 vifm 1M 72152 12468 7336 S 0.2 mc 110K 15740 4348 2460 S 0.1 nnn -t d GNU libc + ncursesw + upx custom Results with aggressive make options, static binary and upx compression: $ make O_NORL=1 O_NOMOUSE=1 O_NOLC=1 O_NOBATCH=1 O_NOSSN=1 O_NOFIFO=1 O_QSORT=1 O_NOUG=1 static strip $ upx nnn-static $ top BINSZ VIRT RES SHR S %MEM COMMAND 582K 3136 3056 4 S 0.0 nnn-static -cdDEnQrux -t d ~/images // 11K files 582K 2428 2240 4 S 0.0 nnn-static -cdDEnQrux -t d /usr/bin // 1.5K files musl libc + netbsd-curses vanilla Results with 1950 files: $ musl-gcc -O3 -DNORL -I../netbsd-curses/libcurses -o nnn-shared src/nnn.c -Wl,-Bsymbolic-functions -L/opt/netbsd-curses -lcurses -lterminfo $ strip nnn-shared $ musl-gcc -O3 -DNORL -I../netbsd-curses/libcurses -o nnn-static src/nnn.c -Wl,-Bsymbolic-functions -L/opt/netbsd-curses -lcurses -lterminfo -static $ strip nnn-static BINSZ VIRT RES SHR S %MEM COMMAND 102K 1952 1580 868 S 0.0 nnn-shared -dn 354K 1164 824 348 S 0.0 nnn-static -dn nnn vs. ls The stripped binary size of ls is 130.7K. nnn takes less than 50% time to list a directory with 2083 files: $ time nnn /usr/bin 0.00user 0.01system 0:00.02elapsed 42%CPU (0avgtext+0avgdata 3540maxresident)k 1608inputs+0outputs (3major+325minor)pagefaults 0swaps $ export LS_COLORS='ex=00:su=00:sg=00:ca=00:' $ time ls -l /usr/bin 0.01user 0.01system 0:00.05elapsed 47%CPU (0avgtext+0avgdata 3800maxresident)k 784inputs+0outputs (0major+303minor)pagefaults 0swaps nnn roughly makes one-third the system calls made by ls (all readings taken at cold boot). $ time strace -c nnn -d /usr/bin | wc -l % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 92.56 0.014030 7 1989 newfstatat 4.95 0.000751 188 4 getdents 1.19 0.000180 3 57 1 stat 0.53 0.000081 81 1 inotify_add_watch 0.15 0.000023 2 15 close 0.11 0.000017 2 10 brk 0.10 0.000015 1 14 openat 0.08 0.000012 2 6 write 0.07 0.000010 0 23 3 ioctl 0.05 0.000007 0 15 fstat 0.05 0.000007 7 1 1 unlink 0.04 0.000006 1 8 read 0.04 0.000006 0 14 mmap 0.04 0.000006 6 1 inotify_rm_watch 0.03 0.000005 5 1 sysinfo 0.01 0.000002 2 1 lseek 0.00 0.000000 0 2 lstat 0.00 0.000000 0 10 mprotect 0.00 0.000000 0 1 munmap 0.00 0.000000 0 9 rt_sigaction 0.00 0.000000 0 9 7 access 0.00 0.000000 0 1 execve 0.00 0.000000 0 1 arch_prctl 0.00 0.000000 0 1 inotify_init1 ------ ----------- ----------- --------- --------- ---------------- 100.00 0.015158 2194 12 total 0.01user 0.05system 0:00.08elapsed 84%CPU (0avgtext+0avgdata 3524maxresident)k 4576inputs+0outputs (10major+545minor)pagefaults 0swaps 0 $ export LS_COLORS='ex=00:su=00:sg=00:ca=00:' $ time strace -c ls -l /usr/bin | wc -l % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 42.88 0.011274 6 1989 lstat 27.69 0.007281 4 1989 1989 lgetxattr 20.74 0.005454 4 1548 1548 getxattr 5.82 0.001529 3 442 readlink 1.35 0.000355 89 4 getdents 0.38 0.000100 3 31 write 0.24 0.000064 2 33 5 openat 0.18 0.000048 1 34 close 0.17 0.000046 3 17 lseek 0.16 0.000042 1 40 mmap 0.16 0.000041 4 11 munmap 0.11 0.000030 1 30 fstat 0.04 0.000011 2 5 brk 0.04 0.000011 11 1 mremap 0.03 0.000007 0 17 read 0.00 0.000000 0 20 mprotect 0.00 0.000000 0 2 rt_sigaction 0.00 0.000000 0 1 rt_sigprocmask 0.00 0.000000 0 2 2 ioctl 0.00 0.000000 0 12 12 access 0.00 0.000000 0 4 socket 0.00 0.000000 0 4 4 connect 0.00 0.000000 0 1 execve 0.00 0.000000 0 2 2 statfs 0.00 0.000000 0 1 arch_prctl 0.00 0.000000 0 1 futex 0.00 0.000000 0 1 set_tid_address 0.00 0.000000 0 1 set_robust_list 0.00 0.000000 0 1 prlimit64 ------ ----------- ----------- --------- --------- ---------------- 100.00 0.026293 6244 3562 total 0.02user 0.12system 0:00.13elapsed 106%CPU (0avgtext+0avgdata 3728maxresident)k 3752inputs+0outputs (7major+526minor)pagefaults 0swaps 1989 C vs. other languages Python3 vs. C gcc benchmarks Go vs. C gcc benchmarks Bash script vs. C gcc /* compare.c */ int main(void) { for (int i = 0; i < 1000000; i++) printf(\"hello\\n\"); return 0; } $ time -p ./compare real 1.89 user 0.20 << sys 1.25 --------------------------------- # compare.sh #!/bin/bash for (( i = 0; i < 1000000; i++ )) do echo hello done exit 0 $ time -p ./compare.sh real 5.88 user 4.66 << sys 1.21","title":"Performance"},{"location":"Performance/#optimization-techniques","text":"","title":"Optimization techniques"},{"location":"Performance/#significant-factors","text":"quicksort with pre-filters to sort by filename, time, size etc. 0 fragmentation - no byte loss while storing file name of directory entries no copying of filename strings while sorting/filtering entries not matching a filter are moved to the lowest slots to ignore later selection handling through optimized bulk memory manipulation increased number of open file descriptors fast redraw only affected lines to avoid complete refresh all the large buffers are aligned frequently used structures optimized to facilitate SSE quad-instruction support read-ahead request (to kernels supporting the feature) fast routines to calculate and render file size shifts instead of div and mul (modern compilers do this already) optimized memory usage everywhere, buffer re-use no floating point arithmetic static routines controlled binary size O3 level compiler optimization 0-warning statically-analyzed code (forced -Wall -Wextra -Werror in CI) statically generated hash-table for guaranteed O(1) extension icon lookups","title":"Significant factors"},{"location":"Performance/#rejected-options","text":"replace quicksort with a more aggressive algorithm (favor space over time complexity) the difference is not usually perceptible by human beings the random load option is also removed to emphasize this non-standard calls like statx() / getdents() / getdents64() platform-specific, nnn is POSIX-compliant man page Description begins with \"These are not the interfaces you are interested in.\" optimize handling 10K+ entries in a dir not a mass use case performance with 10K files is good enough today SSD/NVMe are the future use lazy/background/threaded load du, sort and type-to-nav program options require a stat() on all entries for correctness","title":"Rejected options"},{"location":"Performance/#selection","text":"Supporting multi-directory selection is technically challenging; nnn uses many optimizations to make it unnoticeable in most cases, but select-all (including filtered) or inversion while already having lots of files selected may take some time. When tested on Motorola Photon Q (ARM CPU with 13.54 bogomips) and a directory with 10K files, even the most complicated cases we came up with finished within 10 seconds. If the earlier selection was small or continuous, both select all (full as well as on filter) and invert were instant.","title":"Selection"},{"location":"Performance/#comparison","text":"","title":"Comparison"},{"location":"Performance/#gnu-libc-ncursesw-vanilla","text":"Stripped binary (or script) size & memory usage of nnn and some other popular FMs (which existed before nnn ) while viewing a directory with 13.5K files (0 directories), sorted by size/du: BINSZ VIRT RES SHR S %MEM COMMAND 650K 139720 91220 8460 S 1.1 ranger 1M 50496 15328 4076 S 0.2 vifm 1M 72152 12468 7336 S 0.2 mc 110K 15740 4348 2460 S 0.1 nnn -t d","title":"GNU libc + ncursesw vanilla"},{"location":"Performance/#gnu-libc-ncursesw-upx-custom","text":"Results with aggressive make options, static binary and upx compression: $ make O_NORL=1 O_NOMOUSE=1 O_NOLC=1 O_NOBATCH=1 O_NOSSN=1 O_NOFIFO=1 O_QSORT=1 O_NOUG=1 static strip $ upx nnn-static $ top BINSZ VIRT RES SHR S %MEM COMMAND 582K 3136 3056 4 S 0.0 nnn-static -cdDEnQrux -t d ~/images // 11K files 582K 2428 2240 4 S 0.0 nnn-static -cdDEnQrux -t d /usr/bin // 1.5K files","title":"GNU libc + ncursesw + upx custom"},{"location":"Performance/#musl-libc-netbsd-curses-vanilla","text":"Results with 1950 files: $ musl-gcc -O3 -DNORL -I../netbsd-curses/libcurses -o nnn-shared src/nnn.c -Wl,-Bsymbolic-functions -L/opt/netbsd-curses -lcurses -lterminfo $ strip nnn-shared $ musl-gcc -O3 -DNORL -I../netbsd-curses/libcurses -o nnn-static src/nnn.c -Wl,-Bsymbolic-functions -L/opt/netbsd-curses -lcurses -lterminfo -static $ strip nnn-static BINSZ VIRT RES SHR S %MEM COMMAND 102K 1952 1580 868 S 0.0 nnn-shared -dn 354K 1164 824 348 S 0.0 nnn-static -dn","title":"musl libc + netbsd-curses vanilla"},{"location":"Performance/#nnn-vs-ls","text":"The stripped binary size of ls is 130.7K. nnn takes less than 50% time to list a directory with 2083 files: $ time nnn /usr/bin 0.00user 0.01system 0:00.02elapsed 42%CPU (0avgtext+0avgdata 3540maxresident)k 1608inputs+0outputs (3major+325minor)pagefaults 0swaps $ export LS_COLORS='ex=00:su=00:sg=00:ca=00:' $ time ls -l /usr/bin 0.01user 0.01system 0:00.05elapsed 47%CPU (0avgtext+0avgdata 3800maxresident)k 784inputs+0outputs (0major+303minor)pagefaults 0swaps nnn roughly makes one-third the system calls made by ls (all readings taken at cold boot). $ time strace -c nnn -d /usr/bin | wc -l % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 92.56 0.014030 7 1989 newfstatat 4.95 0.000751 188 4 getdents 1.19 0.000180 3 57 1 stat 0.53 0.000081 81 1 inotify_add_watch 0.15 0.000023 2 15 close 0.11 0.000017 2 10 brk 0.10 0.000015 1 14 openat 0.08 0.000012 2 6 write 0.07 0.000010 0 23 3 ioctl 0.05 0.000007 0 15 fstat 0.05 0.000007 7 1 1 unlink 0.04 0.000006 1 8 read 0.04 0.000006 0 14 mmap 0.04 0.000006 6 1 inotify_rm_watch 0.03 0.000005 5 1 sysinfo 0.01 0.000002 2 1 lseek 0.00 0.000000 0 2 lstat 0.00 0.000000 0 10 mprotect 0.00 0.000000 0 1 munmap 0.00 0.000000 0 9 rt_sigaction 0.00 0.000000 0 9 7 access 0.00 0.000000 0 1 execve 0.00 0.000000 0 1 arch_prctl 0.00 0.000000 0 1 inotify_init1 ------ ----------- ----------- --------- --------- ---------------- 100.00 0.015158 2194 12 total 0.01user 0.05system 0:00.08elapsed 84%CPU (0avgtext+0avgdata 3524maxresident)k 4576inputs+0outputs (10major+545minor)pagefaults 0swaps 0 $ export LS_COLORS='ex=00:su=00:sg=00:ca=00:' $ time strace -c ls -l /usr/bin | wc -l % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 42.88 0.011274 6 1989 lstat 27.69 0.007281 4 1989 1989 lgetxattr 20.74 0.005454 4 1548 1548 getxattr 5.82 0.001529 3 442 readlink 1.35 0.000355 89 4 getdents 0.38 0.000100 3 31 write 0.24 0.000064 2 33 5 openat 0.18 0.000048 1 34 close 0.17 0.000046 3 17 lseek 0.16 0.000042 1 40 mmap 0.16 0.000041 4 11 munmap 0.11 0.000030 1 30 fstat 0.04 0.000011 2 5 brk 0.04 0.000011 11 1 mremap 0.03 0.000007 0 17 read 0.00 0.000000 0 20 mprotect 0.00 0.000000 0 2 rt_sigaction 0.00 0.000000 0 1 rt_sigprocmask 0.00 0.000000 0 2 2 ioctl 0.00 0.000000 0 12 12 access 0.00 0.000000 0 4 socket 0.00 0.000000 0 4 4 connect 0.00 0.000000 0 1 execve 0.00 0.000000 0 2 2 statfs 0.00 0.000000 0 1 arch_prctl 0.00 0.000000 0 1 futex 0.00 0.000000 0 1 set_tid_address 0.00 0.000000 0 1 set_robust_list 0.00 0.000000 0 1 prlimit64 ------ ----------- ----------- --------- --------- ---------------- 100.00 0.026293 6244 3562 total 0.02user 0.12system 0:00.13elapsed 106%CPU (0avgtext+0avgdata 3728maxresident)k 3752inputs+0outputs (7major+526minor)pagefaults 0swaps 1989","title":"nnn vs. ls"},{"location":"Performance/#c-vs-other-languages","text":"Python3 vs. C gcc benchmarks Go vs. C gcc benchmarks Bash script vs. C gcc /* compare.c */ int main(void) { for (int i = 0; i < 1000000; i++) printf(\"hello\\n\"); return 0; } $ time -p ./compare real 1.89 user 0.20 << sys 1.25 --------------------------------- # compare.sh #!/bin/bash for (( i = 0; i < 1000000; i++ )) do echo hello done exit 0 $ time -p ./compare.sh real 5.88 user 4.66 << sys 1.21","title":"C vs. other languages"},{"location":"Power-toys/","text":"1. Pin a frequently visited directory If you need to repeat a directory repeatedly, you can pin it during a session using the shortcut , . When you have a pinned directory, pressing the bookmark key ( b or \\^/ ) will list , as the first key: bookmark keys: , w t m i d v n Press , after the bookmark key to visit the pinned directory. You can pin one directory at a time. 2. Filter filtered entries Filtering is the nnn way to search files in a directory. Did you know it's possible to apply a new filter on already filtered results? Go to a directory Press filter key ( / ) and type a filter Press Esc or Up or Down (the filter will disappear from the status bar) Press filter key again Type a new filter to find matches in the earlier filtered results 3. Mount and modify archives nnn provides you an option to mount archives when you press Enter on an archive. Press m to mount the archive and nnn will mount the archive and take you to the mountpoint of the mounted archive. Add some files in the mounted archive, go back to the nnn config directory ( ${XDG_CONFIG_HOME:-$HOME/.config}/nnn ) and hover on the archive mount point. Press u to unmount the archive and generate a package with the new files. The original package is saved with the extension .orig . 4. Hovered file path in $nnn nnn exports the hovered file path as $nnn when you press the command prompt or spawn shell shortcuts. You can use the variable to run a command on the hovered file: ls -l \"$nnn\" 5. Preview and edit files You can easily edit and view the changes to Markdown, man pages etc. in nnn . For this you need to use a CLI file opener. You can use plugin nuke , a customizable example opener to specify your preferred apps. To set nuke as the default opener: export NNN_OPENER=/absolute/path/to/nuke and start nnn as nnn -c . The option -c indicates to nnn that the opener is a CLI-only opener (note that nuke can open files in GUI apps as well; please read the documentation in the file). Now when you press Enter on a Markdown file nuke will try to open it in glow or a man page in man . To edit the file in $VISUAL (or $EDITOR , or vi ), hover on the file and press e . 6. Redirect selection to a command nnn allows users to select a file at a time, a range of files or all files in a directory together. Once you are done selecting, you can run a command on all the files by using the selection file as input: xargs -0 ls -l < \"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection\" If you are using this frequently, have a shortcut in your rc file: export sel=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection and simplify the command as: xargs -0 ls -l < $sel Many plugins work this way! 7. Prompt shortcuts Even if you compile nnn without libreadline, the native input prompts support several readline-like keys - \\^A , \\^B , \\^D , \\^E , \\^F , \\^K , \\^U , \\^W . 8. Run custom commands with hotkeys nnn allows you to run custom commands like plugins. For example, to open a log file in lnav , add a plugin-ish key:command pair in your NNN_PLUG environment variable: export NNN_PLUG='l:-_lnav $nnn*' Press ; (select plugin shortcut) followed by l to open a log file in lnav . You can control several aspects while running commands and plugins (e.g., skip dir refresh after running a plugin, skip user confirmation after running a command) and even run GUI apps as a plugin. Visit plugins for more details. Note: lnav was taken as an example, you can easily open log files in lnav by editing the customizable sample opener nuke .","title":"Power toys"},{"location":"Power-toys/#1-pin-a-frequently-visited-directory","text":"If you need to repeat a directory repeatedly, you can pin it during a session using the shortcut , . When you have a pinned directory, pressing the bookmark key ( b or \\^/ ) will list , as the first key: bookmark keys: , w t m i d v n Press , after the bookmark key to visit the pinned directory. You can pin one directory at a time.","title":"1. Pin a frequently visited directory"},{"location":"Power-toys/#2-filter-filtered-entries","text":"Filtering is the nnn way to search files in a directory. Did you know it's possible to apply a new filter on already filtered results? Go to a directory Press filter key ( / ) and type a filter Press Esc or Up or Down (the filter will disappear from the status bar) Press filter key again Type a new filter to find matches in the earlier filtered results","title":"2. Filter filtered entries"},{"location":"Power-toys/#3-mount-and-modify-archives","text":"nnn provides you an option to mount archives when you press Enter on an archive. Press m to mount the archive and nnn will mount the archive and take you to the mountpoint of the mounted archive. Add some files in the mounted archive, go back to the nnn config directory ( ${XDG_CONFIG_HOME:-$HOME/.config}/nnn ) and hover on the archive mount point. Press u to unmount the archive and generate a package with the new files. The original package is saved with the extension .orig .","title":"3. Mount and modify archives"},{"location":"Power-toys/#4-hovered-file-path-in-nnn","text":"nnn exports the hovered file path as $nnn when you press the command prompt or spawn shell shortcuts. You can use the variable to run a command on the hovered file: ls -l \"$nnn\"","title":"4. Hovered file path in $nnn"},{"location":"Power-toys/#5-preview-and-edit-files","text":"You can easily edit and view the changes to Markdown, man pages etc. in nnn . For this you need to use a CLI file opener. You can use plugin nuke , a customizable example opener to specify your preferred apps. To set nuke as the default opener: export NNN_OPENER=/absolute/path/to/nuke and start nnn as nnn -c . The option -c indicates to nnn that the opener is a CLI-only opener (note that nuke can open files in GUI apps as well; please read the documentation in the file). Now when you press Enter on a Markdown file nuke will try to open it in glow or a man page in man . To edit the file in $VISUAL (or $EDITOR , or vi ), hover on the file and press e .","title":"5. Preview and edit files"},{"location":"Power-toys/#6-redirect-selection-to-a-command","text":"nnn allows users to select a file at a time, a range of files or all files in a directory together. Once you are done selecting, you can run a command on all the files by using the selection file as input: xargs -0 ls -l < \"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection\" If you are using this frequently, have a shortcut in your rc file: export sel=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection and simplify the command as: xargs -0 ls -l < $sel Many plugins work this way!","title":"6. Redirect selection to a command"},{"location":"Power-toys/#7-prompt-shortcuts","text":"Even if you compile nnn without libreadline, the native input prompts support several readline-like keys - \\^A , \\^B , \\^D , \\^E , \\^F , \\^K , \\^U , \\^W .","title":"7. Prompt shortcuts"},{"location":"Power-toys/#8-run-custom-commands-with-hotkeys","text":"nnn allows you to run custom commands like plugins. For example, to open a log file in lnav , add a plugin-ish key:command pair in your NNN_PLUG environment variable: export NNN_PLUG='l:-_lnav $nnn*' Press ; (select plugin shortcut) followed by l to open a log file in lnav . You can control several aspects while running commands and plugins (e.g., skip dir refresh after running a plugin, skip user confirmation after running a command) and even run GUI apps as a plugin. Visit plugins for more details. Note: lnav was taken as an example, you can easily open log files in lnav by editing the customizable sample opener nuke .","title":"8. Run custom commands with hotkeys"},{"location":"Themes/","text":"Nord Tested with nord-dircolors and nord-kitty BLK=\"0B\" CHR=\"0B\" DIR=\"04\" EXE=\"06\" REG=\"00\" HARDLINK=\"06\" SYMLINK=\"06\" MISSING=\"00\" ORPHAN=\"09\" FIFO=\"06\" SOCK=\"0B\" OTHER=\"06\" export NNN_FCOLORS=\"$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER\" OneDark Tested with One Dark dircolors and One for GNOME Terminal BLK=\"04\" CHR=\"04\" DIR=\"04\" EXE=\"00\" REG=\"00\" HARDLINK=\"00\" SYMLINK=\"06\" MISSING=\"00\" ORPHAN=\"01\" FIFO=\"0F\" SOCK=\"0F\" OTHER=\"02\" export NNN_FCOLORS=\"$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER\"","title":"Nord"},{"location":"Themes/#nord","text":"Tested with nord-dircolors and nord-kitty BLK=\"0B\" CHR=\"0B\" DIR=\"04\" EXE=\"06\" REG=\"00\" HARDLINK=\"06\" SYMLINK=\"06\" MISSING=\"00\" ORPHAN=\"09\" FIFO=\"06\" SOCK=\"0B\" OTHER=\"06\" export NNN_FCOLORS=\"$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER\"","title":"Nord"},{"location":"Themes/#onedark","text":"Tested with One Dark dircolors and One for GNOME Terminal BLK=\"04\" CHR=\"04\" DIR=\"04\" EXE=\"00\" REG=\"00\" HARDLINK=\"00\" SYMLINK=\"06\" MISSING=\"00\" ORPHAN=\"01\" FIFO=\"0F\" SOCK=\"0F\" OTHER=\"02\" export NNN_FCOLORS=\"$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER\"","title":"OneDark"},{"location":"Troubleshooting/","text":"Wrong file opener If your text files are opening in the browser, check out the program option -e . Use the following command to set default applications for mimetypes when using xdg-open as opener: xdg-mime default application mimetype(s) e.g. xdg-mime default sxiv.desktop image/jpeg image/png If your system uses mimeopen , you may have to install perl-file-mimeinfo . More on default applications and openers . Broken file names If unicode characters are not showing correctly, please check the following: Ensure locale support is not compiled out Check locale settings (see https://github.com/jarun/nnn/issues/1145) Confirm the DE isn't blocking it (see https://github.com/jarun/nnn/issues/1139) Tmux configuration Keyboard nnn may not handle keypresses correctly when used with tmux (see issue #104 for more details). Set TERM=xterm-256color to address it. By default tmux advertises 8-color support. To show icons in tmux add the following to tmux configuration file: set -g default-terminal \"screen-256color\" If compiled with netbsd-curses set it to: set -g default-terminal \"xterm-256color\" If the Esc key isn't working as expected, add the following in .tmux.conf : set -g escape-time 0 To start nnn within tmux use a shell function: n () { if [ -n \"$TMUX\" ]; then nnn -a $@ else tmux -u new-session nnn -a $@ fi } New window/pane using cwd nnn does not set the terminal's cwd while navigating. So the following may not work: tmux new-window -c \"#{pane_current_path}\" One possible workaround is to extract the path from the cwd command that nnn uses: lsof -c nnn | grep cwd To get the path on the last executed cwd command: lsof -w -c nnn | grep cwd | tail -n 1 | awk '{print $9}' A script example tmux_split_curdir.sh : #!/usr/bin/env sh cwd= cc=$(tmux display -p '#{pane_current_command}') if [ $cc == \"nnn\" ] ; then cwd=$(lsof -w -c nnn | grep cwd | tail -n 1 | awk '{print $9}') else cwd=$(tmux display -p '#{pane_current_path}') fi tmux split-window -c \"$cwd\" Adding this script to your tmux path allows it to be run with run-shell : bind -n KEYS run-shell \"tmux_split_curdir.sh\" Broken control key If a Ctrl-key combination is not working, check if it's masked due to terminal line settings: stty -a If that's the case, clear ( undef ) the setting. E.g.: stty start undef stty stop undef stty lwrap undef stty lnext undef You can do this when starting nnn . See the quitcd scripts . Help not showing If your PAGER is less , remove the option -F (automatically exit if the entire file can be displayed on the first screen). There are other screens which use less as well. Note that the less command takes its default parameters from the $LESS environment variable, so you may need to remove -F from your shell initialization. Default batch rename limits TL;DR: If you need a full-featured batch-renamer, install plugins. nnn auto-detects and invokes the internal plugin .nmv (a bash script) which is feature-complete. The in-built batch-renamer implemented in nnn is a very simplified one. It's single-pass - reads the name/path of files iteratively (from a list of source files) and renames/moves them (as specified in the corresponding line number in a list of renamed/destination files). It doesn't handle deletions or perform any pre-parsing to account for rename loops, swaps, replaces, etc. Note that the instance of the editor must wait for the editing to complete and the changes to be saved (e.g. use -w with VSCode). Misaligned size column We have seen this issue with WSL and Putty where sometimes repeated space characters are not printed correctly. To fix this: export TERM=rxvt-unicode // OR export TERM=rxvt-unicode-256color Detailed explanation . Can't list within list List view is a temporary view of symlinks. To avoid remembering the temporary paths to all listed views the current path is removed when the next list is loaded. This is also inline with the fact that find doesn't look within symlinks to directories. If you need to search the entries within a loaded list, visit the original directory and run the refined search. BSD terminal issue TL;DR: On releases previous to v2.7, use the keybind K to toggle selection if you are having issues with ^Y . On OpenBSD & FreeBSD (and probably on macOS as well) stty maps ^Y to DSUSP by default. This means that typing ^Y will suspend nnn as if you typed ^Z (you can bring nnn back to the foreground by issuing fg ) instead of entering multi-selection mode. You can check this with stty -a . If it includes the text dsusp = ^Y , issuing stty dsusp undef will disable this DSUSP and let nnn receive the ^Y instead. Amethyst WM There's a known issue with Amethyst window manager on macOS - redraws do not work correctly and the screen breaks. See issue #521 for more details. Running inside docker containers When run inside docker container nnn exits instantly. The solution is to create the container with the flag --init . Icons not working properly Ensure that the primary font of your terminal is set to a suitable one (e.g when using O_NERD , primary font should be a nerd font). Also ensure that your system's locale is set up properly. When using ST some icons may appear truncated. A patch fixing this issue is available in a reddit thread here . Wrong/Bad sorting order ( #1652 ) nnn respects the environmental LC_COLLATE value - the effect of this depends on your libc . Try setting it to something standard/well-supported such as \"C\" or \"C.UTF8\" and see if that fixes the issue or not.","title":"Troubleshooting"},{"location":"Troubleshooting/#wrong-file-opener","text":"If your text files are opening in the browser, check out the program option -e . Use the following command to set default applications for mimetypes when using xdg-open as opener: xdg-mime default application mimetype(s) e.g. xdg-mime default sxiv.desktop image/jpeg image/png If your system uses mimeopen , you may have to install perl-file-mimeinfo . More on default applications and openers .","title":"Wrong file opener"},{"location":"Troubleshooting/#broken-file-names","text":"If unicode characters are not showing correctly, please check the following: Ensure locale support is not compiled out Check locale settings (see https://github.com/jarun/nnn/issues/1145) Confirm the DE isn't blocking it (see https://github.com/jarun/nnn/issues/1139)","title":"Broken file names"},{"location":"Troubleshooting/#tmux-configuration","text":"","title":"Tmux configuration"},{"location":"Troubleshooting/#keyboard","text":"nnn may not handle keypresses correctly when used with tmux (see issue #104 for more details). Set TERM=xterm-256color to address it. By default tmux advertises 8-color support. To show icons in tmux add the following to tmux configuration file: set -g default-terminal \"screen-256color\" If compiled with netbsd-curses set it to: set -g default-terminal \"xterm-256color\" If the Esc key isn't working as expected, add the following in .tmux.conf : set -g escape-time 0 To start nnn within tmux use a shell function: n () { if [ -n \"$TMUX\" ]; then nnn -a $@ else tmux -u new-session nnn -a $@ fi }","title":"Keyboard"},{"location":"Troubleshooting/#new-windowpane-using-cwd","text":"nnn does not set the terminal's cwd while navigating. So the following may not work: tmux new-window -c \"#{pane_current_path}\" One possible workaround is to extract the path from the cwd command that nnn uses: lsof -c nnn | grep cwd To get the path on the last executed cwd command: lsof -w -c nnn | grep cwd | tail -n 1 | awk '{print $9}' A script example tmux_split_curdir.sh : #!/usr/bin/env sh cwd= cc=$(tmux display -p '#{pane_current_command}') if [ $cc == \"nnn\" ] ; then cwd=$(lsof -w -c nnn | grep cwd | tail -n 1 | awk '{print $9}') else cwd=$(tmux display -p '#{pane_current_path}') fi tmux split-window -c \"$cwd\" Adding this script to your tmux path allows it to be run with run-shell : bind -n KEYS run-shell \"tmux_split_curdir.sh\"","title":"New window/pane using cwd"},{"location":"Troubleshooting/#broken-control-key","text":"If a Ctrl-key combination is not working, check if it's masked due to terminal line settings: stty -a If that's the case, clear ( undef ) the setting. E.g.: stty start undef stty stop undef stty lwrap undef stty lnext undef You can do this when starting nnn . See the quitcd scripts .","title":"Broken control key"},{"location":"Troubleshooting/#help-not-showing","text":"If your PAGER is less , remove the option -F (automatically exit if the entire file can be displayed on the first screen). There are other screens which use less as well. Note that the less command takes its default parameters from the $LESS environment variable, so you may need to remove -F from your shell initialization.","title":"Help not showing"},{"location":"Troubleshooting/#default-batch-rename-limits","text":"TL;DR: If you need a full-featured batch-renamer, install plugins. nnn auto-detects and invokes the internal plugin .nmv (a bash script) which is feature-complete. The in-built batch-renamer implemented in nnn is a very simplified one. It's single-pass - reads the name/path of files iteratively (from a list of source files) and renames/moves them (as specified in the corresponding line number in a list of renamed/destination files). It doesn't handle deletions or perform any pre-parsing to account for rename loops, swaps, replaces, etc. Note that the instance of the editor must wait for the editing to complete and the changes to be saved (e.g. use -w with VSCode).","title":"Default batch rename limits"},{"location":"Troubleshooting/#misaligned-size-column","text":"We have seen this issue with WSL and Putty where sometimes repeated space characters are not printed correctly. To fix this: export TERM=rxvt-unicode // OR export TERM=rxvt-unicode-256color Detailed explanation .","title":"Misaligned size column"},{"location":"Troubleshooting/#cant-list-within-list","text":"List view is a temporary view of symlinks. To avoid remembering the temporary paths to all listed views the current path is removed when the next list is loaded. This is also inline with the fact that find doesn't look within symlinks to directories. If you need to search the entries within a loaded list, visit the original directory and run the refined search.","title":"Can't list within list"},{"location":"Troubleshooting/#bsd-terminal-issue","text":"TL;DR: On releases previous to v2.7, use the keybind K to toggle selection if you are having issues with ^Y . On OpenBSD & FreeBSD (and probably on macOS as well) stty maps ^Y to DSUSP by default. This means that typing ^Y will suspend nnn as if you typed ^Z (you can bring nnn back to the foreground by issuing fg ) instead of entering multi-selection mode. You can check this with stty -a . If it includes the text dsusp = ^Y , issuing stty dsusp undef will disable this DSUSP and let nnn receive the ^Y instead.","title":"BSD terminal issue"},{"location":"Troubleshooting/#amethyst-wm","text":"There's a known issue with Amethyst window manager on macOS - redraws do not work correctly and the screen breaks. See issue #521 for more details.","title":"Amethyst WM"},{"location":"Troubleshooting/#running-inside-docker-containers","text":"When run inside docker container nnn exits instantly. The solution is to create the container with the flag --init .","title":"Running inside docker containers"},{"location":"Troubleshooting/#icons-not-working-properly","text":"Ensure that the primary font of your terminal is set to a suitable one (e.g when using O_NERD , primary font should be a nerd font). Also ensure that your system's locale is set up properly. When using ST some icons may appear truncated. A patch fixing this issue is available in a reddit thread here .","title":"Icons not working properly"},{"location":"Troubleshooting/#wrongbad-sorting-order-1652","text":"nnn respects the environmental LC_COLLATE value - the effect of this depends on your libc . Try setting it to something standard/well-supported such as \"C\" or \"C.UTF8\" and see if that fixes the issue or not.","title":"Wrong/Bad sorting order (#1652)"},{"location":"Usage/","text":"Dependencies A curses library with wide char support (e.g. ncursesw), libc and libreadline (optional). Utility deps Install? Operation xdg-open (Linux)/open(1) (macOS)/cygstart (Cygwin)/open (Haiku) base default opener file, coreutils (cp, mv, rm), xargs, sed base file type, copy, (re)move GNU sed (non-Linux) required copy, (re)move tar, (un)zip [bsdtar/atool/(un)rar for more formats] base manage archives archivemount, fusermount(3)/umount (macOS) optional (un)mount archives sshfs/ rclone , fusermount(3)/umount (macOS) optional (un)mount remotes gio trash/trash-cli optional trash [default: rm -rf ] vlock (Linux)/bashlock (macOS)/lock(1) (BSD)/peaclock (Haiku) optional lock terminal advcpmv (Linux) ( integration ) optional copy, move progress $VISUAL / $EDITOR , $PAGER , $SHELL optional fallback vi, less, sh Installation TL;DR: Can't install packages? Get the statically linked binary from the latest release . Release packages Officially maintained RPM distribution + an Arch package is available in Openbuildservice Packages for Debian and Ubuntu and a static binary are generated with the latest release . From a package manager Packaging status ( expand ) Unlisted packagers: \u25cf CentOS ( yum --enablerepo=epel install nnn ) \u25cf iSH ( apk add nnn ) \u25cf Milis Linux ( mps kur nnn ) \u25cf NuTyX ( cards install nnn ) \u25cf Sailfish OS ( devel-su zypper install nnn ) \u25cf Source Mage ( cast nnn ) From source Download the latest release or clone this repo ( risky ), install deps and compile. On Ubuntu 18.04: sudo apt-get install pkg-config libncursesw5-dev libreadline-dev sudo make strip install PREFIX is supported, in case you want to install to a different location. See the developer guides for source verification, platform-specific notes and other tips. Shell completion Completion scripts for Bash, Fish and Zsh are available . Refer to your shell's manual to install. Plugins Visit the plugins page. Configuration The new colorscheme (config NNN_FCOLORS) - a feast for your eyes! There is no config file. Associated files are at ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/ Use plugin nbak to backup configuration. nnn supports a few optional (set if you need) environment variables. Example export Description NNN_OPTS=\"cEnrx\" binary options to nnn NNN_OPENER=\"/path/to/custom/opener\" custom opener (see plugin nuke ) NNN_BMS=\"d:$HOME/Documents;D:$HOME/Docs archive/\" 1 key-bookmark pairs NNN_PLUG='o:fzopen;m:nmount;x:!chmod +x $nnn' 1 key-plugin (or cmd) pairs NNN_ORDER='t:/home/user/Downloads;S:/usr/bin' 2 directory-specific ordering NNN_ARCHIVE=\"\\\\.(7z\\|bz2\\|gz\\|tar\\|tgz\\|zip)$\" 3 archives [default: bzip2, (g)zip, tar] NNN_ARCHMNT='fuse-archive' archive mounter [default: archivemount] NNN_COLORS='1234' (/ '#0a1b2c3d' / '#0a1b2c3d;1234' ) 4 6 context colors [default: '4444' (blue)] NNN_FCOLORS='c1e2272e006033f7c6d6abc4' 5 file-specific colors NNN_SSHFS='sshfs -o reconnect,idmap=user' 6 custom SSHFS cmd NNN_RCLONE='rclone mount --read-only' 6 custom rclone cmd NNN_TRASH=n ( n=1: trash-cli, n=2: gio trash ) use desktop Trash [default: rm -rf] NNN_SEL='/tmp/.sel' custom selection file NNN_FIFO='/tmp/nnn.fifo' 7 FIFO to write hovered file path to NNN_LOCKER='saidar -c' terminal locker NNN_TMPFILE='/tmp/.lastd' always cd on quit NNN_HELP='pwy paris' run cmd, show o/p on help page NNN_MCLICK='^R' (/ 'm' ) 8 key emulated by middle mouse click NO_COLOR=1 9 disable ANSI color output Key-bookmark and key-plugin pairs are listed in the help and config screen (key ? ). Sort keys can be a / d / e / r / s / t / v (see program option -T ). Capitalize to reverse (except r ). Path must be absolute. Timestamps for entries created/modified within 5 minutes are shown in reverse. 3. With atool or bsdtar and (un)rar installed you can have: export NNN_ARCHIVE=\"\\\\.(7z|a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rar|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)$\" bsdtar can extract, list and archivemount can mount ISO 9660 cdrom images (extn: iso). 4. Understands 8 color, xterm 256 color or both. Hexadecimal numbers representing xterm 256 colors, note that the width has to be 2, e.g. \"5\" becomes \"05\" 8 colors numbers: 0-black, 1-red, 2-green, 3-yellow, 4-blue (default), 5-magenta, 6-cyan, 7-white. To specify xterm 256 color hex numbers, prefix with # (2 symbols per context). To specify both, export 256 color hex numbers followed by 8 color number as fallback, separated by ; . Specify file-specific colors in xterm 256 color hex numbers (2 hex symbols per color). Order is strict, use 00 to omit/use default terminal color. Defaults: Order Hex Color Block device c1 DarkSeaGreen1 Char device e2 Yellow1 Directory 27 DeepSkyBlue1 Executable 2e Green1 Regular 00 Normal Hard link 60 Plum4 Symbolic link 33 Cyan1 Missing OR file details f7 Grey62 Orphaned symbolic link c6 DeepPink1 FIFO d6 Orange1 Socket ab MediumOrchid1 Unknown OR 0B regular/exe c4 Red1 If the terminal supports xterm 256 colors or more, file-specific colors will be rendered. To force the 8-color scheme use option -C . If xterm 256 colors aren't supported, 8-color scheme will be used. More Themes . nnn v2.9 and below have NNN_CONTEXT_COLORS , NNN_SSHFS_OPTS and NNN_RCLONE_OPTS . If the FIFO file doesn't exist it will be created, but it will never be removed. Only the first character is considered if not a Ctrl-key combo. Overridden by NNN_COLORS . Program options usage: nnn [OPTIONS] [PATH] The unorthodox terminal file manager. positional args: PATH start dir/file [default: .] optional args: -a auto NNN_FIFO -A no dir auto-enter during filter -b key open bookmark key (trumps -s/S) -B use bsdtar for archives -c cli-only NNN_OPENER (trumps -e) -C 8-color scheme -d detail mode -D dirs in context color -e text in $VISUAL/$EDITOR/vi -E internal edits in EDITOR -f use readline history file -F val fifo mode [0:preview 1:explore] -g regex filters -H show hidden files -i show current file info -J no auto-advance on selection -K detect key collision -l val set scroll lines -n type-to-nav mode -N use native prompt -o open files only on Enter -p file selection file [-:stdout] -P key run plugin key -Q no quit confirmation -r use advcpmv patched cp, mv -R no rollover at edges -s name load session by name -S persistent session -t secs timeout to lock -T key sort order [a/d/e/r/s/t/v] -u use selection (no prompt) -U show user and group -V show version -x notis, selection sync, xterm title -0 use null separator in picker mode -h show help Notes: nnn opens the current working directory if PATH is not specified. If PATH is specified and it exists, nnn will open it. If the PATH doesn't exist and ends with a / , nnn will attempt to create the directory tree and open it. Otherwise, PATH is considered a path to a regular file and nnn attempts to create the complete directory tree to the file, open the parent directory and prompt to create the new file in it with the base filename. The keys for option -T are a pparent disk usage / d isk usage / e xtension / r everse / s ize / t ime / v ersion. Capitalize to reverse (except r ). Keyboard, mouse The list below is from master . Press ? in nnn to see the keybinds in your installed version. NAVIGATION Up k Up PgUp ^U Page up Dn j Down PgDn ^D Page down Lt h Parent ~ ` @ - ~, /, start, prev Ret Rt l Open ' First file/match g ^A Top J Jump to entry/offset G ^E End ^J Toggle auto-advance on open B (,) Book(mark) b ^/ Select bookmark 1-4 Context (Sh)Tab Cycle/new context 2Esc ^Q Quit ^y Next young ^G QuitCD Q Pick/err, quit q Quit context FILTER & PROMPT / Filter ^N Toggle type-to-nav Esc Exit prompt ^L Toggle last filter . Toggle hidden Alt+Esc Unfilter, quit context FILES o ^O Open with... n Create new/link f ^F File details d Detail mode toggle ^R Rename/dup r Batch rename z Archive e Edit file * Toggle exe > Export list Space + (Un)select m-m Select range/clear a Select all A Invert sel p ^P Copy here w ^W Cp/mv sel as v ^V Move here E Edit sel list x ^X Delete or trash S Listed sel size X Delete (rm -rf) Esc Send to FIFO MISC Alt ; Select plugin = Launch app ! ^] Shell ] Cmd prompt c Connect remote u Unmount remote/archive t ^T Sort toggles s Manage session T Set time type 0 Lock ^L Redraw ? Help, conf Notes: Shift-TAB attempts to create a new context, and reverse cycles when all contexts are active. B adds a new bookmark in the bookmarks dir, , marks a location in-memory At the filter prompt, ^L toggles last filter and unfilter. If no last filter, exits filter mode and redraws. Q quits with EXIT_FAILURE if no selection, else prints the selection to stdout and quits with EXIT_SUCCESS . S shows the total size of non-filtered selected files listed in a directory. For directories, only the size of the directory is added by default. To add the size of the contents of a directory, switch to du mode. Help & settings, file details and archive listing are shown in the $PAGER . To change shortcuts modify key bindings in nnn.h and compile. Option -K detects collisions. Repeat sort order key ^T to apply sort by time, size and default in the same order. There are keymap patches available for the Colemak and Colemak-DH keyboard layouts in nnn's User Patch Framework . Graphical map ( L\u00e9o Villeveygoux, based on Qwerty.svg ) SVG version Mouse Mouse click Function Left single on context number Visit context Left single on current path Visit parent Left single/double on last 2 rows Toggle type-to-nav Left single Select context or entry Left double Select context or open entry Right single Add entry to selection Middle single User configured with NNN_MCLICK Broken control keybind Some control keybinds may not work if they are mapped by stty . To confirm, run stty -a and look for keybind conflicts. Some common ones are: ^Q (start), ^S (stop), ^V (lnext). To remove the stty mapping: stty start undef stty stop undef stty lnext undef Symbols File indicators Listing 1 Listing 2 | Indicator | File type | |:---:| --- | | `/` | Directory | | `*` | Executable | | `\\|` | Fifo | | `=` | Socket | | Indicator | File type | |:---:| --- | | `@` | Symlink to file | | `b` | Block device | | `c` | Character device | | `?` | Unknown | Note: All links (hard/sym) are dimmed. Status bar symbols Symbol Meaning x/y current file num / total + / * ( n ) selection mode on/range selection on (buffered selected count) [reversed] H hidden files are listed M modification time sorted A access time sorted C change time sorted S size sorted E file extension sorted V version sorted R reverse sorted du disk usage au apparent disk usage -> symbolic link target n-n num hard links - inode number File size The minimum file size unit is byte (B). The rest are K, M, G, T, P, E, Z, Y (powers of 1024), same as the default units in ls . Help nnn -h man nnn To lookup keyboard shortcuts at runtime, press ? . user1: How it compares to Midnight Commander ? user2: It works in daylight too. - from a reddit conversation","title":"Usage"},{"location":"Usage/#dependencies","text":"A curses library with wide char support (e.g. ncursesw), libc and libreadline (optional). Utility deps Install? Operation xdg-open (Linux)/open(1) (macOS)/cygstart (Cygwin)/open (Haiku) base default opener file, coreutils (cp, mv, rm), xargs, sed base file type, copy, (re)move GNU sed (non-Linux) required copy, (re)move tar, (un)zip [bsdtar/atool/(un)rar for more formats] base manage archives archivemount, fusermount(3)/umount (macOS) optional (un)mount archives sshfs/ rclone , fusermount(3)/umount (macOS) optional (un)mount remotes gio trash/trash-cli optional trash [default: rm -rf ] vlock (Linux)/bashlock (macOS)/lock(1) (BSD)/peaclock (Haiku) optional lock terminal advcpmv (Linux) ( integration ) optional copy, move progress $VISUAL / $EDITOR , $PAGER , $SHELL optional fallback vi, less, sh","title":"Dependencies"},{"location":"Usage/#installation","text":"TL;DR: Can't install packages? Get the statically linked binary from the latest release .","title":"Installation"},{"location":"Usage/#release-packages","text":"Officially maintained RPM distribution + an Arch package is available in Openbuildservice Packages for Debian and Ubuntu and a static binary are generated with the latest release .","title":"Release packages"},{"location":"Usage/#from-a-package-manager","text":"Packaging status ( expand ) Unlisted packagers: \u25cf CentOS ( yum --enablerepo=epel install nnn ) \u25cf iSH ( apk add nnn ) \u25cf Milis Linux ( mps kur nnn ) \u25cf NuTyX ( cards install nnn ) \u25cf Sailfish OS ( devel-su zypper install nnn ) \u25cf Source Mage ( cast nnn )","title":"From a package manager"},{"location":"Usage/#from-source","text":"Download the latest release or clone this repo ( risky ), install deps and compile. On Ubuntu 18.04: sudo apt-get install pkg-config libncursesw5-dev libreadline-dev sudo make strip install PREFIX is supported, in case you want to install to a different location. See the developer guides for source verification, platform-specific notes and other tips.","title":"From source"},{"location":"Usage/#shell-completion","text":"Completion scripts for Bash, Fish and Zsh are available . Refer to your shell's manual to install.","title":"Shell completion"},{"location":"Usage/#plugins","text":"Visit the plugins page.","title":"Plugins"},{"location":"Usage/#configuration","text":"The new colorscheme (config NNN_FCOLORS) - a feast for your eyes! There is no config file. Associated files are at ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/ Use plugin nbak to backup configuration. nnn supports a few optional (set if you need) environment variables. Example export Description NNN_OPTS=\"cEnrx\" binary options to nnn NNN_OPENER=\"/path/to/custom/opener\" custom opener (see plugin nuke ) NNN_BMS=\"d:$HOME/Documents;D:$HOME/Docs archive/\" 1 key-bookmark pairs NNN_PLUG='o:fzopen;m:nmount;x:!chmod +x $nnn' 1 key-plugin (or cmd) pairs NNN_ORDER='t:/home/user/Downloads;S:/usr/bin' 2 directory-specific ordering NNN_ARCHIVE=\"\\\\.(7z\\|bz2\\|gz\\|tar\\|tgz\\|zip)$\" 3 archives [default: bzip2, (g)zip, tar] NNN_ARCHMNT='fuse-archive' archive mounter [default: archivemount] NNN_COLORS='1234' (/ '#0a1b2c3d' / '#0a1b2c3d;1234' ) 4 6 context colors [default: '4444' (blue)] NNN_FCOLORS='c1e2272e006033f7c6d6abc4' 5 file-specific colors NNN_SSHFS='sshfs -o reconnect,idmap=user' 6 custom SSHFS cmd NNN_RCLONE='rclone mount --read-only' 6 custom rclone cmd NNN_TRASH=n ( n=1: trash-cli, n=2: gio trash ) use desktop Trash [default: rm -rf] NNN_SEL='/tmp/.sel' custom selection file NNN_FIFO='/tmp/nnn.fifo' 7 FIFO to write hovered file path to NNN_LOCKER='saidar -c' terminal locker NNN_TMPFILE='/tmp/.lastd' always cd on quit NNN_HELP='pwy paris' run cmd, show o/p on help page NNN_MCLICK='^R' (/ 'm' ) 8 key emulated by middle mouse click NO_COLOR=1 9 disable ANSI color output Key-bookmark and key-plugin pairs are listed in the help and config screen (key ? ). Sort keys can be a / d / e / r / s / t / v (see program option -T ). Capitalize to reverse (except r ). Path must be absolute. Timestamps for entries created/modified within 5 minutes are shown in reverse. 3. With atool or bsdtar and (un)rar installed you can have: export NNN_ARCHIVE=\"\\\\.(7z|a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rar|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)$\" bsdtar can extract, list and archivemount can mount ISO 9660 cdrom images (extn: iso). 4. Understands 8 color, xterm 256 color or both. Hexadecimal numbers representing xterm 256 colors, note that the width has to be 2, e.g. \"5\" becomes \"05\" 8 colors numbers: 0-black, 1-red, 2-green, 3-yellow, 4-blue (default), 5-magenta, 6-cyan, 7-white. To specify xterm 256 color hex numbers, prefix with # (2 symbols per context). To specify both, export 256 color hex numbers followed by 8 color number as fallback, separated by ; . Specify file-specific colors in xterm 256 color hex numbers (2 hex symbols per color). Order is strict, use 00 to omit/use default terminal color. Defaults: Order Hex Color Block device c1 DarkSeaGreen1 Char device e2 Yellow1 Directory 27 DeepSkyBlue1 Executable 2e Green1 Regular 00 Normal Hard link 60 Plum4 Symbolic link 33 Cyan1 Missing OR file details f7 Grey62 Orphaned symbolic link c6 DeepPink1 FIFO d6 Orange1 Socket ab MediumOrchid1 Unknown OR 0B regular/exe c4 Red1 If the terminal supports xterm 256 colors or more, file-specific colors will be rendered. To force the 8-color scheme use option -C . If xterm 256 colors aren't supported, 8-color scheme will be used. More Themes . nnn v2.9 and below have NNN_CONTEXT_COLORS , NNN_SSHFS_OPTS and NNN_RCLONE_OPTS . If the FIFO file doesn't exist it will be created, but it will never be removed. Only the first character is considered if not a Ctrl-key combo. Overridden by NNN_COLORS .","title":"Configuration"},{"location":"Usage/#program-options","text":"usage: nnn [OPTIONS] [PATH] The unorthodox terminal file manager. positional args: PATH start dir/file [default: .] optional args: -a auto NNN_FIFO -A no dir auto-enter during filter -b key open bookmark key (trumps -s/S) -B use bsdtar for archives -c cli-only NNN_OPENER (trumps -e) -C 8-color scheme -d detail mode -D dirs in context color -e text in $VISUAL/$EDITOR/vi -E internal edits in EDITOR -f use readline history file -F val fifo mode [0:preview 1:explore] -g regex filters -H show hidden files -i show current file info -J no auto-advance on selection -K detect key collision -l val set scroll lines -n type-to-nav mode -N use native prompt -o open files only on Enter -p file selection file [-:stdout] -P key run plugin key -Q no quit confirmation -r use advcpmv patched cp, mv -R no rollover at edges -s name load session by name -S persistent session -t secs timeout to lock -T key sort order [a/d/e/r/s/t/v] -u use selection (no prompt) -U show user and group -V show version -x notis, selection sync, xterm title -0 use null separator in picker mode -h show help Notes: nnn opens the current working directory if PATH is not specified. If PATH is specified and it exists, nnn will open it. If the PATH doesn't exist and ends with a / , nnn will attempt to create the directory tree and open it. Otherwise, PATH is considered a path to a regular file and nnn attempts to create the complete directory tree to the file, open the parent directory and prompt to create the new file in it with the base filename. The keys for option -T are a pparent disk usage / d isk usage / e xtension / r everse / s ize / t ime / v ersion. Capitalize to reverse (except r ).","title":"Program options"},{"location":"Usage/#keyboard-mouse","text":"The list below is from master . Press ? in nnn to see the keybinds in your installed version. NAVIGATION Up k Up PgUp ^U Page up Dn j Down PgDn ^D Page down Lt h Parent ~ ` @ - ~, /, start, prev Ret Rt l Open ' First file/match g ^A Top J Jump to entry/offset G ^E End ^J Toggle auto-advance on open B (,) Book(mark) b ^/ Select bookmark 1-4 Context (Sh)Tab Cycle/new context 2Esc ^Q Quit ^y Next young ^G QuitCD Q Pick/err, quit q Quit context FILTER & PROMPT / Filter ^N Toggle type-to-nav Esc Exit prompt ^L Toggle last filter . Toggle hidden Alt+Esc Unfilter, quit context FILES o ^O Open with... n Create new/link f ^F File details d Detail mode toggle ^R Rename/dup r Batch rename z Archive e Edit file * Toggle exe > Export list Space + (Un)select m-m Select range/clear a Select all A Invert sel p ^P Copy here w ^W Cp/mv sel as v ^V Move here E Edit sel list x ^X Delete or trash S Listed sel size X Delete (rm -rf) Esc Send to FIFO MISC Alt ; Select plugin = Launch app ! ^] Shell ] Cmd prompt c Connect remote u Unmount remote/archive t ^T Sort toggles s Manage session T Set time type 0 Lock ^L Redraw ? Help, conf Notes: Shift-TAB attempts to create a new context, and reverse cycles when all contexts are active. B adds a new bookmark in the bookmarks dir, , marks a location in-memory At the filter prompt, ^L toggles last filter and unfilter. If no last filter, exits filter mode and redraws. Q quits with EXIT_FAILURE if no selection, else prints the selection to stdout and quits with EXIT_SUCCESS . S shows the total size of non-filtered selected files listed in a directory. For directories, only the size of the directory is added by default. To add the size of the contents of a directory, switch to du mode. Help & settings, file details and archive listing are shown in the $PAGER . To change shortcuts modify key bindings in nnn.h and compile. Option -K detects collisions. Repeat sort order key ^T to apply sort by time, size and default in the same order. There are keymap patches available for the Colemak and Colemak-DH keyboard layouts in nnn's User Patch Framework .","title":"Keyboard, mouse"},{"location":"Usage/#graphical-map","text":"( L\u00e9o Villeveygoux, based on Qwerty.svg ) SVG version","title":"Graphical map"},{"location":"Usage/#mouse","text":"Mouse click Function Left single on context number Visit context Left single on current path Visit parent Left single/double on last 2 rows Toggle type-to-nav Left single Select context or entry Left double Select context or open entry Right single Add entry to selection Middle single User configured with NNN_MCLICK","title":"Mouse"},{"location":"Usage/#broken-control-keybind","text":"Some control keybinds may not work if they are mapped by stty . To confirm, run stty -a and look for keybind conflicts. Some common ones are: ^Q (start), ^S (stop), ^V (lnext). To remove the stty mapping: stty start undef stty stop undef stty lnext undef","title":"Broken control keybind"},{"location":"Usage/#symbols","text":"","title":"Symbols"},{"location":"Usage/#file-indicators","text":"Listing 1 Listing 2 | Indicator | File type | |:---:| --- | | `/` | Directory | | `*` | Executable | | `\\|` | Fifo | | `=` | Socket | | Indicator | File type | |:---:| --- | | `@` | Symlink to file | | `b` | Block device | | `c` | Character device | | `?` | Unknown | Note: All links (hard/sym) are dimmed.","title":"File indicators"},{"location":"Usage/#status-bar-symbols","text":"Symbol Meaning x/y current file num / total + / * ( n ) selection mode on/range selection on (buffered selected count) [reversed] H hidden files are listed M modification time sorted A access time sorted C change time sorted S size sorted E file extension sorted V version sorted R reverse sorted du disk usage au apparent disk usage -> symbolic link target n-n num hard links - inode number","title":"Status bar symbols"},{"location":"Usage/#file-size","text":"The minimum file size unit is byte (B). The rest are K, M, G, T, P, E, Z, Y (powers of 1024), same as the default units in ls .","title":"File size"},{"location":"Usage/#help","text":"nnn -h man nnn To lookup keyboard shortcuts at runtime, press ? . user1: How it compares to Midnight Commander ? user2: It works in daylight too. - from a reddit conversation","title":"Help"},{"location":"_Footer/","text":"Top \u2b06 [[Wiki Home :notebook:|https://github.com/jarun/nnn/wiki]] [[Project Home :horse:|https://github.com/jarun/nnn]]","title":" Footer"},{"location":"_Sidebar/","text":"Wiki Home Usage Dependencies Installation Configuration Program options Keyboard, mouse Symbols File size Help Concepts Contexts Dual pane Sessions Filters Type-to-nav Selection Find and list Prompts Design How to The nnn magic! Add bookmarks Configure cd on quit Sync subshell $PWD Hot-plugged drives Image, video, pdf Detached text Run commands Launch applications Open as root File picker Remote mounts Synced quick notes Drag and drop Duplicate file Create batch links Hidden files on top Disable bold fonts Themes Advanced Live previews File icons Custom keybinds CLI-only opener Desktop integration cp mv progress Control active dir Termux tips Pager as opener Working with lftp Power toys Troubleshooting Wrong file opener Broken file names Tmux configuration Broken control key Help not showing Default batch rename limits Misaligned size column Can't list within list BSD terminal issue Amethyst WM Running inside docker containers Icons not working properly Stats, info Performance From noice to nnn Developer Release checklist Verify sources make options Static compilation Optimization tips Compile for Pi Cygwin instructions Compile with musl libc Cross-compile for Android Debugging nnn","title":" Sidebar"},{"location":"_Sidebar/#wiki-home","text":"","title":"Wiki Home"},{"location":"_Sidebar/#usage","text":"Dependencies Installation Configuration Program options Keyboard, mouse Symbols File size Help","title":"Usage"},{"location":"_Sidebar/#concepts","text":"Contexts Dual pane Sessions Filters Type-to-nav Selection Find and list Prompts Design","title":"Concepts"},{"location":"_Sidebar/#how-to","text":"The nnn magic! Add bookmarks Configure cd on quit Sync subshell $PWD Hot-plugged drives Image, video, pdf Detached text Run commands Launch applications Open as root File picker Remote mounts Synced quick notes Drag and drop Duplicate file Create batch links Hidden files on top Disable bold fonts Themes","title":"How to"},{"location":"_Sidebar/#advanced","text":"Live previews File icons Custom keybinds CLI-only opener Desktop integration cp mv progress Control active dir Termux tips Pager as opener Working with lftp Power toys","title":"Advanced"},{"location":"_Sidebar/#troubleshooting","text":"Wrong file opener Broken file names Tmux configuration Broken control key Help not showing Default batch rename limits Misaligned size column Can't list within list BSD terminal issue Amethyst WM Running inside docker containers Icons not working properly","title":"Troubleshooting"},{"location":"_Sidebar/#stats-info","text":"Performance From noice to nnn","title":"Stats, info"},{"location":"_Sidebar/#developer","text":"Release checklist Verify sources make options Static compilation Optimization tips Compile for Pi Cygwin instructions Compile with musl libc Cross-compile for Android Debugging nnn","title":"Developer"}]}