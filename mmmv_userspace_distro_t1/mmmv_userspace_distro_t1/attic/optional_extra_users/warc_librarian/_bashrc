# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#----martini--lisatu--algus----
#"en_GB.UTF-8"

#--------------------------------------------------------------------------
#export EDITOR="`which vim`"
#export LC_ALL=C.UTF-8
#export LANG=C.UTF-8

#--------------------------------------------------------------------------
#export MMMV_PIP_HOME="$HOME/.mmmv_pip_home"
#mkdir -p $MMMV_PIP_HOME
#export PYTHONPATH="$MMMV_PIP_HOME:$PYTHONPATH"

#alias mmmv_pip_install="nice -n3 pip install \
# --target=$MMMV_PIP_HOME "

#alias mmmv_pip3_install="nice -n3 pip3 install \
# --target=$MMMV_PIP_HOME "


#------machine--instance--specific--section--start-----

source "/home/mmmv/mmmv_userspace_distro_t1/mmmv/etc/common_bashrc.txt"

export MMMV_GRABSITE_HOME="$HOME/m_local/bin_p/grabsite/v2016_10_31/grab-site"
export MMMV_GRABSITE_DELAY_IN_MILLISECONDS="310"

alias mmmv_grabsite_server="nice -n18 $MMMV_GRABSITE_HOME/gs-server "

export MMMV_GRABSITE_SPIDER="$MMMV_GRABSITE_HOME/grab-site"
export MMMV_GRABSITE_CMD_PART_0="time nice -n16 $MMMV_GRABSITE_SPIDER --no-offsite-links --delay=$MMMV_GRABSITE_DELAY_IN_MILLISECONDS --concurrency=1 --igsets=mediawiki " # --level=4

alias mmmv_grabsite_warc_2="$MMMV_GRABSITE_CMD_PART_0 --level=2 "
alias mmmv_grabsite_warc_3="$MMMV_GRABSITE_CMD_PART_0 --level=3 "
alias mmmv_grabsite_warc_4="$MMMV_GRABSITE_CMD_PART_0 --level=4 "
alias mmmv_grabsite_warc_5="$MMMV_GRABSITE_CMD_PART_0 --level=5 "
alias mmmv_grabsite_warc_6="$MMMV_GRABSITE_CMD_PART_0 --level=6 "
alias mmmv_grabsite_warc_7="$MMMV_GRABSITE_CMD_PART_0 --level=7 "
alias mmmv_grabsite_warc_8="$MMMV_GRABSITE_CMD_PART_0 --level=8 "
alias mmmv_grabsite_warc_9="$MMMV_GRABSITE_CMD_PART_0 --level=9 "


alias mmmv_warc_proxy="export S_FP_ORIG=\"\`pwd\`\"; sleep 1; cd $HOME/m_local/bin_p/warc_proxy/v2016_11_03 ; sleep 1 ; nice -n16 ./warcproxy.py & "


#------machine--instance--specific--section--end-------
