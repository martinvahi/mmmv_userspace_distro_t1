#==========================================================================
# If this file is not a template, then it should have the path of 
#
#     ~/.ssh/config
#
# The start of the configuration code can be found by searching the 
# string "SSH_client_side_configuration", without the quotation marks.
#--------------------------------------------------------------------------
# Initial author of this ~/.ssh/config template: Martin.Vahi@softf1.com
# This file is in public domain.
#
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: 0BSD
#==========================================================================
#:::::::::::::::::::::::SSH_Minitutorial::start::::::::::::::::::::::::::::
# 
# What is SSH  (https://www.openssh.com/)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# SSH is an encryption based communication protocol that allows to use the 
# command line ("shell") of remote computers. SSH based command line access 
# of a remote computer is a lot like local command line access, 
# except that the user is connected to the computer over 
# IPv4 or IPv6 network. One way to see the SSH is that it is 
# an encryption based replacement of the Telnet, except that it
# can also be used for creating encrypted tunnels (hereafter: SSH tunnels) 
# between IPv4 ports of a local machine and IPv4 ports of a remote machine. 
# There exists software (sshfs, unison, scp, sftp) that uses 
# the SSH tunnels and command line access of remote computers for 
# copying files from one computer to another. For example, 
# the SSH dependent tool called sshfs allows a Linux machine 
# to see a file system of a remote machine as if the remote machine 
# were an USB memory stick that is connected to a local machine.
#
# As of 2023_05 one of the Windows_10 tools that is 
# similar to the Linux sshfs, is the closed source 
#
#     (As of 2023_05 they have a 1-user-one-SSH-connection 
#     free-of-charge commercial use license for the "starter version",
#     but the catch is that they spam with adverts for their paid version.)
#     https://www.nsoftware.com/sftpdrive
# 
# 
# SSH Components
# ~~~~~~~~~~~~~~
# 
# A server and a client. There are different implementations
# but as the protocol is the same, the different implementations
# can communicate with each other. On Linux and BSD the 
# server and the client can be usually installed from 
# operating system standard package collection. On Windows10
# there is the Linux layer, Windows Subsystem for Linux (hereafter WSL) 
# that has the original Linux version, but for earlier Windows
# versions the CygWin incorporated SSH binaries might become handy.
# One of the main, if not the main, SSH implementations 
# for the pre-Windows10 Windows versions was the Putty
#
#     https://putty.org/
# 
# As with all programs that open IPv4/IPv6 ports, SSH
# client and server communication must pass trough the
# operating system level firewall. A firewall is a program
# that blocks IPv4/IPv6 traffic according to its rules.
# A firewall configuration tends to be operating system
# specific and is outside of the scope of this minitutorial.
# A word of warning is that configuring a firewall
# might not be a trivial task. For the reference,
# a standard IPv4/IPv6 port for SSH servers to listen
# to is port #22, but the SSH server listening port
# can be changed from SSH server settings/configuration_file.
# 
# A local computer does not need to run an SSH server to
# use an SSH client for making a connection to a remote
# computer. The remote computer must run an SSH server, but
# it does not need to have the SSH client installed to 
# accept SSH connections. 
# 
# 
# SSH Server Setup on Linux and Windows Subsystem for Linux (WSL)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# The WSL aims to mimic Linux as much as possible, so it is 
# not covered separately in this chapter, because in this case the 
# general Linux instructions also apply to the WSL. If there 
# are no IPv4/IPv6 port conflicts, then it is probably possible 
# to use WSL SSH tools and the Windows-only-SSH-tools concurrently.
#
# On Linux the SSH server reads in its settings only
# at startup and the settings are at a text file with the path of 
#
#     /etc/ssh/sshd_config
# 
# which has to include a list of SSH server 
# side operating system users that are allowed to 
# log in to the server by using an SSH connection.
# An example of the list of users at the /etc/ssh/sshd_config:
# 
#    AllowUsers Simpson@192.168.44.55 ATotalFoolFromAnywhere FooUser@192.* BarUser@192.168.*
#    # More examples MIGHT be found from
#    # https://serverfault.com/questions/478801/ssh-allowusers-from-particular-network
#    # archival copy: https://archive.vn/vvRR7
# 
# If SSH-client does not communicate with the server for
# a number of seconds that matches the multiplication of the 
# integer values of the /etc/ssh/sshd_config parameters
# 
#     # The interval between keep-alive-packets
#     # that the server sends to the client to 
#     # probe, whether the connection to the client
#     # exists. Unit is seconds.
#     ClientAliveInterval 550 
#
#     # Number of keep-alive-packets that are allowed to 
#     # be without an answer before the connection is 
#     # shut down.
#     ClientAliveCountMax 42 
#     # 550 * 42 = 23100 seconds 
# 
# then the server will "hang up", sever the connection, till next login.
# Some other possible /etc/ssh/sshd_config lines:
#
#     # INCOMPLETE: test the configuration in this example.
#     Port 22
#     #
#     # The following 2 lines
#     PasswordAuthentication no
#     PubkeyAuthentication no
#     # assume that the SSH keys have been set up and the 2 lines 
#     # disable SSH access for all users that do not have 
#     # public keys at the server.
#     #
#     Match Address 192.168.1.0/24
#             PermitRootLogin yes
#             PasswordAuthentication yes
#             PubkeyAuthentication yes
#     #
#     Match User vpnuser Address 10.10.10.0/24
#             PasswordAuthentication yes
#             PubkeyAuthentication yes
#     #
#     Match User sarah peter robert Address *
#             PasswordAuthentication no
#             PubkeyAuthentication yes 
# 
# Only root user is supposed to have 
# write access to the /etc/ssh/sshd_config
# and only root user is supposed to be able to restart the 
# SSH server instance that has been installed from the 
# operating system (Linux, BSD) standard package collection. 
# On Debian based Linux distributions, including the 
# original Debian itself, the SSH server restart command might look like
# 
#     service ssh  restart 
#     # or it might look like the following line:
#     service sshd restart 
# 
# On Raspbian the SSH server MIGHT be startable from a 
# terminal based GUI that is a command line program named 
#
#     raspi-config
#
# On openSUSE the SSH server MIGHT be startable from a 
# terminal based GUI that is a command line program named 
#
#     yast
#
# In some cases the way to mark a background_program 
# like an SSH server to be started after the operating 
# system (Linux, BSD) has started itself is by executing (as root user)
# 
#     systemctl enable ssh
#     # A reverse command is the following line:
#     systemctl disable ssh
# 
# In Linux terminology the background programs are called "daemons" 
# and "services" in Windows terminology. Marking a background_program/daemon 
# to be started after operating system startup does not necessarily start the 
# background_program/daemon without restarting the operating system.
# That is to say, if one does not want to restart the operating system, 
# then one should start the daemons manually.
#
#
# SSH Client Setup on Linux
# ~~~~~~~~~~~~~~~~~~~~~~~~~
#
# An Explanation in Bash:
#
#     echo ""
#     if [ "`which ssh 2> /dev/null`" == "" ]; then
#         echo "The SSH client has not been installed."
#         echo "Please install the SSH client and then try again."
#         echo "The SSH client is probably installable from "
#         echo "the operating system standard package collection."
#         echo ""
#         exit 1 # Exit with an error.
#     fi
#     S_FP_CONFIG_TEMPLATE="/the/file/that/You/are/currently/reading"
#     S_FP_CONFIG="$HOME/.ssh/config"
#     mkdir -p "$HOME/.ssh" ; sync; wait;
#     chmod -f -R 0700 "$HOME/.ssh" # is due to optional encryption keys and 
#                                   # optional socket files.
#     if [ ! -e "$S_FP_CONFIG" ]; then 
#         cp "$S_FP_CONFIG_TEMPLATE" "$S_FP_CONFIG" ; sync; wait;
#         echo "Please edit the ~/.ssh/config ."
#     else
#         echo "~/.ssh/config already exists. Not overwriting."
#     fi
#     echo ""
#     exit 0 # No errors.
#
#
# SSH Tunnels
# ~~~~~~~~~~~
#
# An SSH tunnel has exactly 2 ends like a train tunnel in a mountain has. 
# An SSH tunnel uses the communication model, where a query
# enters the SSH tunnel from one end and the answer to the query 
# exits the tunnel from the same end, where the query entered the tunnel.
# As a tunnel has only 2 ends, there are exactly 2 ways to 
# configure that: the query enters the tunnel from the local computer or 
# the query enters the tunnel from the remote computer. 
# On Linux an SSH tunnel is crated, initiated, 
# by an SSH client  even if it is a kind of tunnel, where 
# the queries enter the tunnel from the SSH server side. 
#
# The 2 end points of an SSH tunnel are IPv4/IPv6 ports. Classically
# SSH tunnels are created between 2 different computers, but for
# testing purposes the 2 end points may connect to the IPv4/IPv6 
# ports of a single computer, although the command line program, "socat",
# might be more efficient for tunnels within a single computer.
# In the case of mmmv_userspace_distro_t1 there MIGHT be an alias 
#
#     mmmv_cre_SSH_tunnel_creation_script_template_t1
#     # On Linux Bash shell You might want to type in "mmmv_cre_SSH", 
#     # without the quotation marks, and then press the Tab key.
#
# that contains detailed code for creating the 2 types of SSH tunnels.
# Unused SSH tunnels tend to self-destruct after some delay, so
# programs that use SSH tunnels must automatically re-create them.
#
#
# Setting up SSH keys
# ~~~~~~~~~~~~~~~~~~~
#
# With the exception of some online services like code hosting sites,
# the use of SSH keys tends to be optional. Plain passwords are
# sufficient for using SSH. The main benefits of using SSH keys
# in stead of relying on password based authentication are 
# greater "secret" length (keys tend to have more bits than passwords)
# and the possibility to create SSH connections (plain shell sessions and/or
# SSH tunnels) without human interaction. Passwords would need to be
# entered by a human or some text entry hack, but SSH keys can be
# read by the SSH client without any human interaction or 
# dirty text entry hacks. The lack of human intervention is essential
# for scripts that automatically create SSH connections (plain shell
# sessions and/or SSH tunnels).
#
# As the SSH server and the SSH client both have to support the
# same cipher at the same key length, the RSA cipher is a fine choice 
# not because of its strength, but because of its wide support. 
# The command 
# 
#     ssh-keygen -t rsa -C "Some Useful Comment" -f ~/.ssh/my_keyfile_for_host_Foo_user_Bar.txt
#
# generates an RSA key-pair, 
#
#     ~/.ssh/my_keyfile_for_host_Foo_user_Bar.txt     # contains the private key
#     ~/.ssh/my_keyfile_for_host_Foo_user_Bar.txt.pub # contains the public  key
#
# From human usability point of view it can help, if the
# SSH key comment that is given as a command line argument to the
# SSH key generation program, the ssh-keygen, contains 
# key generation date, server hostname, server side username,
# some human-assigned key version ID and may be also the server owner
# email address. The private key is expected to be on the 
# SSH client side. To use the SSH keys, the path of the private key 
# is expected to be declared at the SSH client side 
# ~/.ssh/config "Host" section like
#
#     Host mydomain_com_alias_for_local_commandline_use
#         IdentityFile ~/.ssh/my_keyfile_for_host_Foo_user_Bar.txt
#
# The public key, the contents of the 
#
#     ~/.ssh/my_keyfile_for_host_Foo_user_Bar.txt.pub 
#
# is expected to be added to the SSH server side ~/.ssh/authorized_keys like
#
#     cat ~/.ssh/my_keyfile_for_host_Foo_user_Bar.txt.pub >> ~/.ssh/authorized_keys
#
# Adding SSH keys to the SSH server side ~/.ssh/authorized_keys
# does not require SSH server restart. The keys are looked up
# during authentication.
#
#
# SSH Server and SSH Client Setup on Android and Apple Mobile Devices
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# Probably the main benefit of running an SSH server on Android
# and Apple mobile devices is to be able to copy files to and from 
# Android or Apple mobile device by using any desktop GUI based 
# file manager that has SFTP or SCP or FISH support. 
# scp is a command line program that uses SSH to copy files.
# SFTP and FISH are specifications that describe, how a program
# can copy files by using SSH. 
#
#     ("What's the difference between SFTP, SCP and FISH protocols?")
#     https://unix.stackexchange.com/questions/8707/whats-the-difference-between-sftp-scp-and-fish-protocols
#     archival copy: https://archive.vn/aPdJY
#
#     ["SFTP (SSH File Transfer Protocol) info 
#     site for C#, VB.NET and Java developers"]
#     https://www.sftp.net/specification
#     archival copy: https://archive.vn/K30L7
#
#     http://cvs.savannah.gnu.org/viewvc/mc/mc/vfs/README.fish?view=markup
#     archival copy: https://archive.vn/5AJMy
#     optionally present local copy:
#         $MMMV_USERSPACE_DISTRO_T1_HOME/attic/documentation/
#             third_party_documentation/Linux_and_BSD_administration/SSH/
#             FISH_protocol/
#             2003_xx_xx_FISH_protocol_v_0_0_2_FIles_Transferred_over_SHell_keywords_SSH_FTP_SCP_SFTP.pdf
#     
# Android is Linux, but as of 2021 the default setting of Android
# devices is that the main user of an Android device 
# is not supposed to be able to become the 
# operating system (Linux) root user, id est there is 
# no easy way to get "root access". The solution is that 
# SSH servers and clients on Android are part of some 
# Android application that can be installed the way 
# Android applications are installed to Android and
# in stead of operating system username the SSH server side 
# username will be SSH server implementation/Android_application specific.
# The same idea with Apple mobile devices (phones, iPad):
# SSH server is part of some application that gets installed
# to the Apple mobile device like any other application 
# gets installed there. Android applications and Apple mobile
# device applications have their own, quite application specific,
# ways, how they are expected to be configured and that is
# outside of the scope of this minitutorial.
# 
# 
# Desktop File Managers With SSH Support
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# As of 2021 Windows10 Linux desktop applications can be run on 
# the Windows Linux layer, the Windows Subsystem for Linux (WSL) by
# running an X11 server like the VcXsrv
#
#     https://sourceforge.net/p/vcxsrv/
#     optionally present local copy:
#         /home/mmmv/mmmv_userspace_distro_t1/attic/optional_setup_components/Windows_Subsystem_for_Linux_WSL_related_components/X11_server_implementations/VcXsrv
#
# and installing the relevant packages from Linux standard
# package collection
#
#     # Please run as root user on WSL Bash shell
#     apt-get install x11-apps xeyes
#
#     # Please run as plain user on the WSL Bash shell, 
#     # unless the mmmv_userspace_distro_t1 has been installed:
#     echo "export DISPLAY=:0" >> ~/.bashrc
#
#     # Please run as plain user on the WSL Bash shell for
#     # testing, whether the installation has succeeded:
#     xeyes 
#     # In the case of success the xeyes program should be 
#     # listed at the Windows task bar even if 
#     # it might not be immediately noticeable on screen 
#     # due to its window being very tiny.
#
#     # If the xeyes test passed, then optionally 
#     # You may want to run as root user on the WSL Bash shell
#     # any combination of the following lines:
#     apt-get install mc 
#     apt-get install konqueror
#     apt-get install krusader
#     apt-get install filezilla
#
# According to the reference at one of the previous chapters
# of this minitutorial the FISH protocol might be supported 
# with the widest range of SSH server implementations.
# One of the Linux desktop file managers that at least 
# once upon a time had FISH support is the KDE Konqueror, 
# which is a file manager and a web browser 2 in one:
#
#     https://apps.kde.org/konqueror/
#
# In the case of the Konqueror the SSH server side 
# login parameters (SSH server side operating system username, 
# SSH server port, SSH server hostname) are encoded to 
# a FISH protocol specific URL that has the form of
#
#     fish://username@SSH_server_hostname:SSH_server_port/home/username
#
#     https://docs-staging.kde.org/trunk5/en/kio-extras/kioslave5/fish/index.html
#     archival copy: https://archive.vn/mGSjP
#     optionally present local copy:
#         $MMMV_USERSPACE_DISTRO_T1_HOME/attic/documentation/
#             third_party_documentation/Linux_and_BSD_administration/SSH/
#             FISH_protocol/
#             2010_10_27_KDE_v_4_5_FISH_protocol_usage_minimanual_by_Jörg_Walter_and_Brad_Hards.pdf
#
# Another desktop GUI application that has SSH support and that 
# might be used for copying files to and from a computer that
# runs an SSH server is the FileZilla
#
#     https://wwww.filezilla-project.org/
#     https://wiki.filezilla-project.org/SFTP_specifications
#
# In terminal mode the old Norton Commander open source clone, 
# the Midnight Commander, which, if installed, has a 
# command line program name "mc", can be used for copying files 
# over SSH connections by using the SFTP protocol.
# SFTP URLs are very similar to the FISH protocol URLs:
#
#     -----citation--start------
#     The URL has the following syntax: sftp://address:port/path
#     ...
#     When the client requests a directory listing, the URL 
#     contains a query parameter to flag the request type. 
#     For example, a DIR request might generate 
#     sftp://host.example.com:22/;type=d.
#     -----citation--end--------
#     https://www.ibm.com/docs/en/datapower-gateways/7.5.0?topic=handlers-url-specifications-sftp-handler
#     https://web.archive.org/web/20210828045041if_/https://www.ibm.com/docs/en/datapower-gateways/7.5.0?topic=handlers-url-specifications-sftp-handler
#     another archival copy: https://archive.vn/Cyd9i
#
# As of 2021 one of the noteworthy file managers is also the Krusader,
# which mimics the Norton_Commander/Midnight_Commander, but 
# works only in non-terminal_mode/graphical_mode. As of 2021
# the Krusader has a built-in file dissection and reassembly
# feature, which can be very handy in various situations,
# including the copying of files over network connections.
#
#     https://docs.kde.org/stable5/en/krusader/krusader/krusader.pdf 
#     https://web.archive.org/web/20210828055719/https://docs.kde.org/stable5/en/krusader/krusader/krusader.pdf
#     optionally present local copy:
#         $MMMV_USERSPACE_DISTRO_T1_HOME/attic/documentation/
#             third_party_documentation/Linux_and_BSD_administration/SSH/tutorials/
#             2021_08_28_downloaded_Krusader_File_Manager_Handbook.pdf
#
# As of 2021 Windows10 users have the option to give the WinSCP a try:
#
#     https://winscp.net/
#
#
# Command-line Tools for Copying Files over SSH
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# As of 2021 the LFTP seems to be pretty famous 
# cross-computer file copying command-line-tool.
#
#     https://lftp.yar.ru/
#
# INCOMPLETE: cover topics: unison, putty, rsync, sshfs
# 
# SSH Related Troubleshooting: "Too many Authentication Failures"
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# At the time of writing this minitutorial I(Martin.Vahi@softf1.com)
# do not know, how to solve this issue, but over the years that
# I have been using the SSH almost daily I have found some
# heuristics that might be tried and that sometimes work.
# As of 2021_08 the most reliable workaround to this issue 
# that I have found is to create multiple operating system users
# and distribute the different "Host" sections of the ~/.ssh/config
# and related SSH keys between the operating system users.
#
# Assuming that one does not try to log in over the SSH as 
# root user or has the root user login permitted at SSH server
# configuration, a thing to try in a situation, where 
# one is able to change SSH server settings and restart the
# SSH server, is to increase the number of allowed failing login attempts.
# On Linux the following line at the /etc/ssh/sshd_config
# allows 6 failed attempts:
# 
#     MaxAuthTries 6
#
# Someone at 
#
#     https://www.unixtutorial.org/ssh-too-many-authentication-failures/
#     archival copy:  https://archive.vn/q41Rh
# 
# suggests that sometimes clearing the environment variable SSH_AUTH_SOCK
# at the SSH client side might temporarily solve the issue. 
#
#     # The next line is in Bash, at the SSH client side.
#     SSH_AUTH_SOCK=""
#
# Another heuristic is to execute the following Bash line at the SSH client side:
#
#     ssh-add -D
#     # http://superuser.com/questions/187779/too-many-authentication-failures-for-username
#     # archival copy: https://archive.vn/Gfi6f
#
# One of the heuristics is to make sure that the Host section of the 
# ~/.ssh/config, the very same file that the current file is 
# suppose to be a template of, specifies that SSH keys are used 
# in stead of passwords:
#
#     Host mydomain_com_alias_for_local_commandline_use
#         IdentitiesOnly yes
#         IdentityFile ~/.ssh/2018_06_xx_generated_private_key.txt
#         PubkeyAuthentication=yes
#         # ... the rest of the Host section as shown after this minitutorial.
#
# One dirty solution that sometimes helps is to move the keys of 
# servers that one does not currently want to log into 
# to some temporary folder like
#
#     S_FP="$HOME/.ssh/my_fancy_place_for_holding_keys_that_are_temporarily_not_in_use"
#     mkdir -p "$S_FP"
#     chmod -f -R 0700 "$S_FP"
# 
# and not update the file paths at the ~/.ssh/config so that 
# some of the paths at the ~/.ssh/config become invalid.
# As dumb as it may sound, sometimes the solution is to
# restart the computer that runs the SSH server, provided that 
# one can restart that computer.
#
#
# References, Other SSH Tutorials
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#     "AUUG Winter 2002 SSH tips, tricks & protocol tutorial"
#     by Damien Miller
#     https://www.nsc.liu.se/systems/ssh-tutorial.pdf
#     2021_08_xx downloaded optionally present local copy:
#         $MMMV_USERSPACE_DISTRO_T1_HOME/attic/documentation/
#             third_party_documentation/Linux_and_BSD_administration/SSH/tutorials/
#             2002_08_xx_AUUG_Winter_2002_SSH_Tutorial_by_Damien_Miller.pdf
#
#     "How to create a personal file server with SSH on Linux"
#     https://opensource.com/article/20/3/personal-file-server-ssh
#     archival copy: https://archive.vn/lCNnT
#
# Mosh ("mobile shell") wraps SSH to overcome some 
# of the SSH reliability issues during the use of the SSH over
# cellphone based IPv4/IPv6 connections.
#
#     https://mosh.org/
#
# An archival copy of a very general, old, 
# probably outdated, tutorial site:
#
#     https://web.archive.org/web/20200428001917/http://www.linuxhomenetworking.com/
#
#:::::::::::::::::::::::SSH_Minitutorial::end::::::::::::::::::::::::::::::
#:::::::::::::::SSH_client_side_configuration::start:::::::::::::::::::::::

Host mydomain_com_alias_for_local_commandline_use
    IdentitiesOnly yes
    #IdentitiesOnly no
    IdentityFile ~/.ssh/2018_06_xx_generated_private_key.txt
    PubkeyAuthentication=yes
    HostName mydomain.com
    Port 6666
    User my_username_at_server_side

    # The interval between keep-alive-packets
    # that the client sends to the server to 
    # probe, whether the connection to the server
    # exists. Unit is seconds.
    ServerAliveInterval 32760 
 
    # Number of keep-alive-packets that are allowed to 
    # be without an answer before the connection is 
    # shut down.
    ServerAliveCountMax 400

    # It makes sense to set the ServerAliveInterval and ServerAliveCountMax 
    # to some huge value, because sometimes
    # servers do not answer even, when the SSH connection
    # is alive. A project that aims to 
    # automatically restart broken SSH pipes is the autossh
    # https://www.harding.motd.ca/autossh/

    #::::::::::ssh_connection_multiplexing_configuration::start::::::::::::
    # https://www.tecmint.com/speed-up-ssh-connections-in-linux/
    # http://www.manpagez.com/man/5/ssh_config/
    # http://www.manpagez.com/man/5/sshd_config/
    # https://unix.stackexchange.com/questions/49912/close-ssh-session-that-has-controlpersist-and-is-kept-alive-in-the-background

    ControlPersist 11
    # Default unit: seconds.
    # When used in conjunction with ControlMaster, specifies that the
    # master connection should remain open in the background (waiting
    # for future client connections) after the initial client connec-
    # tion has been closed.  If set to no (the default), then the mas-
    # ter connection will not be placed into the background, and will
    # close as soon as the initial client connection is closed.  If set
    # to yes or 0, then the master connection will remain in the back-
    # ground indefinitely (until killed or closed via a mechanism such
    # as the "ssh -O exit").  If set to a time in seconds, or a time in
    # any of the formats documented in sshd_config(5), then the back-
    # grounded master connection will automatically terminate after it
    # has remained idle (with no client connections) for the specified
    # time.
    
    ControlMaster auto
    # Enables the sharing of multiple sessions over a single network
    # connection.  When set to yes, ssh(1) will listen for connections
    # on a control socket specified using the ControlPath argument.
    # Additional sessions can connect to this socket using the same
    # ControlPath with ControlMaster set to no (the default).  These
    # sessions will try to reuse the master instance's network connec-
    # tion rather than initiating new ones, but will fall back to con-
    # necting normally if the control socket does not exist, or is not
    # listening.
    # #
    # Setting this to ask will cause ssh(1) to listen for control con-
    # nections, but require confirmation using ssh-askpass(1).  If the
    # ControlPath cannot be opened, ssh(1) will continue without con-
    # necting to a master instance.
    # #
    # X11 and ssh-agent(1) forwarding is supported over these multi-
    # plexed connections, however the display and agent forwarded will
    # be the one belonging to the master connection i.e. it is not pos-
    # sible to forward multiple displays or agents.
    # #
    # Two additional options allow for opportunistic multiplexing: try
    # to use a master connection but fall back to creating a new one if
    # one does not already exist.  These options are: auto and autoask.
    # The latter requires confirmation like the ask option.

    # %r --- username at the server
    # %h --- hostname of the server
    # %p --- port at server
    # %i --- key ID
    # %s --- serial number of the key
    ControlPath  ~/.ssh/one_socket_per_shared_SSH_connection/%h_%r_%i
    # Specify the path to the control socket used for connection shar-
    # ing as described in the ControlMaster section above or the string
    # none to disable connection sharing.  Arguments to ControlPath may
    # use the tilde syntax to refer to a user's home directory, the
    # tokens described in the TOKENS section and environment variables
    # as described in the ENVIRONMENT VARIABLES section.  It is recom-
    # mended that any ControlPath used for opportunistic connection
    # sharing include at least %h, %p, and %r (or alternatively %C) and
    # be placed in a directory that is not writable by other users.
    # This ensures that shared connections are uniquely identified.
    #::::::::::ssh_connection_multiplexing_configuration::end::::::::::::::


#--------------------------------------------------------------------------
#:::::::::::::::SSH_client_side_configuration::end:::::::::::::::::::::::::
#--------------------------------------------------------------------------
# S_VERSION_OF_THIS_FILE="7583b02c-7bcc-4317-ac15-f10211b157e7"
#==========================================================================
