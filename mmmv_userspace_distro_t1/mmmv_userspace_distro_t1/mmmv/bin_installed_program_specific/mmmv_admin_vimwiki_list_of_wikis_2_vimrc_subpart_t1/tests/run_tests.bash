#!/usr/bin/env bash
#==========================================================================
# Initial author of this file: Martin.Vahi@softf1.com
# This file is in public domain.
#
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: 0BSD
#
# The main point of entry to this code is the "func_main" 
# at the end of the file.
#==========================================================================
S_FP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
S_FP_ORIG="`pwd`" # required by some tests
S_TIMESTAMP="`date +%Y`_`date +%m`_`date +%d`_T_`date +%H`h_`date +%M`min_`date +%S`s"
#--------------------------------------------------------------------------
func_assert_error_code_zero(){
    local S_ERR_CODE="$1" # the "$?"
    local S_GUID_CANDIDATE="$2"
    #------------------------------
    if [ "$S_ERR_CODE" != "" ]; then
        # If the "$?" were evaluated in this function, 
        # then it would be "0" even, if it is
        # something else at the calling code.
        if [ "$S_ERR_CODE" != "0" ]; then
            echo ""
            echo -e "\e[31mTest failed. \e[39m"
            echo "    S_ERR_CODE==\"$S_ERR_CODE\""
            echo "GUID=='624ca5e6-4bb2-4e25-9236-b152901017e7'"
            echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            echo ""
            #--------
            exit 1
        fi
    fi
    #------------------------------
} # func_assert_error_code_zero

#--------------------------------------------------------------------------
S_FP_MMMV_BASH_BOILERPLATE_T2_BASH="`cd $S_FP_DIR/; pwd`/lib/2022_10_31_mmmv_bash_boilerplate_t2/mmmv_bash_boilerplate_t2.bash"
#--------------------------------------------------------------------------
if [ ! -e "$S_FP_MMMV_BASH_BOILERPLATE_T2_BASH" ]; then
    func_assert_error_code_zero "42" '29fc8914-5762-4f7f-a846-b152901017e7'
fi
if [ -d "$S_FP_MMMV_BASH_BOILERPLATE_T2_BASH" ]; then
    func_assert_error_code_zero "42" 'ffdd0e21-80a5-4629-a816-b152901017e7'
fi
if [ -h "$S_FP_MMMV_BASH_BOILERPLATE_T2_BASH" ]; then
    func_assert_error_code_zero "42" '3b77e402-e5e7-4223-9b26-b152901017e7'
fi
source "$S_FP_MMMV_BASH_BOILERPLATE_T2_BASH"
func_assert_error_code_zero "$?" '13c70843-1934-4ce5-be36-b152901017e7'
func_mmmv_assert_Linux_or_BSD_t1 'd4d06f42-b8fa-44f9-a2e6-b152901017e7'
func_mmmv_exc_verify_S_FP_ORIG_t2
func_mmmv_wait_and_sync_t1
#--------------------------------------------------------------------------
func_mmmv_exit_if_not_on_path_t2 "cat" 
func_mmmv_exit_if_not_on_path_t2 "find"
func_mmmv_exit_if_not_on_path_t2 "ruby"
func_mmmv_exit_if_not_on_path_t2 "sed"
func_mmmv_exit_if_not_on_path_t2 "xargs"
#--------------------------------------------------------------------------
# TODO: add it to the lib or swap out the lib that contains it already.
func_assert_error_code_nonzero_t1(){
    local S_ERR_CODE="$1" # the "$?"
    local S_GUID_CANDIDATE="$2"
    #------------------------------
    # TODO: may be add optional tests that handle cases with 
    # spaces-tabs like " ", "     ".
    #------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed\e[39m."
        echo "    S_GUID_CANDIDATE==\"$S_GUID_CANDIDATE\""
        echo "GUID=='47ce4284-3c1d-4264-a336-b152901017e7'"
        echo ""
        #--------
        exit 1
    fi
    #------------------------------
    if [ "$S_ERR_CODE" != "" ]; then
        # If the "$?" were evaluated in this function, 
        # then it would be "0" even, if it is
        # something else at the calling code.
        if [ "$S_ERR_CODE" == "0" ]; then
            echo ""
            echo -e "\e[31mTest failed. \e[39m"
            echo "    S_ERR_CODE==\"$S_ERR_CODE\""
            echo "GUID=='954c7356-7321-446b-a246-b152901017e7'"
            echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            echo ""
            #--------
            exit 1
        fi
    else # "$S_ERR_CODE" == ""
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed\e[39m."
        echo "    S_ERR_CODE==\"$S_ERR_CODE\""
        echo "GUID=='c10e8cc7-96d8-4389-8246-b152901017e7'"
        echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
        echo ""
        #--------
        exit 1
    fi
    #------------------------------
} # func_assert_error_code_nonzero_t1
#--------------------------------------------------------------------------
S_FP_RB="`cd $S_FP_DIR/../bin; pwd`/mmmv_admin_vimwiki_list_of_wikis_2_vimrc_subpart_t1.rb"
S_FP_TESTWIKIS="$S_FP_DIR/testwikis"
S_FP_TESTLISTS="$S_FP_DIR/testlists"
S_FP_TESTLISTS_TEMPLATES="$S_FP_TESTLISTS/testlist_templates"
S_FP_TESTLISTS_TEMPLATES_FAIL="$S_FP_TESTLISTS_TEMPLATES/expected_to_fail"
S_FP_TESTLISTS_TEMPLATES_PASS="$S_FP_TESTLISTS_TEMPLATES/expected_to_pass"
S_FP_TESTLISTS_CG="$S_FP_TESTLISTS/autogenerated_by_adding_full_paths"
#--------
S_TMP_0="single_testrun_copy_for_reproducability"
S_FP_TESTLISTS_CGTS="$S_FP_TESTLISTS_CG/$S_TIMESTAMP$S_TMP_0"
S_FP_TESTLISTS_CGTS_FAIL="$S_FP_TESTLISTS_CGTS/expected_to_fail"
S_FP_TESTLISTS_CGTS_FAIL="$S_FP_TESTLISTS_CGTS/expected_to_pass"
#--------------------------------------------------------------------------
SB_OPTIONAL_BAN_SYMLINKS="t"
func_mmmv_assert_file_exists_t1 "$S_FP_RB" \
    "3a9f4ca3-7d31-4d62-9916-b152901017e7" \
    "$SB_OPTIONAL_BAN_SYMLINKS"
#--------
func_mmmv_assert_folder_exists_t1 "$S_FP_TESTWIKIS" \
    "304cb235-21ac-4ed8-8b36-b152901017e7" \
    "$SB_OPTIONAL_BAN_SYMLINKS"
func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS" \
    "490e2ae5-0921-45c1-ae36-b152901017e7" \
    "$SB_OPTIONAL_BAN_SYMLINKS"
func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS_TEMPLATES" \
    "12a99b43-7454-4ffe-a416-b152901017e7" \
    "$SB_OPTIONAL_BAN_SYMLINKS"
func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS_TEMPLATES_FAIL" \
    "e75ac630-1bcf-425f-8ca6-b152901017e7" \
    "$SB_OPTIONAL_BAN_SYMLINKS"
func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS_TEMPLATES_PASS" \
    "63042b93-0221-4430-a126-b152901017e7" \
    "$SB_OPTIONAL_BAN_SYMLINKS"
# The $S_FP_TESTWIKIS_CG is expected to be autogenerated from scratch.
#--------------------------------------------------------------------------
# The reason, why the lists have to be generated in stead of 
# using just constant files is that the lists must contain 
# absolute paths to the testwikis, but the partent folder 
# of this project changes whenever the project folder is 
# recursively copied to some other place.
func_autogenerate_lists_of_testwikis(){
    #----------------------------------------
    func_mmmv_create_folder_t1 "$S_FP_TESTLISTS_CGTS"
    nice -n 6 cp -f -R $S_FP_TESTLISTS_TEMPLATES/* $S_FP_TESTLISTS_CGTS/
    func_assert_error_code_zero "$?" '30cc5501-cc1f-49c0-8f46-b152901017e7'
    func_mmmv_wait_and_sync_t1
    #----------------------------------------
    cd "$S_FP_TESTLISTS_CGTS"
    func_assert_error_code_zero "$?" '93c6af1c-c45f-4169-8066-b152901017e7'
    local S_TMP_LINES="$(find . -name '*.txt.template')" 
    #----
    local S_ESCAPED_PATH="`\
        printf '%s' \"$S_FP_TESTWIKIS\" | \
        sed -e 's/[\/]/\\\\\\//g' | \
        sed -e 's/[[:space:]]/\\\\ /g' | \
        sed -e 's/\"/\\\\\"/g'\
        `"
    #----
    wait 
    #echo "S_ESCAPED_PATH==$S_ESCAPED_PATH" ; wait; exit 1
    local S_LINE=""
    local S_BASH=""
    local S_PATH_SUFFIX=""
    for S_LINE in $S_TMP_LINES; do  
        # Test-code:
        #     #--------
        #     echo "$(\
        #         cat $S_LINE | \
        #         sed -e 's/S_FP_TESTWIKIS/Foo\/Bar/g' > \
        #             `echo $S_LINE | sed -e 's/[.]txt[.]template/.txt/g'` \
        #     )" > /dev/null ;  
        #     #--------
        #     echo "$(cat $S_LINE | sed -e 's/S_FP_TESTWIKIS/Foo\/Bar/g' > `echo $S_LINE | sed -e 's/[.]txt[.]template/.txt/g'` )" > /dev/null ; 
        #     #--------
        S_BASH="echo \"\$(cat \$S_LINE | sed -e 's/S_FP_TESTWIKIS/"
        S_PATH_SUFFIX="/g' > \`echo \$S_LINE | sed -e 's/[.]txt[.]template/.txt/g'\` )\" > /dev/null ; "
        S_BASH="$S_BASH$S_ESCAPED_PATH$S_PATH_SUFFIX"
        #printf "%s" "$S_BASH"
        eval "$S_BASH"
        func_mmmv_wait_and_sync_t1
    done
    #----------------------------------------
    cd "$S_FP_TESTLISTS_CGTS"
    func_assert_error_code_zero "$?" '30903221-666e-4dd4-9556-b152901017e7'
    find . -name '*.txt.template' | xargs rm  
    func_assert_error_code_zero "$?" 'e3732933-1b90-4265-a056-b152901017e7'
    func_mmmv_wait_and_sync_t1
    #----------------------------------------
} # func_autogenerate_lists_of_testwikis
#--------------------------------------------------------------------------
func_prepare_tmp_vimrc_subpart(){
    echo "" > $S_FP_TMP_VIMRC_SUBFILE
    echo "" >> $S_FP_TMP_VIMRC_SUBFILE
    echo "$S_BLANK_MARKER_START" >> $S_FP_TMP_VIMRC_SUBFILE
    echo "$S_BLANK_MARKER_END" >> $S_FP_TMP_VIMRC_SUBFILE
    echo "" >> $S_FP_TMP_VIMRC_SUBFILE
    func_mmmv_wait_and_sync_t1
} # func_prepare_tmp_vimrc_subpart
#--------------------------------------------------------------------------
func_run_test_with_a_testlist_that_is_expected_to_fail(){
    local S_FP_LIST="$1"
    #----------------------------------------
    local SB_OPTIONAL_BAN_SYMLINKS="t"
    func_mmmv_assert_file_exists_t1 "$S_FP_LIST" \
        "24e9123a-9203-4d45-ad26-b152901017e7" \
        "$SB_OPTIONAL_BAN_SYMLINKS"
    echo "Testing with a list file that is expected to "
    echo -e "    trigger a \e[33mw\e[39marning,\e[36m `filename $S_FP_LIST` \e[39m.."
    #----------------------------------------
    $S_FP_RB --origin "$S_FP_LIST" --sb_run_in_testing_mode=t
    func_assert_error_code_nonzero_t1 "$?" '63e5b551-2ef5-4384-ad26-b152901017e7'
    #----------------------------------------
} # func_run_test_with_a_testlist_that_is_expected_to_fail
#--------------------------------------------------------------------------
func_run_test_with_a_testlist_that_is_expected_to_pass(){
    local S_FP_LIST="$1"
    #----------------------------------------
    local SB_OPTIONAL_BAN_SYMLINKS="t"
    func_mmmv_assert_file_exists_t1 "$S_FP_LIST" \
        "43df8034-ab65-471e-8816-b152901017e7" \
        "$SB_OPTIONAL_BAN_SYMLINKS"
    echo -e "Testing\e[36m `filename $S_FP_LIST` \e[39m.."
    #----------------------------------------
    $S_FP_RB --origin "$S_FP_LIST" --sb_run_in_testing_mode=t
    func_assert_error_code_zero "$?" '623284aa-53ed-4802-8a26-b152901017e7'
    #----------------------------------------
    func_prepare_tmp_vimrc_subpart
    $S_FP_RB --origin "$S_FP_LIST" --sb_run_in_testing_mode=t --vimrc_subpart=$S_FP_TMP_VIMRC_SUBFILE
    func_assert_error_code_zero "$?" '937acce2-e667-45f3-b936-b152901017e7'
    #----------------------------------------
    $S_FP_RB --origin "$S_FP_LIST" --sb_run_in_testing_mode=f
    func_assert_error_code_zero "$?" '39559f14-c29d-4eb6-8e26-b152901017e7'
    #----------------------------------------
} # func_run_test_with_a_testlist_that_is_expected_to_pass
#--------------------------------------------------------------------------
func_run_tests_with_all_testlists_that_are_expected_to_fail(){
    #----------------------------------------
    local S_FP_TESTLISTS_FAIL="$S_FP_TESTLISTS_CGTS/expected_to_fail"
    cd "$S_FP_TESTLISTS_FAIL"
    func_assert_error_code_zero "$?" '36821352-d1f7-47a0-a126-b152901017e7'
    #----------------------------------------
    func_mmmv_ar_ls_t1 "AR_X" "$S_FP_TESTLISTS_FAIL"
    #    AR_2=${AR_X[@]}  # flawed array assignment that tokenizes by space
    local S_TMP=${#AR_X[@]}
    #--------------------
    local S_FP=""
    local S_ITER="" 
    #echo "AR_X length: $S_TMP"
    for S_ITER in ${AR_X[@]}; do
         S_FP="$S_FP_TESTLISTS_FAIL/$S_ITER"
         #echo "AR_X element:[$S_FP]" 
         if [ "`echo \"$S_FP\" | grep -E '[/]testlist_.+'`" != "" ]; then 
             # The if-clause is to esclude files like "COMMENTS.txt"
             # from being used as a testlist.
             func_run_test_with_a_testlist_that_is_expected_to_fail "$S_FP"
         fi
    done
    #----------------------------------------
} # func_run_tests_with_all_testlists_that_are_expected_to_fail
#--------------------------------------------------------------------------
func_run_tests_with_all_testlists_that_are_expected_to_pass(){
    #----------------------------------------
    local S_FP_TESTLISTS_PASS="$S_FP_TESTLISTS_CGTS/expected_to_pass"
    cd "$S_FP_TESTLISTS_PASS"
    func_assert_error_code_zero "$?" '3a7cae94-6fc9-46db-9736-b152901017e7'
    #----------------------------------------
    func_mmmv_ar_ls_t1 "AR_X" "$S_FP_TESTLISTS_PASS"
    #    AR_2=${AR_X[@]}  # flawed array assignment that tokenizes by space
    local S_TMP=${#AR_X[@]}
    #--------------------
    local S_FP=""
    local S_ITER="" 
    #echo "AR_X length: $S_TMP"
    for S_ITER in ${AR_X[@]}; do
         S_FP="$S_FP_TESTLISTS_PASS/$S_ITER"
         #echo "AR_X element:[$S_FP]" 
         if [ "`echo \"$S_FP\" | grep -E '[/]testlist_.+'`" != "" ]; then 
             # The if-clause is to esclude files like "COMMENTS.txt"
             # from being used as a testlist.
             func_run_test_with_a_testlist_that_is_expected_to_pass "$S_FP"
         fi
    done
    #----------------------------------------
} # func_run_tests_with_all_testlists_that_are_expected_to_pass
#--------------------------------------------------------------------------
func_delete_temporary_files(){
    #----------------------------------------
    local SB_OPTIONAL_BAN_SYMLINKS="t"
    local S_TMP_0="`echo \"$S_FP_TESTLISTS_CGTS\" | \
                        grep -v ';' | \
                        grep -v '&' | \
                        grep -v '=' | \
                        grep 'autogenerated_by_adding_full_paths' `"
    if [ "$S_TMP_0" != "" ]; then
        #-------
        func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS_CGTS/expected_to_fail" \
            "b6aa4573-b523-4370-8956-b152901017e7" \
            "$SB_OPTIONAL_BAN_SYMLINKS"
        func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS_CGTS/expected_to_pass" \
            "1c9e5e02-2251-43e4-91f6-b152901017e7" \
            "$SB_OPTIONAL_BAN_SYMLINKS"
        #-------
        rm -fr "$S_FP_TESTLISTS_CGTS"
        func_assert_error_code_zero "$?" 'a445fcde-38c7-4588-aed6-b152901017e7'
        if [ -e "$S_FP_TESTLISTS_CGTS" ]; then
             echo ""
             echo -e "\e[32mFailed to delete folder\e[39m or file "
             echo ""
             echo "    S_FP_TESTLISTS_CGTS==$S_FP_TESTLISTS_CGTS"
             echo ""
             echo "GUID=='388b2f34-0789-4185-8f36-b152901017e7'"
             echo ""
        fi
        #-------
    fi
    #----------------------------------------
    # A bit of duplication here, but may be it catches 
    # some errors with the extra tests.
    S_TMP_0="`echo \"$S_FP_TESTLISTS_CG\" | \
                        grep -v ';' | \
                        grep -v '&' | \
                        grep -v '=' | \
                        grep 'autogenerated_by_adding_full_paths' `"
    if [ "$S_TMP_0" != "" ]; then
        #-------
        func_mmmv_assert_folder_exists_t1 "$S_FP_TESTLISTS_CG" \
            "814aeaba-3625-4ba0-9d56-b152901017e7" \
            "$SB_OPTIONAL_BAN_SYMLINKS"
        #-------
        rm -fr "$S_FP_TESTLISTS_CG"
        func_assert_error_code_zero "$?" 'ee1f0740-b6e7-449f-b736-b152901017e7'
        if [ -e "$S_FP_TESTLISTS_CG" ]; then
            echo ""
            echo -e "\e[32mFailed to delete folder\e[39m or file "
            echo ""
            echo "    S_FP_TESTLISTS_CG==$S_FP_TESTLISTS_CG"
            echo ""
            echo "GUID=='23d708b4-dd1c-4e12-8936-b152901017e7'"
            echo ""
        fi
        #-------
    fi
    #----------------------------------------
    if [ -e "$S_FP_TMP_VIMRC_SUBFILE" ]; then
        if [ ! -d "$S_FP_TMP_VIMRC_SUBFILE" ]; then
            if [ -h "$S_FP_TMP_VIMRC_SUBFILE" ]; then
                echo ""
                echo -e "\e[32mFound a symlink in stead of a file.\e[39m"
                echo ""
                echo "    S_FP_TMP_VIMRC_SUBFILE==$S_FP_TMP_VIMRC_SUBFILE"
                echo ""
                echo "GUID=='4e577f44-5ba6-44e4-8e56-b152901017e7'"
                echo ""
            else
                rm -f "$S_FP_TMP_VIMRC_SUBFILE"
                func_mmmv_wait_and_sync_t1
                if [ -e "$S_FP_TMP_VIMRC_SUBFILE" ]; then
                    echo ""
                    echo -e "\e[32mFailed to delete file\e[39m."
                    echo ""
                    echo "    $S_FP_TMP_VIMRC_SUBFILE"
                    echo ""
                    echo "GUID=='b15a4723-1336-4cfd-8655-b152901017e7'"
                    echo ""
                fi
            fi
        else
            echo ""
            echo -e "\e[32mFound a folder in stead of a file.\e[39m"
            echo ""
            echo "    S_FP_TMP_VIMRC_SUBFILE==$S_FP_TMP_VIMRC_SUBFILE"
            echo ""
            echo "GUID=='dc434ceb-c1fe-4366-9ad5-b152901017e7'"
            echo ""
        fi 
    fi
    #----------------------------------------
} # func_delete_temporary_files
#--------------------------------------------------------------------------
S_FP_TMP_VIMRC_SUBFILE="/tmp/tmp_`whoami`_testing_mmmv_admin_vimwiki_list_of_wikis_2_vimrc_subpart.vimscript"
S_BLANK_MARKER_START="MMMV_USERSPACE_DISTRO_T1_VIMWIKI_LIST_OF_WIKIS_BLANK_01_START"
S_BLANK_MARKER_END="MMMV_USERSPACE_DISTRO_T1_VIMWIKI_LIST_OF_WIKIS_BLANK_01_END"

echo ""
func_main(){
    #----------------------------------------
    echo "" > $S_FP_TMP_VIMRC_SUBFILE
    func_assert_error_code_zero "$?" 'e1591912-b7fc-4a02-9d35-b152901017e7'
    func_mmmv_wait_and_sync_t1
    #--------
    SB_OPTIONAL_BAN_SYMLINKS="t"
    func_mmmv_assert_file_exists_t1 "$S_FP_TMP_VIMRC_SUBFILE" \
        "0270aa9c-6bf1-41b9-b7f6-b152901017e7" \
        "$SB_OPTIONAL_BAN_SYMLINKS"
    #----------------------------------------
    func_autogenerate_lists_of_testwikis # makes sure that 
                                         # testlists include full 
                                         # paths to the testwikis.
    func_run_tests_with_all_testlists_that_are_expected_to_fail
    func_run_tests_with_all_testlists_that_are_expected_to_pass
    #----------------------------------------
    func_delete_temporary_files
    echo ""
    echo -e "\e[32mSuperficial tests passed without detecting any errors. \e[39m"
    echo ""
    #----------------------------------------
} # func_main
func_main
#--------------------------------------------------------------------------
exit 0 # no errors detected
#--------------------------------------------------------------------------
# S_VERSION_OF_THIS_FILE="e42c9f5f-e74d-4ea9-be46-b152901017e7"
#==========================================================================
