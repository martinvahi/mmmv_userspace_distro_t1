#!/usr/bin/env bash
#==========================================================================
# Initial author of this file: Martin.Vahi@softf1.com
# This file is in public domain.
#
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: 0BSD
#
# As exiting from the ~/.bashrc exits the Bash session,
# the ~/.bashrc and its subparts must not call "exit".
# This script and all of the functions defined in it are "exit" free.
#==========================================================================
# The 
SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
# is a global variable for returning a string form of 
# a boolean value from verification functions. 
# "t" stands for "true" and "f" stands for "false".
# The same with the 
SB_NO_ERRORS_YET="t" # domain=={"t","f"} 
# except that the SB_NO_ERRORS_YET is expected to be
# reset to "t" by the client code, but the value of the 
# SB_VERIFICATION_FAILED is overwritten by the functions
# that return their results by using it.
#--------------------------------------------------------------------------

func_mmmv_wait_and_sync_t1(){
    wait # for background processes started by this Bash script to exit/finish
    sync # network drives, USB-sticks, etc.
    wait # for sync
} # func_mmmv_wait_and_sync_t1

#--------------------------------------------------------------------------
func_mmmv_init_s_timestamp_if_not_inited_t1(){
    if [ "$S_TIMESTAMP" == "" ]; then
        if [ "`which date 2> /dev/null`" != "" ]; then
            S_TIMESTAMP="`date +%Y`_`date +%m`_`date +%d`_T_`date +%H`h_`date +%M`min_`date +%S`s"
        else
            S_TIMESTAMP="0000_00_00_T_00h_00min_00s"
            echo ""
            echo -e "The console program \"\e[31mdate\e[39m\" is missing from the PATH."
            echo "Using a constant value, "
            echo ""
            echo "    S_TIMESTAMP=\"$S_TIMESTAMP\""
            echo ""
            echo "GUID=='4ce6a4c1-4c1e-44d7-b4a7-23b280d0b6e7'"
            echo ""
        fi
    fi
} # func_mmmv_init_s_timestamp_if_not_inited_t1

#--------------------------------------------------------------------------

func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1(){
    local S_GUID_CANDIDATE_OPTIONAL="$1"
    #----------------------------------------------------------------------
    SB_VERIFICATION_FAILED="f" # a global variable
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET" != "t" ]; then 
        echo ""
        echo "The global variable "
        echo ""
        echo "    SB_NO_ERRORS_YET==\"$SB_NO_ERRORS_YET\""
        echo ""
        echo "is expected to be initialized to \"t\" before calling this function."
        if [ "$SB_NO_ERRORS_YET" != "f" ]; then 
            echo "and its domain is {\"t\", \"f\"}."
        fi
        echo "GUID=='b70f474b-d0cf-4914-b4a7-23b280d0b6e7'"
        if [ "$S_GUID_CANDIDATE_OPTIONAL" != "" ]; then 
            echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE_OPTIONAL'"
        fi
        echo ""
        SB_VERIFICATION_FAILED="t"
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_verify_sb_t_f_but_do_not_exit_t1(){
    local SB_CANDIDATE="$1" 
    local S_GUID_CANDIDATE="$2" 
    #----------------------------------------------------------------------
    SB_VERIFICATION_FAILED="f" # a global variable
    #----------------------------------------------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        SB_VERIFICATION_FAILED="t"
        echo ""
        echo -e "\e[31mThe value of the S_GUID_CANDIDATE is an empty string\e[39m,"
        echo "but it is expected to be a GUID."
        echo "GUID=='3c6b9a24-c772-47b0-a3a7-23b280d0b6e7'"
        echo ""
    fi 
    #----------------------------------------------------------------------
    if [ "$SB_CANDIDATE" != "t" ]; then
        if [ "$SB_CANDIDATE" != "f" ]; then
            SB_VERIFICATION_FAILED="t"
            echo ""
            echo "The "
            echo ""
            echo "    SB_CANDIDATE==\"$SB_CANDIDATE\""
            echo ""
            echo "but the valid values are: \"t\", \"f\"."
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo "GUID=='129d00fc-8f2e-40a3-9397-23b280d0b6e7'"
            echo ""
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_sb_t_f_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1(){
    SB_S_FP_ORIG_VERIFICATION_FAILED="f"
    if [ "$S_FP_ORIG" == "" ]; then 
        SB_S_FP_ORIG_VERIFICATION_FAILED="t"
        echo ""
        echo -e "\e[31mThe code of this script has the flaw\e[39m that"
        echo "the variable S_FP_ORIG has not been set."
        echo "GUID=='5481e993-87cc-4fbf-8597-23b280d0b6e7'"
        echo ""
    else
        if [ ! -e "$S_FP_ORIG" ]; then 
            SB_S_FP_ORIG_VERIFICATION_FAILED="t"
            echo ""
            echo -e "\e[31mThe code of this script has the flaw\e[39m that "
            echo "the variable S_FP_ORIG has been declared, but "
            echo "its value is some string that is not a file or folder path."
            echo "It is expected to be a folder path."
            echo ""
            echo "    S_FP_ORIG==\"$S_FP_ORIG\""
            echo ""
            echo "GUID=='19e7ab9a-56bc-4032-8497-23b280d0b6e7'"
            echo ""
        else
            if [ ! -d "$S_FP_ORIG" ]; then 
                SB_S_FP_ORIG_VERIFICATION_FAILED="t"
                echo ""
                echo -e "\e[31mThe code of this script has the flaw\e[39m that "
                echo "the variable S_FP_ORIG references a file, but "
                echo "it is expected to reference a folder."
                echo ""
                echo "    S_FP_ORIG==$S_FP_ORIG"
                echo ""
                echo "GUID=='22ff8734-a0e6-479d-9597-23b280d0b6e7'"
                echo ""
            fi
        fi
    fi
    #----------------------------------------------------------------------
    func_mmmv_verify_sb_t_f_but_do_not_exit_t1 \
        "$SB_S_FP_ORIG_VERIFICATION_FAILED" \
        "7106e2f4-4db3-4a89-8da7-23b280d0b6e7"
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        # The global variable 
        SB_VERIFICATION_FAILED="$SB_S_FP_ORIG_VERIFICATION_FAILED"
        # is assigned a value here for general compatibility.
    fi
    #----------------------------------------------------------------------
    # exit 1 # must NOT be called in ~/.bashrc, because 
             # exiting from the ~/.bashrc exits the session.
    #----------------------------------------------------------------------
    # Usage example:
    #    func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1
    #    if [ "$SB_S_FP_ORIG_VERIFICATION_FAILED" == "f" ]; then 
    #        cd "$S_FP_ORIG"
    #    else 
    #        echo ""
    #        echo "The code of this script is flawed."
    #        echo "GUID=='3518591e-2f4e-4852-a597-23b280d0b6e7'"
    #        echo ""
    #    fi
} # func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1

#--------------------------------------------------------------------------
SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED="f"
func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t2(){
    #----------------------------------------------------------------------
    if [ "$SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED" != "t" ]; then
        func_mmmv_verify_sb_t_f_but_do_not_exit_t1 \
            "$SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED" \
            "5b1efe72-0907-48ad-b2a7-23b280d0b6e7"
        if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
            func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t1
            SB_FUNC_MMMV_VERIFY_S_FP_ORIG_BUT_DO_NOT_EXIT_T2_S_FB_ORIG_ALREADY_VERIFIED="t"
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_S_FP_ORIG_but_do_not_exit_t2

#--------------------------------------------------------------------------
func_mmmv_assert_nonempty_string_but_do_not_exit_t1(){
    local S_IN="$1"
    local S_VARIABLE_NAME_IN_CALLING_CODE="$2"
    local S_GUID_CANDIDATE="$3"
    #----------------------------------------------------------------------
    local SB_NO_ERRORS_YET_LOCAL="t"
    if [ "$S_GUID_CANDIDATE" == "" ]; then 
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
        echo ""
        echo "    S_GUID_CANDIDATE==\"\""
        echo ""
        echo "but it is expected to be a GUID."
        echo "GUID=='4561a02b-0226-43db-9497-23b280d0b6e7'"
        echo ""
        SB_NO_ERRORS_YET_LOCAL="f"
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_GUID_CANDIDATE" != "" ]; then
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "$S_GUID_CANDIDATE"
        else
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "df78061a-b907-4856-9197-23b280d0b6e7"
        fi
        if [ "$SB_VERIFICATION_FAILED" == "t" ]; then 
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_VARIABLE_NAME_IN_CALLING_CODE" == "" ]; then 
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
            echo ""
            echo "    S_VARIABLE_NAME_IN_CALLING_CODE==\"\""
            echo ""
            echo "GUID=='0f005428-16ad-4a1e-a397-23b280d0b6e7'"
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_IN" == "" ]; then 
            echo ""
            echo -e "\e[31mThere is a flaw somewhere in the code\e[39m that"
            echo "uses a variable named \"$S_VARIABLE_NAME_IN_CALLING_CODE\"." 
            echo ""
            echo "    $S_VARIABLE_NAME_IN_CALLING_CODE==\"\""
            echo ""
            echo "but it is expected to be something other than an empty string."
            echo "GUID=='a4b6282b-c566-4f29-9197-23b280d0b6e7'"
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "f" ]; then 
        SB_NO_ERRORS_YET="f"
        SB_VERIFICATION_FAILED="t"
    else
        if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
            SB_VERIFICATION_FAILED="f"
        else
            echo ""
            echo -e "\e[31mThe code of this function is flawed.\e[39m The"
            echo "GUID=='51335152-b21c-46e8-8b97-23b280d0b6e7'"
            echo ""
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_assert_nonempty_string_but_do_not_exit_t1

#--------------------------------------------------------------------------
# SB_NO_ERRORS_YET="t" # domain=={"t","f"}, initial declaration resides upwards from this line
func_mmmv_verify_sb_t_f_but_do_not_exit_t2(){
    local SB_VARIABLE_VALUE="$1"
    local S_VARIABLE_NAME_IN_CALLING_CODE="$2"
    local S_GUID_CANDIDATE="$3"
    #----------------------------------------------------------------------
    local SB_NO_ERRORS_YET_LOCAL="t"
    if [ "$S_GUID_CANDIDATE" == "" ]; then 
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
        echo ""
        echo "    S_GUID_CANDIDATE==\"\""
        echo ""
        echo "but it is expected to be a GUID."
        echo "GUID=='f80cad36-6798-4b85-8397-23b280d0b6e7'"
        echo ""
        SB_NO_ERRORS_YET_LOCAL="f"
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_GUID_CANDIDATE" != "" ]; then
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "$S_GUID_CANDIDATE"
        else
            func_mmmv_verify_that_the_SB_NO_ERRORS_YET_has_the_value_of_t_but_do_not_exit_t1 \
                "29497124-f1c4-413e-9297-23b280d0b6e7"
        fi
        if [ "$SB_VERIFICATION_FAILED" == "t" ]; then 
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$S_VARIABLE_NAME_IN_CALLING_CODE" == "" ]; then 
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m The"
            echo ""
            echo "    S_VARIABLE_NAME_IN_CALLING_CODE==\"\""
            echo ""
            echo "GUID=='44d8b0e2-70a8-41b6-9897-23b280d0b6e7'"
            if [ "$S_GUID_CANDIDATE" != "" ]; then
                echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            fi
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        if [ "$SB_VARIABLE_VALUE" != "t" ]; then 
            if [ "$SB_VARIABLE_VALUE" != "f" ]; then 
                echo ""
                echo -e "\e[31mThere is a flaw somewhere in the code\e[39m that"
                echo "uses a variable named \"$S_VARIABLE_NAME_IN_CALLING_CODE\". The " 
                echo ""
                echo "    $S_VARIABLE_NAME_IN_CALLING_CODE==\"$SB_VARIABLE_VALUE\""
                echo ""
                echo "but it is expected to be either \"t\" or \"f\"."
                echo "GUID=='0b464359-891c-4320-9197-23b280d0b6e7'"
                if [ "$S_GUID_CANDIDATE" != "" ]; then
                    echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
                fi
                echo ""
                SB_NO_ERRORS_YET_LOCAL="f"
            fi
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "f" ]; then 
        SB_NO_ERRORS_YET="f"
        SB_VERIFICATION_FAILED="t"
    else
        if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
            SB_VERIFICATION_FAILED="f"
        else
            echo ""
            echo -e "\e[31mThe code of this function is flawed.\e[39m The"
            echo "GUID=='20bf1192-adec-4e68-b597-23b280d0b6e7'"
            echo ""
        fi
    fi
    #----------------------------------------------------------------------
} # func_mmmv_verify_sb_t_f_but_do_not_exit_t2

#--------------------------------------------------------------------------
# It's the same as the 
# func_mmmv_verify_sb_t_f_but_do_not_exit_t2
# except that the GUID candidate is optional.
func_mmmv_verify_sb_t_f_but_do_not_exit_t3(){
    local SB_VARIABLE_VALUE="$1"
    local S_VARIABLE_NAME_IN_CALLING_CODE="$2"
    local S_GUID_CANDIDATE_OPTIONAL="$3" # It's OK for it to be an empty string
    #----------------------------------------------------------------------
    local S_GUID_CANDIDATE="$S_GUID_CANDIDATE_OPTIONAL"
    if [ "$S_GUID_CANDIDATE_OPTIONAL" == "" ]; then 
        S_GUID_CANDIDATE="6d330551-a488-4c4f-b497-23b280d0b6e7"
    fi
    func_mmmv_verify_sb_t_f_but_do_not_exit_t2 \
        "$SB_VARIABLE_VALUE" \
        "$S_VARIABLE_NAME_IN_CALLING_CODE" \
        "$S_GUID_CANDIDATE"
} # func_mmmv_verify_sb_t_f_but_do_not_exit_t3

#--------------------------------------------------------------------------

func_mmmv_report_an_error_but_do_not_exit_t1(){
    local S_GUID_CANDIDATE="$1" # first  function argument
    local S_ERR_MSG="$2"        # second function argument
    #----------------------------------------------------------------------
    echo ""
    echo -e "\e[31mThe code of this script is flawed.\e[39m"
    if [ "$S_ERR_MSG" != "" ]; then 
        echo "$S_ERR_MSG"
    fi
    if [ "$S_GUID_CANDIDATE" != "" ]; then 
        echo "GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
    fi
    echo "GUID=='4ef49a13-e8fd-43cd-8597-23b280d0b6e7'"
    echo ""
    #----------------------------------------------------------------------
    # exit 1 # must NOT be called in ~/.bashrc, because 
             # exiting from the ~/.bashrc exits the session.
} # func_mmmv_report_an_error_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_report_missing_from_path_and_do_NOT_exit_t1() {
    local S_NAME_OF_THE_EXECUTABLE=$1 # first function argument
    #----------------------------------------------------------------------
    SB_VERIFICATION_FAILED="f"
    local SB_NO_ERRORS_YET_LOCAL="t"
    if [ "$S_NAME_OF_THE_EXECUTABLE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
        echo "The S_NAME_OF_THE_EXECUTABLE must not be an empty string."
        echo "GUID=='6508331f-57b8-48ba-b497-23b280d0b6e7'"
        echo ""
        SB_NO_ERRORS_YET_LOCAL="f"
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "t" ]; then 
        local S_TMP_0="\`which $S_NAME_OF_THE_EXECUTABLE 2>/dev/null\`"
        local S_TMP_1=""
        local S_TMP_2="S_TMP_1=$S_TMP_0"
        eval ${S_TMP_2}
        if [ "$S_TMP_1" == "" ] ; then
            echo ""
            echo "This bash script wished to use the "
            echo -e "\e[31m\"$S_NAME_OF_THE_EXECUTABLE\"\e[39m from the PATH, but "
            echo -e "it was\e[31m missing from the PATH. \e[39m"
            echo "GUID=='cfa0ff35-f0c9-4ab1-b597-23b280d0b6e7'"
            echo ""
            SB_NO_ERRORS_YET_LOCAL="f"
        fi
    fi
    #----------------------------------------------------------------------
    if [ "$SB_NO_ERRORS_YET_LOCAL" == "f" ]; then 
        SB_VERIFICATION_FAILED="t"
    fi
    #----------------------------------------------------------------------
    # exit 1 # must NOT be called in ~/.bashrc, because 
             # exiting from the ~/.bashrc exits the session.
} # func_mmmv_report_missing_from_path_and_do_NOT_exit_t1

#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "ln"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "date"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "printf"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "grep"
#func_mmmv_report_missing_from_path_and_do_NOT_exit_t1 "git"

#--------------------------------------------------------------------------

func_mmmv_verify_that_the_file_exists_but_do_not_exit_t1() {  # S_FP, S_GUID_CANDIDATE
    local S_FP="$1"
    local S_GUID_CANDIDATE="$2"
    local SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE="$3" # domain: {"t","f",""}
                                                       # ""==="t", default "t"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
        echo "This function requires 2 parameters: S_FP, S_GUID_CANDIDATE"
        echo "and has an optional 3. parameter: SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE"
        echo "GUID=='40c64e58-1631-4fcd-b297-23b280d0b6e7'"
        echo ""
        #--------
        SB_VERIFICATION_FAILED="t"
    fi
    #------------------------------
    local SB_DISPLAY_VERIF_FAILURE_MSG="t" # the default
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "" ]; then
            if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" == "f" ]; then
                SB_DISPLAY_VERIF_FAILURE_MSG="f"
            else
                if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "t" ]; then
                    echo ""
                    echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
                    echo ""
                    echo "  SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE==\"$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE\""
                    echo ""
                    echo "Valid values are: \"t\", \"f\", \"\" ."
                    echo "\"\" defaults to \"t\"."
                    echo "GUID=='34559929-0911-44f4-9197-23b280d0b6e7'"
                    echo ""
                    #--------
                    SB_VERIFICATION_FAILED="t"
                fi
            fi
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ ! -e "$S_FP" ]; then
            if [ -h "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The path "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "points to a broken symlink, but a file or "
                    echo "a symlink to a file is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='dc63a31f-e827-492a-b297-23b280d0b6e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            else
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The file "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "does not exist."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='1384bd93-ad34-47c9-a197-23b280d0b6e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        else
            if [ -d "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    if [ -h "$S_FP" ]; then
                        echo "The symlink to the folder "
                    else
                        echo "The folder "
                    fi
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "exists, but a file or a symlink to a file is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='6b61aa60-4ce6-46a0-b497-23b280d0b6e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        fi
    fi #  "$SB_VERIFICATION_FAILED" == "f"
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='4177a0b2-e01d-4726-9497-23b280d0b6e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_verify_that_the_file_exists_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1() {  # S_FP, S_GUID_CANDIDATE
    local S_FP="$1"
    local S_GUID_CANDIDATE="$2"
    local SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE="$3" # domain: {"t","f",""}
                                                       # ""==="t", default "t"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$S_GUID_CANDIDATE" == "" ]; then
        echo ""
        echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
        echo "This function requires 2 parameters: S_FP, S_GUID_CANDIDATE"
        echo "and has an optional 3. parameter: SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE"
        echo "GUID=='3ec6bba2-f15e-4f0d-8297-23b280d0b6e7'"
        echo ""
        #--------
        SB_VERIFICATION_FAILED="t"
    fi
    #------------------------------
    local SB_DISPLAY_VERIF_FAILURE_MSG="t" # the default
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "" ]; then
            if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" == "f" ]; then
                SB_DISPLAY_VERIF_FAILURE_MSG="f"
            else
                if [ "$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE" != "t" ]; then
                    echo ""
                    echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
                    echo ""
                    echo "  SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE==\"$SB_DISPLAY_VERIFICATION_FAILURE_MESSAGE\""
                    echo ""
                    echo "Valid values are: \"t\", \"f\", \"\" ."
                    echo "\"\" defaults to \"t\"."
                    echo "GUID=='4c0816d1-f957-4be4-a497-23b280d0b6e7'"
                    echo ""
                    #--------
                    SB_VERIFICATION_FAILED="t"
                fi
            fi
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ ! -e "$S_FP" ]; then
            if [ -h "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The path "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "points to a broken symlink, but a folder "
                    echo "or a symlink to a folder is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='0d4b8d29-26d7-48f0-9287-23b280d0b6e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            else
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    echo "The folder "
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "does not exist."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='c5de4e36-8b40-45d7-a287-23b280d0b6e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        else
            if [ ! -d "$S_FP" ]; then
                if [ "$SB_DISPLAY_VERIF_FAILURE_MSG" == "t" ]; then
                    echo ""
                    if [ -h "$S_FP" ]; then
                        echo "The symlink to an existing file "
                    else
                        echo "The file "
                    fi
                    echo ""
                    echo "    $S_FP "
                    echo ""
                    echo "exists, but a folder is expected."
                    echo "GUID==\"$S_GUID_CANDIDATE\""
                    echo "GUID=='4a43d25a-0cd1-4340-b387-23b280d0b6e7'"
                    echo ""
                fi
                #--------
                SB_VERIFICATION_FAILED="t"
            fi
        fi
    fi #  "$SB_VERIFICATION_FAILED" == "f"
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='448b113e-7343-4b03-b287-23b280d0b6e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1

#--------------------------------------------------------------------------

func_mmmv_add_bin_2_Z_PATH_and_optionally_share_man_2_MANPATH_t1(){
    local S_FP_INSTALLATION_FOLDER="$1" # is 
                      # the folder with the $S_FP_INSTALLATION_FOLDER/bin 
                      # and optionally  the $S_FP_INSTALLATION_FOLDER/share/man
    local S_GUID_CANDIDATE="$2"
    local SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY="$3" # domain: {"t","f",""} 
                                                    # default: "" -> "f"
    #----------------------------------------------------------------------
    # A global variable for storing function output.
    SB_VERIFICATION_FAILED="f" # domain: "t", "f" .
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$S_GUID_CANDIDATE" == "" ]; then
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
            echo ""
            echo "    S_GUID_CANDIDATE==\"\""
            echo ""
            echo "GUID=='de97a33b-e3f4-40a6-a187-23b280d0b6e7'"
            echo ""
            #--------
            SB_VERIFICATION_FAILED="t"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$S_FP_INSTALLATION_FOLDER" == "" ]; then
            echo ""
            echo -e "\e[31mThe code that calls this function is flawed.\e[39m"
            echo ""
            echo "    S_FP_INSTALLATION_FOLDER==\"\""
            echo ""
            echo "S_GUID_CANDIDATE=='$S_GUID_CANDIDATE'"
            echo "GUID=='07121f64-0299-4ce7-8387-23b280d0b6e7'"
            echo ""
            #--------
            SB_VERIFICATION_FAILED="t"
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        if [ "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" == "" ]; then
            SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY="f" # the default value
        else
            func_mmmv_verify_sb_t_f_but_do_not_exit_t3 \
                "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" \
                "$S_GUID_CANDIDATE"
        fi
    fi
    #------------------------------
    local SB_MAN_FOLDER_OR_NONBROKEN_SYMLINK_TO_IT_EXISTS="f"
    if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
        func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
            "$S_FP_INSTALLATION_FOLDER" "14e55be2-f5f8-48bf-b597-23b280d0b6e7"
        if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
            #--------------
            func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
                "$S_FP_INSTALLATION_FOLDER/bin" "4fe51143-b260-499f-9397-23b280d0b6e7"
            if [ "$SB_VERIFICATION_FAILED" == "f" ]; then
                Z_PATH="$S_FP_INSTALLATION_FOLDER/bin:$Z_PATH"
            fi
            #--------------
            if [ -e "$S_FP_INSTALLATION_FOLDER/share/man" ]; then
                if [ -d "$S_FP_INSTALLATION_FOLDER/share/man" ]; then
                    SB_MAN_FOLDER_OR_NONBROKEN_SYMLINK_TO_IT_EXISTS="t"
                fi
            fi
            if [ "$SB_MAN_FOLDER_OR_NONBROKEN_SYMLINK_TO_IT_EXISTS" == "f" ]; then
                if [ "$SB_MAN_FOLDER_EXISTENCE_IS_MANDATORY" == "t" ]; then
                    # The next 2 lines are for displaying an error message.
                    func_mmmv_verify_that_the_folder_exists_but_do_not_exit_t1 \
                        "$S_FP_INSTALLATION_FOLDER/share/man" "347407a2-0382-4669-b397-23b280d0b6e7"
                fi
            else
                MANPATH="$S_FP_INSTALLATION_FOLDER/share/man:$MANPATH"
            fi
            #--------------
        fi
    fi
    #------------------------------
    if [ "$SB_VERIFICATION_FAILED" != "t" ]; then
        if [ "$SB_VERIFICATION_FAILED" != "f" ]; then
            echo ""
            echo -e "\e[31mThe code of this Bash function is flawed.\e[39m"
            echo "GUID=='4d966415-0217-4b16-a187-23b280d0b6e7'"
            echo ""
        fi
    fi
    #------------------------------
} # func_mmmv_add_bin_2_Z_PATH_and_optionally_share_man_2_MANPATH_t1

#--------------------------------------------------------------------------
# S_VERSION_OF_THIS_FILE="ac3f8e46-53c9-4b6f-8297-23b280d0b6e7"
#==========================================================================
